0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 07 22:04:05 2023
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _writeOutputBuffer
0000             30            public _PtoC
0000             31            public _TIMER0_Init
0000             32            public _getsn
0000             33            public _LCDprint
0000             34            public _LCD_4BIT
0000             35            public _WriteCommand
0000             36            public _WriteData
0000             37            public _LCD_byte
0000             38            public _LCD_pulse
0000             39            public _Volts_at_Pin
0000             40            public _ADC_at_Pin
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _InitADC
0000             45            public __c51_external_startup
0000             46            public _LCDprint_PARM_3
0000             47            public _writeOutputBuffer_PARM_2
0000             48            public _getsn_PARM_2
0000             49            public _LCDprint_PARM_2
0000             50            public _overflow_count
0000             51   ;--------------------------------------------------------
0000             52   ; Special Function Registers
0000             53   ;--------------------------------------------------------
0000             54   _ACC            DATA 0xe0
0000             55   _ADC0ASAH       DATA 0xb6
0000             56   _ADC0ASAL       DATA 0xb5
0000             57   _ADC0ASCF       DATA 0xa1
0000             58   _ADC0ASCT       DATA 0xc7
0000             59   _ADC0CF0        DATA 0xbc
0000             60   _ADC0CF1        DATA 0xb9
0000             61   _ADC0CF2        DATA 0xdf
0000             62   _ADC0CN0        DATA 0xe8
0000             63   _ADC0CN1        DATA 0xb2
0000             64   _ADC0CN2        DATA 0xb3
0000             65   _ADC0GTH        DATA 0xc4
0000             66   _ADC0GTL        DATA 0xc3
0000             67   _ADC0H          DATA 0xbe
0000             68   _ADC0L          DATA 0xbd
0000             69   _ADC0LTH        DATA 0xc6
0000             70   _ADC0LTL        DATA 0xc5
0000             71   _ADC0MX         DATA 0xbb
0000             72   _B              DATA 0xf0
0000             73   _CKCON0         DATA 0x8e
0000             74   _CKCON1         DATA 0xa6
0000             75   _CLEN0          DATA 0xc6
0000             76   _CLIE0          DATA 0xc7
0000             77   _CLIF0          DATA 0xe8
0000             78   _CLKSEL         DATA 0xa9
0000             79   _CLOUT0         DATA 0xd1
0000             80   _CLU0CF         DATA 0xb1
0000             81   _CLU0FN         DATA 0xaf
0000             82   _CLU0MX         DATA 0x84
0000             83   _CLU1CF         DATA 0xb3
0000             84   _CLU1FN         DATA 0xb2
0000             85   _CLU1MX         DATA 0x85
0000             86   _CLU2CF         DATA 0xb6
0000             87   _CLU2FN         DATA 0xb5
0000             88   _CLU2MX         DATA 0x91
0000             89   _CLU3CF         DATA 0xbf
0000             90   _CLU3FN         DATA 0xbe
0000             91   _CLU3MX         DATA 0xae
0000             92   _CMP0CN0        DATA 0x9b
0000             93   _CMP0CN1        DATA 0x99
0000             94   _CMP0MD         DATA 0x9d
0000             95   _CMP0MX         DATA 0x9f
0000             96   _CMP1CN0        DATA 0xbf
0000             97   _CMP1CN1        DATA 0xac
0000             98   _CMP1MD         DATA 0xab
0000             99   _CMP1MX         DATA 0xaa
0000            100   _CRC0CN0        DATA 0xce
0000            101   _CRC0CN1        DATA 0x86
0000            102   _CRC0CNT        DATA 0xd3
0000            103   _CRC0DAT        DATA 0xcb
0000            104   _CRC0FLIP       DATA 0xcf
0000            105   _CRC0IN         DATA 0xca
0000            106   _CRC0ST         DATA 0xd2
0000            107   _DAC0CF0        DATA 0x91
0000            108   _DAC0CF1        DATA 0x92
0000            109   _DAC0H          DATA 0x85
0000            110   _DAC0L          DATA 0x84
0000            111   _DAC1CF0        DATA 0x93
0000            112   _DAC1CF1        DATA 0x94
0000            113   _DAC1H          DATA 0x8a
0000            114   _DAC1L          DATA 0x89
0000            115   _DAC2CF0        DATA 0x95
0000            116   _DAC2CF1        DATA 0x96
0000            117   _DAC2H          DATA 0x8c
0000            118   _DAC2L          DATA 0x8b
0000            119   _DAC3CF0        DATA 0x9a
0000            120   _DAC3CF1        DATA 0x9c
0000            121   _DAC3H          DATA 0x8e
0000            122   _DAC3L          DATA 0x8d
0000            123   _DACGCF0        DATA 0x88
0000            124   _DACGCF1        DATA 0x98
0000            125   _DACGCF2        DATA 0xa2
0000            126   _DERIVID        DATA 0xad
0000            127   _DEVICEID       DATA 0xb5
0000            128   _DPH            DATA 0x83
0000            129   _DPL            DATA 0x82
0000            130   _EIE1           DATA 0xe6
0000            131   _EIE2           DATA 0xf3
0000            132   _EIP1           DATA 0xbb
0000            133   _EIP1H          DATA 0xee
0000            134   _EIP2           DATA 0xed
0000            135   _EIP2H          DATA 0xf6
0000            136   _EMI0CN         DATA 0xe7
0000            137   _FLKEY          DATA 0xb7
0000            138   _HFO0CAL        DATA 0xc7
0000            139   _HFO1CAL        DATA 0xd6
0000            140   _HFOCN          DATA 0xef
0000            141   _I2C0ADM        DATA 0xff
0000            142   _I2C0CN0        DATA 0xba
0000            143   _I2C0DIN        DATA 0xbc
0000            144   _I2C0DOUT       DATA 0xbb
0000            145   _I2C0FCN0       DATA 0xad
0000            146   _I2C0FCN1       DATA 0xab
0000            147   _I2C0FCT        DATA 0xf5
0000            148   _I2C0SLAD       DATA 0xbd
0000            149   _I2C0STAT       DATA 0xb9
0000            150   _IE             DATA 0xa8
0000            151   _IP             DATA 0xb8
0000            152   _IPH            DATA 0xf2
0000            153   _IT01CF         DATA 0xe4
0000            154   _LFO0CN         DATA 0xb1
0000            155   _P0             DATA 0x80
0000            156   _P0MASK         DATA 0xfe
0000            157   _P0MAT          DATA 0xfd
0000            158   _P0MDIN         DATA 0xf1
0000            159   _P0MDOUT        DATA 0xa4
0000            160   _P0SKIP         DATA 0xd4
0000            161   _P1             DATA 0x90
0000            162   _P1MASK         DATA 0xee
0000            163   _P1MAT          DATA 0xed
0000            164   _P1MDIN         DATA 0xf2
0000            165   _P1MDOUT        DATA 0xa5
0000            166   _P1SKIP         DATA 0xd5
0000            167   _P2             DATA 0xa0
0000            168   _P2MASK         DATA 0xfc
0000            169   _P2MAT          DATA 0xfb
0000            170   _P2MDIN         DATA 0xf3
0000            171   _P2MDOUT        DATA 0xa6
0000            172   _P2SKIP         DATA 0xcc
0000            173   _P3             DATA 0xb0
0000            174   _P3MDIN         DATA 0xf4
0000            175   _P3MDOUT        DATA 0x9c
0000            176   _PCA0CENT       DATA 0x9e
0000            177   _PCA0CLR        DATA 0x9c
0000            178   _PCA0CN0        DATA 0xd8
0000            179   _PCA0CPH0       DATA 0xfc
0000            180   _PCA0CPH1       DATA 0xea
0000            181   _PCA0CPH2       DATA 0xec
0000            182   _PCA0CPH3       DATA 0xf5
0000            183   _PCA0CPH4       DATA 0x85
0000            184   _PCA0CPH5       DATA 0xde
0000            185   _PCA0CPL0       DATA 0xfb
0000            186   _PCA0CPL1       DATA 0xe9
0000            187   _PCA0CPL2       DATA 0xeb
0000            188   _PCA0CPL3       DATA 0xf4
0000            189   _PCA0CPL4       DATA 0x84
0000            190   _PCA0CPL5       DATA 0xdd
0000            191   _PCA0CPM0       DATA 0xda
0000            192   _PCA0CPM1       DATA 0xdb
0000            193   _PCA0CPM2       DATA 0xdc
0000            194   _PCA0CPM3       DATA 0xae
0000            195   _PCA0CPM4       DATA 0xaf
0000            196   _PCA0CPM5       DATA 0xcc
0000            197   _PCA0H          DATA 0xfa
0000            198   _PCA0L          DATA 0xf9
0000            199   _PCA0MD         DATA 0xd9
0000            200   _PCA0POL        DATA 0x96
0000            201   _PCA0PWM        DATA 0xf7
0000            202   _PCON0          DATA 0x87
0000            203   _PCON1          DATA 0xcd
0000            204   _PFE0CN         DATA 0xc1
0000            205   _PRTDRV         DATA 0xf6
0000            206   _PSCTL          DATA 0x8f
0000            207   _PSTAT0         DATA 0xaa
0000            208   _PSW            DATA 0xd0
0000            209   _REF0CN         DATA 0xd1
0000            210   _REG0CN         DATA 0xc9
0000            211   _REVID          DATA 0xb6
0000            212   _RSTSRC         DATA 0xef
0000            213   _SBCON1         DATA 0x94
0000            214   _SBRLH1         DATA 0x96
0000            215   _SBRLL1         DATA 0x95
0000            216   _SBUF           DATA 0x99
0000            217   _SBUF0          DATA 0x99
0000            218   _SBUF1          DATA 0x92
0000            219   _SCON           DATA 0x98
0000            220   _SCON0          DATA 0x98
0000            221   _SCON1          DATA 0xc8
0000            222   _SFRPAGE        DATA 0xa7
0000            223   _SFRPGCN        DATA 0xbc
0000            224   _SFRSTACK       DATA 0xd7
0000            225   _SMB0ADM        DATA 0xd6
0000            226   _SMB0ADR        DATA 0xd7
0000            227   _SMB0CF         DATA 0xc1
0000            228   _SMB0CN0        DATA 0xc0
0000            229   _SMB0DAT        DATA 0xc2
0000            230   _SMB0FCN0       DATA 0xc3
0000            231   _SMB0FCN1       DATA 0xc4
0000            232   _SMB0FCT        DATA 0xef
0000            233   _SMB0RXLN       DATA 0xc5
0000            234   _SMB0TC         DATA 0xac
0000            235   _SMOD1          DATA 0x93
0000            236   _SP             DATA 0x81
0000            237   _SPI0CFG        DATA 0xa1
0000            238   _SPI0CKR        DATA 0xa2
0000            239   _SPI0CN0        DATA 0xf8
0000            240   _SPI0DAT        DATA 0xa3
0000            241   _SPI0FCN0       DATA 0x9a
0000            242   _SPI0FCN1       DATA 0x9b
0000            243   _SPI0FCT        DATA 0xf7
0000            244   _SPI0PCF        DATA 0xdf
0000            245   _TCON           DATA 0x88
0000            246   _TH0            DATA 0x8c
0000            247   _TH1            DATA 0x8d
0000            248   _TL0            DATA 0x8a
0000            249   _TL1            DATA 0x8b
0000            250   _TMOD           DATA 0x89
0000            251   _TMR2CN0        DATA 0xc8
0000            252   _TMR2CN1        DATA 0xfd
0000            253   _TMR2H          DATA 0xcf
0000            254   _TMR2L          DATA 0xce
0000            255   _TMR2RLH        DATA 0xcb
0000            256   _TMR2RLL        DATA 0xca
0000            257   _TMR3CN0        DATA 0x91
0000            258   _TMR3CN1        DATA 0xfe
0000            259   _TMR3H          DATA 0x95
0000            260   _TMR3L          DATA 0x94
0000            261   _TMR3RLH        DATA 0x93
0000            262   _TMR3RLL        DATA 0x92
0000            263   _TMR4CN0        DATA 0x98
0000            264   _TMR4CN1        DATA 0xff
0000            265   _TMR4H          DATA 0xa5
0000            266   _TMR4L          DATA 0xa4
0000            267   _TMR4RLH        DATA 0xa3
0000            268   _TMR4RLL        DATA 0xa2
0000            269   _TMR5CN0        DATA 0xc0
0000            270   _TMR5CN1        DATA 0xf1
0000            271   _TMR5H          DATA 0xd5
0000            272   _TMR5L          DATA 0xd4
0000            273   _TMR5RLH        DATA 0xd3
0000            274   _TMR5RLL        DATA 0xd2
0000            275   _UART0PCF       DATA 0xd9
0000            276   _UART1FCN0      DATA 0x9d
0000            277   _UART1FCN1      DATA 0xd8
0000            278   _UART1FCT       DATA 0xfa
0000            279   _UART1LIN       DATA 0x9e
0000            280   _UART1PCF       DATA 0xda
0000            281   _VDM0CN         DATA 0xff
0000            282   _WDTCN          DATA 0x97
0000            283   _XBR0           DATA 0xe1
0000            284   _XBR1           DATA 0xe2
0000            285   _XBR2           DATA 0xe3
0000            286   _XOSC0CN        DATA 0x86
0000            287   _DPTR           DATA 0x8382
0000            288   _TMR2RL         DATA 0xcbca
0000            289   _TMR3RL         DATA 0x9392
0000            290   _TMR4RL         DATA 0xa3a2
0000            291   _TMR5RL         DATA 0xd3d2
0000            292   _TMR0           DATA 0x8c8a
0000            293   _TMR1           DATA 0x8d8b
0000            294   _TMR2           DATA 0xcfce
0000            295   _TMR3           DATA 0x9594
0000            296   _TMR4           DATA 0xa5a4
0000            297   _TMR5           DATA 0xd5d4
0000            298   _SBRL1          DATA 0x9695
0000            299   _PCA0           DATA 0xfaf9
0000            300   _PCA0CP0        DATA 0xfcfb
0000            301   _PCA0CP1        DATA 0xeae9
0000            302   _PCA0CP2        DATA 0xeceb
0000            303   _PCA0CP3        DATA 0xf5f4
0000            304   _PCA0CP4        DATA 0x8584
0000            305   _PCA0CP5        DATA 0xdedd
0000            306   _ADC0ASA        DATA 0xb6b5
0000            307   _ADC0GT         DATA 0xc4c3
0000            308   _ADC0           DATA 0xbebd
0000            309   _ADC0LT         DATA 0xc6c5
0000            310   _DAC0           DATA 0x8584
0000            311   _DAC1           DATA 0x8a89
0000            312   _DAC2           DATA 0x8c8b
0000            313   _DAC3           DATA 0x8e8d
0000            314   ;--------------------------------------------------------
0000            315   ; special function bits
0000            316   ;--------------------------------------------------------
0000            317   _ACC_0          BIT 0xe0
0000            318   _ACC_1          BIT 0xe1
0000            319   _ACC_2          BIT 0xe2
0000            320   _ACC_3          BIT 0xe3
0000            321   _ACC_4          BIT 0xe4
0000            322   _ACC_5          BIT 0xe5
0000            323   _ACC_6          BIT 0xe6
0000            324   _ACC_7          BIT 0xe7
0000            325   _TEMPE          BIT 0xe8
0000            326   _ADGN0          BIT 0xe9
0000            327   _ADGN1          BIT 0xea
0000            328   _ADWINT         BIT 0xeb
0000            329   _ADBUSY         BIT 0xec
0000            330   _ADINT          BIT 0xed
0000            331   _IPOEN          BIT 0xee
0000            332   _ADEN           BIT 0xef
0000            333   _B_0            BIT 0xf0
0000            334   _B_1            BIT 0xf1
0000            335   _B_2            BIT 0xf2
0000            336   _B_3            BIT 0xf3
0000            337   _B_4            BIT 0xf4
0000            338   _B_5            BIT 0xf5
0000            339   _B_6            BIT 0xf6
0000            340   _B_7            BIT 0xf7
0000            341   _C0FIF          BIT 0xe8
0000            342   _C0RIF          BIT 0xe9
0000            343   _C1FIF          BIT 0xea
0000            344   _C1RIF          BIT 0xeb
0000            345   _C2FIF          BIT 0xec
0000            346   _C2RIF          BIT 0xed
0000            347   _C3FIF          BIT 0xee
0000            348   _C3RIF          BIT 0xef
0000            349   _D1SRC0         BIT 0x88
0000            350   _D1SRC1         BIT 0x89
0000            351   _D1AMEN         BIT 0x8a
0000            352   _D01REFSL       BIT 0x8b
0000            353   _D3SRC0         BIT 0x8c
0000            354   _D3SRC1         BIT 0x8d
0000            355   _D3AMEN         BIT 0x8e
0000            356   _D23REFSL       BIT 0x8f
0000            357   _D0UDIS         BIT 0x98
0000            358   _D1UDIS         BIT 0x99
0000            359   _D2UDIS         BIT 0x9a
0000            360   _D3UDIS         BIT 0x9b
0000            361   _EX0            BIT 0xa8
0000            362   _ET0            BIT 0xa9
0000            363   _EX1            BIT 0xaa
0000            364   _ET1            BIT 0xab
0000            365   _ES0            BIT 0xac
0000            366   _ET2            BIT 0xad
0000            367   _ESPI0          BIT 0xae
0000            368   _EA             BIT 0xaf
0000            369   _PX0            BIT 0xb8
0000            370   _PT0            BIT 0xb9
0000            371   _PX1            BIT 0xba
0000            372   _PT1            BIT 0xbb
0000            373   _PS0            BIT 0xbc
0000            374   _PT2            BIT 0xbd
0000            375   _PSPI0          BIT 0xbe
0000            376   _P0_0           BIT 0x80
0000            377   _P0_1           BIT 0x81
0000            378   _P0_2           BIT 0x82
0000            379   _P0_3           BIT 0x83
0000            380   _P0_4           BIT 0x84
0000            381   _P0_5           BIT 0x85
0000            382   _P0_6           BIT 0x86
0000            383   _P0_7           BIT 0x87
0000            384   _P1_0           BIT 0x90
0000            385   _P1_1           BIT 0x91
0000            386   _P1_2           BIT 0x92
0000            387   _P1_3           BIT 0x93
0000            388   _P1_4           BIT 0x94
0000            389   _P1_5           BIT 0x95
0000            390   _P1_6           BIT 0x96
0000            391   _P1_7           BIT 0x97
0000            392   _P2_0           BIT 0xa0
0000            393   _P2_1           BIT 0xa1
0000            394   _P2_2           BIT 0xa2
0000            395   _P2_3           BIT 0xa3
0000            396   _P2_4           BIT 0xa4
0000            397   _P2_5           BIT 0xa5
0000            398   _P2_6           BIT 0xa6
0000            399   _P3_0           BIT 0xb0
0000            400   _P3_1           BIT 0xb1
0000            401   _P3_2           BIT 0xb2
0000            402   _P3_3           BIT 0xb3
0000            403   _P3_4           BIT 0xb4
0000            404   _P3_7           BIT 0xb7
0000            405   _CCF0           BIT 0xd8
0000            406   _CCF1           BIT 0xd9
0000            407   _CCF2           BIT 0xda
0000            408   _CCF3           BIT 0xdb
0000            409   _CCF4           BIT 0xdc
0000            410   _CCF5           BIT 0xdd
0000            411   _CR             BIT 0xde
0000            412   _CF             BIT 0xdf
0000            413   _PARITY         BIT 0xd0
0000            414   _F1             BIT 0xd1
0000            415   _OV             BIT 0xd2
0000            416   _RS0            BIT 0xd3
0000            417   _RS1            BIT 0xd4
0000            418   _F0             BIT 0xd5
0000            419   _AC             BIT 0xd6
0000            420   _CY             BIT 0xd7
0000            421   _RI             BIT 0x98
0000            422   _TI             BIT 0x99
0000            423   _RB8            BIT 0x9a
0000            424   _TB8            BIT 0x9b
0000            425   _REN            BIT 0x9c
0000            426   _CE             BIT 0x9d
0000            427   _SMODE          BIT 0x9e
0000            428   _RI1            BIT 0xc8
0000            429   _TI1            BIT 0xc9
0000            430   _RBX1           BIT 0xca
0000            431   _TBX1           BIT 0xcb
0000            432   _REN1           BIT 0xcc
0000            433   _PERR1          BIT 0xcd
0000            434   _OVR1           BIT 0xce
0000            435   _SI             BIT 0xc0
0000            436   _ACK            BIT 0xc1
0000            437   _ARBLOST        BIT 0xc2
0000            438   _ACKRQ          BIT 0xc3
0000            439   _STO            BIT 0xc4
0000            440   _STA            BIT 0xc5
0000            441   _TXMODE         BIT 0xc6
0000            442   _MASTER         BIT 0xc7
0000            443   _SPIEN          BIT 0xf8
0000            444   _TXNF           BIT 0xf9
0000            445   _NSSMD0         BIT 0xfa
0000            446   _NSSMD1         BIT 0xfb
0000            447   _RXOVRN         BIT 0xfc
0000            448   _MODF           BIT 0xfd
0000            449   _WCOL           BIT 0xfe
0000            450   _SPIF           BIT 0xff
0000            451   _IT0            BIT 0x88
0000            452   _IE0            BIT 0x89
0000            453   _IT1            BIT 0x8a
0000            454   _IE1            BIT 0x8b
0000            455   _TR0            BIT 0x8c
0000            456   _TF0            BIT 0x8d
0000            457   _TR1            BIT 0x8e
0000            458   _TF1            BIT 0x8f
0000            459   _T2XCLK0        BIT 0xc8
0000            460   _T2XCLK1        BIT 0xc9
0000            461   _TR2            BIT 0xca
0000            462   _T2SPLIT        BIT 0xcb
0000            463   _TF2CEN         BIT 0xcc
0000            464   _TF2LEN         BIT 0xcd
0000            465   _TF2L           BIT 0xce
0000            466   _TF2H           BIT 0xcf
0000            467   _T4XCLK0        BIT 0x98
0000            468   _T4XCLK1        BIT 0x99
0000            469   _TR4            BIT 0x9a
0000            470   _T4SPLIT        BIT 0x9b
0000            471   _TF4CEN         BIT 0x9c
0000            472   _TF4LEN         BIT 0x9d
0000            473   _TF4L           BIT 0x9e
0000            474   _TF4H           BIT 0x9f
0000            475   _T5XCLK0        BIT 0xc0
0000            476   _T5XCLK1        BIT 0xc1
0000            477   _TR5            BIT 0xc2
0000            478   _T5SPLIT        BIT 0xc3
0000            479   _TF5CEN         BIT 0xc4
0000            480   _TF5LEN         BIT 0xc5
0000            481   _TF5L           BIT 0xc6
0000            482   _TF5H           BIT 0xc7
0000            483   _RIE            BIT 0xd8
0000            484   _RXTO0          BIT 0xd9
0000            485   _RXTO1          BIT 0xda
0000            486   _RFRQ           BIT 0xdb
0000            487   _TIE            BIT 0xdc
0000            488   _TXHOLD         BIT 0xdd
0000            489   _TXNF1          BIT 0xde
0000            490   _TFRQ           BIT 0xdf
0000            491   ;--------------------------------------------------------
0000            492   ; overlayable register banks
0000            493   ;--------------------------------------------------------
0000            494            rbank0 segment data overlay
0000            495   ;--------------------------------------------------------
0000            496   ; internal ram data
0000            497   ;--------------------------------------------------------
0000            498            rseg R_DSEG
0000            499   _overflow_count:
0000            500            ds 1
0001            501   _LCDprint_PARM_2:
0001            502            ds 1
0002            503   _getsn_PARM_2:
0002            504            ds 2
0004            505   _getsn_buff_1_70:
0004            506            ds 3
0007            507   _getsn_sloc0_1_0:
0007            508            ds 2
0009            509   _writeOutputBuffer_PARM_2:
0009            510            ds 4
000D            511   _main_v_1_86:
000D            512            ds 16
001D            513   ;--------------------------------------------------------
001D            514   ; overlayable items in internal ram 
001D            515   ;--------------------------------------------------------
0000            516            rseg    R_OSEG
0000            517            rseg    R_OSEG
0000            518   _InitPinADC_PARM_2:
0000            519            ds 1
0001            520            rseg    R_OSEG
0001            521   ;--------------------------------------------------------
0001            522   ; indirectly addressable internal ram data
0001            523   ;--------------------------------------------------------
0000            524            rseg R_ISEG
0000            525   ;--------------------------------------------------------
0000            526   ; absolute internal ram data
0000            527   ;--------------------------------------------------------
0000            528            DSEG
0000            529   ;--------------------------------------------------------
0000            530   ; bit data
0000            531   ;--------------------------------------------------------
0000            532            rseg R_BSEG
0000            533   _LCDprint_PARM_3:
0000            534            DBIT    1
0001            535   ;--------------------------------------------------------
0001            536   ; paged external ram data
0001            537   ;--------------------------------------------------------
0000            538            rseg R_PSEG
0000            539   ;--------------------------------------------------------
0000            540   ; external ram data
0000            541   ;--------------------------------------------------------
0000            542            rseg R_XSEG
0000            543   ;--------------------------------------------------------
0000            544   ; absolute external ram data
0000            545   ;--------------------------------------------------------
0000            546            XSEG
0000            547   ;--------------------------------------------------------
0000            548   ; external initialized ram data
0000            549   ;--------------------------------------------------------
0000            550            rseg R_IXSEG
0000            551            rseg R_HOME
0000            552            rseg R_GSINIT
0000            553            rseg R_CSEG
0000            554   ;--------------------------------------------------------
0000            555   ; Reset entry point and interrupt vectors
0000            556   ;--------------------------------------------------------
0000            557            CSEG at 0x0000
0000 020000     558            ljmp    _crt0
0003            559   ;--------------------------------------------------------
0003            560   ; global & static initialisations
0003            561   ;--------------------------------------------------------
0000            562            rseg R_HOME
0000            563            rseg R_GSINIT
0000            564            rseg R_GSINIT
0000            565   ;--------------------------------------------------------
0000            566   ; data variables initialization
0000            567   ;--------------------------------------------------------
0000            568            rseg R_DINIT
0000            569            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            570   ;--------------------------------------------------------
0000            571   ; code
0000            572   ;--------------------------------------------------------
0000            573            rseg R_CSEG
0000            574   ;------------------------------------------------------------
0000            575   ;Allocation info for local variables in function '_c51_external_startup'
0000            576   ;------------------------------------------------------------
0000            577   ;------------------------------------------------------------
0000            578   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:28: char _c51_external_startup (void)
0000            579   ;        -----------------------------------------
0000            580   ;         function _c51_external_startup
0000            581   ;        -----------------------------------------
0000            582   __c51_external_startup:
0000            583            using   0
0000            584   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:31: SFRPAGE = 0x00;
0000 75A700     585            mov     _SFRPAGE,#0x00
0003            586   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:32: WDTCN = 0xDE; //First key
0003 7597DE     587            mov     _WDTCN,#0xDE
0006            588   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:33: WDTCN = 0xAD; //Second key
0006 7597AD     589            mov     _WDTCN,#0xAD
0009            590   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:35: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     591            mov     _VDM0CN,#0x80
000C            592   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:36: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     593            mov     _RSTSRC,#0x06
000F            594   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:43: SFRPAGE = 0x10;
000F 75A710     595            mov     _SFRPAGE,#0x10
0012            596   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:44: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     597            mov     _PFE0CN,#0x20
0015            598   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:45: SFRPAGE = 0x00;
0015 75A700     599            mov     _SFRPAGE,#0x00
0018            600   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:66: CLKSEL = 0x00;
0018 75A900     601            mov     _CLKSEL,#0x00
001B            602   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:67: CLKSEL = 0x00;
001B 75A900     603            mov     _CLKSEL,#0x00
001E            604   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:68: while ((CLKSEL & 0x80) == 0);
001E            605   L002001?:
001E E5A9       606            mov     a,_CLKSEL
0020 30E7F0     607            jnb     acc.7,L002001?
0023            608   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:69: CLKSEL = 0x03;
0023 75A903     609            mov     _CLKSEL,#0x03
0026            610   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:70: CLKSEL = 0x03;
0026 75A903     611            mov     _CLKSEL,#0x03
0029            612   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:71: while ((CLKSEL & 0x80) == 0);
0029            613   L002004?:
0029 E5A9       614            mov     a,_CLKSEL
002B 30E770     615            jnb     acc.7,L002004?
002E            616   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:76: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     617            orl     _P0MDOUT,#0x10
0031            618   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:77: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     619            mov     _XBR0,#0x01
0034            620   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:78: XBR1     = 0X00;
0034 75E200     621            mov     _XBR1,#0x00
0037            622   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:79: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     623            mov     _XBR2,#0x40
003A            624   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:85: SCON0 = 0x10;
003A 759810     625            mov     _SCON0,#0x10
003D            626   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:86: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     627            mov     _TH1,#0xE6
0040            628   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:87: TL1 = TH1;      // Init Timer1
0040 858D8B     629            mov     _TL1,_TH1
0043            630   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:88: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     631            anl     _TMOD,#0x0F
0046            632   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:89: TMOD |=  0x20;                       
0046 438920     633            orl     _TMOD,#0x20
0049            634   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:90: TR1 = 1; // START Timer1
0049 D28E       635            setb    _TR1
004B            636   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:91: TI = 1;  // Indicate TX0 ready
004B D299       637            setb    _TI
004D            638   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:93: return 0;
004D 758200     639            mov     dpl,#0x00
0050 22         640            ret
0051            641   ;------------------------------------------------------------
0051            642   ;Allocation info for local variables in function 'InitADC'
0051            643   ;------------------------------------------------------------
0051            644   ;------------------------------------------------------------
0051            645   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:96: void InitADC (void)
0051            646   ;        -----------------------------------------
0051            647   ;         function InitADC
0051            648   ;        -----------------------------------------
0051            649   _InitADC:
0051            650   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:98: SFRPAGE = 0x00;
0051 75A700     651            mov     _SFRPAGE,#0x00
0054            652   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:99: ADEN=0; // Disable ADC
0054 C2EF       653            clr     _ADEN
0056            654   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:104: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     655            mov     _ADC0CN1,#0x80
0059            656   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:108: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     657            mov     _ADC0CF0,#0x20
005C            658   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:112: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     659            mov     _ADC0CF1,#0x1E
005F            660   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:121: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     661            mov     _ADC0CN0,#0x00
0062            662   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:126: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     663            mov     _ADC0CF2,#0x3F
0065            664   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:130: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     665            mov     _ADC0CN2,#0x00
0068            666   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:132: ADEN=1; // Enable ADC
0068 D2EF       667            setb    _ADEN
006A 22         668            ret
006B            669   ;------------------------------------------------------------
006B            670   ;Allocation info for local variables in function 'Timer3us'
006B            671   ;------------------------------------------------------------
006B            672   ;us                        Allocated to registers r2 
006B            673   ;i                         Allocated to registers r3 
006B            674   ;------------------------------------------------------------
006B            675   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:136: void Timer3us(unsigned char us)
006B            676   ;        -----------------------------------------
006B            677   ;         function Timer3us
006B            678   ;        -----------------------------------------
006B            679   _Timer3us:
006B AA82       680            mov     r2,dpl
006D            681   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:141: CKCON0|=0b_0100_0000;
006D 438E40     682            orl     _CKCON0,#0x40
0070            683   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:143: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     684            mov     _TMR3RL,#0xB8
0073 7593FF     685            mov     (_TMR3RL >> 8),#0xFF
0076            686   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:144: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     687            mov     _TMR3,_TMR3RL
0079 859395     688            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            689   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:146: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     690            mov     _TMR3CN0,#0x04
007F            691   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:147: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       692            mov     r3,#0x00
0081            693   L004004?:
0081 C3         694            clr     c
0082 EB         695            mov     a,r3
0083 9A         696            subb    a,r2
0084 5000       697            jnc     L004007?
0086            698   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:149: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            699   L004001?:
0086 E591       700            mov     a,_TMR3CN0
0088 30E770     701            jnb     acc.7,L004001?
008B            702   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:150: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     703            anl     _TMR3CN0,#0x7F
008E            704   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:147: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         705            inc     r3
008F 8000       706            sjmp    L004004?
0091            707   L004007?:
0091            708   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:152: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     709            mov     _TMR3CN0,#0x00
0094 22         710            ret
0095            711   ;------------------------------------------------------------
0095            712   ;Allocation info for local variables in function 'waitms'
0095            713   ;------------------------------------------------------------
0095            714   ;ms                        Allocated to registers r2 r3 
0095            715   ;j                         Allocated to registers r4 r5 
0095            716   ;k                         Allocated to registers r6 
0095            717   ;------------------------------------------------------------
0095            718   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:155: void waitms (unsigned int ms)
0095            719   ;        -----------------------------------------
0095            720   ;         function waitms
0095            721   ;        -----------------------------------------
0095            722   _waitms:
0095 AA82       723            mov     r2,dpl
0097 AB83       724            mov     r3,dph
0099            725   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:159: for(j=0; j<ms; j++)
0099 7C00       726            mov     r4,#0x00
009B 7D00       727            mov     r5,#0x00
009D            728   L005005?:
009D C3         729            clr     c
009E EC         730            mov     a,r4
009F 9A         731            subb    a,r2
00A0 ED         732            mov     a,r5
00A1 9B         733            subb    a,r3
00A2 5000       734            jnc     L005009?
00A4            735   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:160: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       736            mov     r6,#0x00
00A6            737   L005001?:
00A6 BE04B0     738            cjne    r6,#0x04,L005018?
00A9            739   L005018?:
00A9 5000       740            jnc     L005007?
00AB 7582FA     741            mov     dpl,#0xFA
00AE C002       742            push    ar2
00B0 C003       743            push    ar3
00B2 C004       744            push    ar4
00B4 C005       745            push    ar5
00B6 C006       746            push    ar6
00B8 120000     747            lcall   _Timer3us
00BB D006       748            pop     ar6
00BD D005       749            pop     ar5
00BF D004       750            pop     ar4
00C1 D003       751            pop     ar3
00C3 D002       752            pop     ar2
00C5 0E         753            inc     r6
00C6 8000       754            sjmp    L005001?
00C8            755   L005007?:
00C8            756   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:159: for(j=0; j<ms; j++)
00C8 0C         757            inc     r4
00C9 BC00F0     758            cjne    r4,#0x00,L005005?
00CC 0D         759            inc     r5
00CD 8000       760            sjmp    L005005?
00CF            761   L005009?:
00CF 22         762            ret
00D0            763   ;------------------------------------------------------------
00D0            764   ;Allocation info for local variables in function 'InitPinADC'
00D0            765   ;------------------------------------------------------------
00D0            766   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            767   ;portno                    Allocated to registers r2 
00D0            768   ;mask                      Allocated to registers r3 
00D0            769   ;------------------------------------------------------------
00D0            770   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:165: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            771   ;        -----------------------------------------
00D0            772   ;         function InitPinADC
00D0            773   ;        -----------------------------------------
00D0            774   _InitPinADC:
00D0 AA82       775            mov     r2,dpl
00D2            776   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:169: mask=1<<pinno;
00D2 85C0F0     777            mov     b,_InitPinADC_PARM_2
00D5 05F0       778            inc     b
00D7 7401       779            mov     a,#0x01
00D9 8000       780            sjmp    L006013?
00DB            781   L006011?:
00DB 25E0       782            add     a,acc
00DD            783   L006013?:
00DD D5F0B0     784            djnz    b,L006011?
00E0 FB         785            mov     r3,a
00E1            786   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:171: SFRPAGE = 0x20;
00E1 75A720     787            mov     _SFRPAGE,#0x20
00E4            788   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:172: switch (portno)
00E4 BA00F0     789            cjne    r2,#0x00,L006014?
00E7 8000       790            sjmp    L006001?
00E9            791   L006014?:
00E9 BA0170     792            cjne    r2,#0x01,L006015?
00EC 8000       793            sjmp    L006002?
00EE            794   L006015?:
00EE            795   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:174: case 0:
00EE BA02F0     796            cjne    r2,#0x02,L006005?
00F1 8000       797            sjmp    L006003?
00F3            798   L006001?:
00F3            799   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:175: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         800            mov     a,r3
00F4 F4         801            cpl     a
00F5 FA         802            mov     r2,a
00F6 52F1       803            anl     _P0MDIN,a
00F8            804   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:176: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         805            mov     a,r3
00F9 42D4       806            orl     _P0SKIP,a
00FB            807   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:177: break;
00FB            808   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:178: case 1:
00FB 8000       809            sjmp    L006005?
00FD            810   L006002?:
00FD            811   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:179: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         812            mov     a,r3
00FE F4         813            cpl     a
00FF FA         814            mov     r2,a
0100 52F2       815            anl     _P1MDIN,a
0102            816   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:180: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         817            mov     a,r3
0103 42D5       818            orl     _P1SKIP,a
0105            819   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:181: break;
0105            820   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:182: case 2:
0105 8000       821            sjmp    L006005?
0107            822   L006003?:
0107            823   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:183: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         824            mov     a,r3
0108 F4         825            cpl     a
0109 FA         826            mov     r2,a
010A 52F3       827            anl     _P2MDIN,a
010C            828   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:184: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         829            mov     a,r3
010D 42CC       830            orl     _P2SKIP,a
010F            831   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:188: }
010F            832   L006005?:
010F            833   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:189: SFRPAGE = 0x00;
010F 75A700     834            mov     _SFRPAGE,#0x00
0112 22         835            ret
0113            836   ;------------------------------------------------------------
0113            837   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            838   ;------------------------------------------------------------
0113            839   ;pin                       Allocated to registers 
0113            840   ;------------------------------------------------------------
0113            841   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:192: unsigned int ADC_at_Pin(unsigned char pin)
0113            842   ;        -----------------------------------------
0113            843   ;         function ADC_at_Pin
0113            844   ;        -----------------------------------------
0113            845   _ADC_at_Pin:
0113 8582BB     846            mov     _ADC0MX,dpl
0116            847   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:195: ADINT = 0;
0116 C2ED       848            clr     _ADINT
0118            849   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:196: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       850            setb    _ADBUSY
011A            851   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:197: while (!ADINT); // Wait for conversion to complete
011A            852   L007001?:
011A 30ED70     853            jnb     _ADINT,L007001?
011D            854   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:198: return (ADC0);
011D 85BD82     855            mov     dpl,_ADC0
0120 85BE83     856            mov     dph,(_ADC0 >> 8)
0123 22         857            ret
0124            858   ;------------------------------------------------------------
0124            859   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            860   ;------------------------------------------------------------
0124            861   ;pin                       Allocated to registers r2 
0124            862   ;------------------------------------------------------------
0124            863   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:201: float Volts_at_Pin(unsigned char pin)
0124            864   ;        -----------------------------------------
0124            865   ;         function Volts_at_Pin
0124            866   ;        -----------------------------------------
0124            867   _Volts_at_Pin:
0124            868   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:203: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     869            lcall   _ADC_at_Pin
0127 120000     870            lcall   ___uint2fs
012A AA82       871            mov     r2,dpl
012C AB83       872            mov     r3,dph
012E ACF0       873            mov     r4,b
0130 FD         874            mov     r5,a
0131 C002       875            push    ar2
0133 C003       876            push    ar3
0135 C004       877            push    ar4
0137 C005       878            push    ar5
0139 906C8B     879            mov     dptr,#0x6C8B
013C 75F053     880            mov     b,#0x53
013F 7440       881            mov     a,#0x40
0141 120000     882            lcall   ___fsmul
0144 AA82       883            mov     r2,dpl
0146 AB83       884            mov     r3,dph
0148 ACF0       885            mov     r4,b
014A FD         886            mov     r5,a
014B E581       887            mov     a,sp
014D 24FC       888            add     a,#0xfc
014F F581       889            mov     sp,a
0151 E4         890            clr     a
0152 C0E0       891            push    acc
0154 74FC       892            mov     a,#0xFC
0156 C0E0       893            push    acc
0158 747F       894            mov     a,#0x7F
015A C0E0       895            push    acc
015C 7446       896            mov     a,#0x46
015E C0E0       897            push    acc
0160 8A82       898            mov     dpl,r2
0162 8B83       899            mov     dph,r3
0164 8CF0       900            mov     b,r4
0166 ED         901            mov     a,r5
0167 120000     902            lcall   ___fsdiv
016A AA82       903            mov     r2,dpl
016C AB83       904            mov     r3,dph
016E ACF0       905            mov     r4,b
0170 FD         906            mov     r5,a
0171 E581       907            mov     a,sp
0173 24FC       908            add     a,#0xfc
0175 F581       909            mov     sp,a
0177 8A82       910            mov     dpl,r2
0179 8B83       911            mov     dph,r3
017B 8CF0       912            mov     b,r4
017D ED         913            mov     a,r5
017E 22         914            ret
017F            915   ;------------------------------------------------------------
017F            916   ;Allocation info for local variables in function 'LCD_pulse'
017F            917   ;------------------------------------------------------------
017F            918   ;------------------------------------------------------------
017F            919   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:206: void LCD_pulse (void)
017F            920   ;        -----------------------------------------
017F            921   ;         function LCD_pulse
017F            922   ;        -----------------------------------------
017F            923   _LCD_pulse:
017F            924   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:208: LCD_E=1;
017F D2A5       925            setb    _P2_5
0181            926   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:209: Timer3us(40);
0181 758228     927            mov     dpl,#0x28
0184 120000     928            lcall   _Timer3us
0187            929   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:210: LCD_E=0;
0187 C2A5       930            clr     _P2_5
0189 22         931            ret
018A            932   ;------------------------------------------------------------
018A            933   ;Allocation info for local variables in function 'LCD_byte'
018A            934   ;------------------------------------------------------------
018A            935   ;x                         Allocated to registers r2 
018A            936   ;------------------------------------------------------------
018A            937   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:213: void LCD_byte (unsigned char x)
018A            938   ;        -----------------------------------------
018A            939   ;         function LCD_byte
018A            940   ;        -----------------------------------------
018A            941   _LCD_byte:
018A AA82       942            mov     r2,dpl
018C            943   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:216: ACC=x; //Send high nible
018C 8AE0       944            mov     _ACC,r2
018E            945   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:217: LCD_D7=ACC_7;
018E A2E7       946            mov     c,_ACC_7
0190 92A1       947            mov     _P2_1,c
0192            948   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:218: LCD_D6=ACC_6;
0192 A2E6       949            mov     c,_ACC_6
0194 92A2       950            mov     _P2_2,c
0196            951   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:219: LCD_D5=ACC_5;
0196 A2E5       952            mov     c,_ACC_5
0198 92A3       953            mov     _P2_3,c
019A            954   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:220: LCD_D4=ACC_4;
019A A2E4       955            mov     c,_ACC_4
019C 92A4       956            mov     _P2_4,c
019E            957   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:221: LCD_pulse();
019E C002       958            push    ar2
01A0 120000     959            lcall   _LCD_pulse
01A3            960   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:222: Timer3us(40);
01A3 758228     961            mov     dpl,#0x28
01A6 120000     962            lcall   _Timer3us
01A9 D002       963            pop     ar2
01AB            964   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:223: ACC=x; //Send low nible
01AB 8AE0       965            mov     _ACC,r2
01AD            966   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:224: LCD_D7=ACC_3;
01AD A2E3       967            mov     c,_ACC_3
01AF 92A1       968            mov     _P2_1,c
01B1            969   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:225: LCD_D6=ACC_2;
01B1 A2E2       970            mov     c,_ACC_2
01B3 92A2       971            mov     _P2_2,c
01B5            972   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:226: LCD_D5=ACC_1;
01B5 A2E1       973            mov     c,_ACC_1
01B7 92A3       974            mov     _P2_3,c
01B9            975   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:227: LCD_D4=ACC_0;
01B9 A2E0       976            mov     c,_ACC_0
01BB 92A4       977            mov     _P2_4,c
01BD            978   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:228: LCD_pulse();
01BD 020000     979            ljmp    _LCD_pulse
01C0            980   ;------------------------------------------------------------
01C0            981   ;Allocation info for local variables in function 'WriteData'
01C0            982   ;------------------------------------------------------------
01C0            983   ;x                         Allocated to registers r2 
01C0            984   ;------------------------------------------------------------
01C0            985   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:231: void WriteData (unsigned char x)
01C0            986   ;        -----------------------------------------
01C0            987   ;         function WriteData
01C0            988   ;        -----------------------------------------
01C0            989   _WriteData:
01C0 AA82       990            mov     r2,dpl
01C2            991   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:233: LCD_RS=1;
01C2 D2A6       992            setb    _P2_6
01C4            993   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:234: LCD_byte(x);
01C4 8A82       994            mov     dpl,r2
01C6 120000     995            lcall   _LCD_byte
01C9            996   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:235: waitms(2);
01C9 900002     997            mov     dptr,#0x0002
01CC 020000     998            ljmp    _waitms
01CF            999   ;------------------------------------------------------------
01CF           1000   ;Allocation info for local variables in function 'WriteCommand'
01CF           1001   ;------------------------------------------------------------
01CF           1002   ;x                         Allocated to registers r2 
01CF           1003   ;------------------------------------------------------------
01CF           1004   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:238: void WriteCommand (unsigned char x)
01CF           1005   ;        -----------------------------------------
01CF           1006   ;         function WriteCommand
01CF           1007   ;        -----------------------------------------
01CF           1008   _WriteCommand:
01CF AA82      1009            mov     r2,dpl
01D1           1010   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:240: LCD_RS=0;
01D1 C2A6      1011            clr     _P2_6
01D3           1012   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:241: LCD_byte(x);
01D3 8A82      1013            mov     dpl,r2
01D5 120000    1014            lcall   _LCD_byte
01D8           1015   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:242: waitms(5);
01D8 900005    1016            mov     dptr,#0x0005
01DB 020000    1017            ljmp    _waitms
01DE           1018   ;------------------------------------------------------------
01DE           1019   ;Allocation info for local variables in function 'LCD_4BIT'
01DE           1020   ;------------------------------------------------------------
01DE           1021   ;------------------------------------------------------------
01DE           1022   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:245: void LCD_4BIT (void)
01DE           1023   ;        -----------------------------------------
01DE           1024   ;         function LCD_4BIT
01DE           1025   ;        -----------------------------------------
01DE           1026   _LCD_4BIT:
01DE           1027   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:247: LCD_E=0; // Resting state of LCD's enable is zero
01DE C2A5      1028            clr     _P2_5
01E0           1029   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:249: waitms(20);
01E0 900014    1030            mov     dptr,#0x0014
01E3 120000    1031            lcall   _waitms
01E6           1032   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:251: WriteCommand(0x33);
01E6 758233    1033            mov     dpl,#0x33
01E9 120000    1034            lcall   _WriteCommand
01EC           1035   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:252: WriteCommand(0x33);
01EC 758233    1036            mov     dpl,#0x33
01EF 120000    1037            lcall   _WriteCommand
01F2           1038   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:253: WriteCommand(0x32); // Change to 4-bit mode
01F2 758232    1039            mov     dpl,#0x32
01F5 120000    1040            lcall   _WriteCommand
01F8           1041   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:256: WriteCommand(0x28);
01F8 758228    1042            mov     dpl,#0x28
01FB 120000    1043            lcall   _WriteCommand
01FE           1044   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:257: WriteCommand(0x0c);
01FE 75820C    1045            mov     dpl,#0x0C
0201 120000    1046            lcall   _WriteCommand
0204           1047   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:258: WriteCommand(0x01); // Clear screen command (takes some time)
0204 758201    1048            mov     dpl,#0x01
0207 120000    1049            lcall   _WriteCommand
020A           1050   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:259: waitms(20); // Wait for clear screen command to finsih.
020A 900014    1051            mov     dptr,#0x0014
020D 020000    1052            ljmp    _waitms
0210           1053   ;------------------------------------------------------------
0210           1054   ;Allocation info for local variables in function 'LCDprint'
0210           1055   ;------------------------------------------------------------
0210           1056   ;line                      Allocated with name '_LCDprint_PARM_2'
0210           1057   ;string                    Allocated to registers r2 r3 r4 
0210           1058   ;j                         Allocated to registers r5 r6 
0210           1059   ;------------------------------------------------------------
0210           1060   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:262: void LCDprint(char * string, unsigned char line, bit clear)
0210           1061   ;        -----------------------------------------
0210           1062   ;         function LCDprint
0210           1063   ;        -----------------------------------------
0210           1064   _LCDprint:
0210 AA82      1065            mov     r2,dpl
0212 AB83      1066            mov     r3,dph
0214 ACF0      1067            mov     r4,b
0216           1068   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:266: WriteCommand(line==2?0xc0:0x80);
0216 7402      1069            mov     a,#0x02
0218 B590B0    1070            cjne    a,_LCDprint_PARM_2,L014013?
021B 7DC0      1071            mov     r5,#0xC0
021D 8000      1072            sjmp    L014014?
021F           1073   L014013?:
021F 7D80      1074            mov     r5,#0x80
0221           1075   L014014?:
0221 8D82      1076            mov     dpl,r5
0223 C002      1077            push    ar2
0225 C003      1078            push    ar3
0227 C004      1079            push    ar4
0229 120000    1080            lcall   _WriteCommand
022C           1081   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:267: waitms(5);
022C 900005    1082            mov     dptr,#0x0005
022F 120000    1083            lcall   _waitms
0232 D004      1084            pop     ar4
0234 D003      1085            pop     ar3
0236 D002      1086            pop     ar2
0238           1087   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:268: for(j=0; string[j]!=0; j++)        WriteData(string[j]);// Write the message
0238 7D00      1088            mov     r5,#0x00
023A 7E00      1089            mov     r6,#0x00
023C           1090   L014003?:
023C ED        1091            mov     a,r5
023D 2A        1092            add     a,r2
023E FF        1093            mov     r7,a
023F EE        1094            mov     a,r6
0240 3B        1095            addc    a,r3
0241 F8        1096            mov     r0,a
0242 8C01      1097            mov     ar1,r4
0244 8F82      1098            mov     dpl,r7
0246 8883      1099            mov     dph,r0
0248 89F0      1100            mov     b,r1
024A 120000    1101            lcall   __gptrget
024D FF        1102            mov     r7,a
024E 6000      1103            jz      L014006?
0250 8F82      1104            mov     dpl,r7
0252 C002      1105            push    ar2
0254 C003      1106            push    ar3
0256 C004      1107            push    ar4
0258 C005      1108            push    ar5
025A C006      1109            push    ar6
025C 120000    1110            lcall   _WriteData
025F D006      1111            pop     ar6
0261 D005      1112            pop     ar5
0263 D004      1113            pop     ar4
0265 D003      1114            pop     ar3
0267 D002      1115            pop     ar2
0269 0D        1116            inc     r5
026A BD0030    1117            cjne    r5,#0x00,L014003?
026D 0E        1118            inc     r6
026E 8000      1119            sjmp    L014003?
0270           1120   L014006?:
0270           1121   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:269: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0270 30B0F0    1122            jnb     _LCDprint_PARM_3,L014011?
0273 8D02      1123            mov     ar2,r5
0275 8E03      1124            mov     ar3,r6
0277           1125   L014007?:
0277 C3        1126            clr     c
0278 EA        1127            mov     a,r2
0279 9410      1128            subb    a,#0x10
027B EB        1129            mov     a,r3
027C 6480      1130            xrl     a,#0x80
027E 9480      1131            subb    a,#0x80
0280 5000      1132            jnc     L014011?
0282 758220    1133            mov     dpl,#0x20
0285 C002      1134            push    ar2
0287 C003      1135            push    ar3
0289 120000    1136            lcall   _WriteData
028C D003      1137            pop     ar3
028E D002      1138            pop     ar2
0290 0A        1139            inc     r2
0291 BA0030    1140            cjne    r2,#0x00,L014007?
0294 0B        1141            inc     r3
0295 8000      1142            sjmp    L014007?
0297           1143   L014011?:
0297 22        1144            ret
0298           1145   ;------------------------------------------------------------
0298           1146   ;Allocation info for local variables in function 'getsn'
0298           1147   ;------------------------------------------------------------
0298           1148   ;len                       Allocated with name '_getsn_PARM_2'
0298           1149   ;buff                      Allocated with name '_getsn_buff_1_70'
0298           1150   ;j                         Allocated with name '_getsn_sloc0_1_0'
0298           1151   ;c                         Allocated to registers r3 
0298           1152   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0298           1153   ;------------------------------------------------------------
0298           1154   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:272: int getsn (char * buff, int len)
0298           1155   ;        -----------------------------------------
0298           1156   ;         function getsn
0298           1157   ;        -----------------------------------------
0298           1158   _getsn:
0298 8582E0    1159            mov     _getsn_buff_1_70,dpl
029B 8583E1    1160            mov     (_getsn_buff_1_70 + 1),dph
029E 85F0E2    1161            mov     (_getsn_buff_1_70 + 2),b
02A1           1162   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:277: for(j=0; j<(len-1); j++)
02A1 E4        1163            clr     a
02A2 F530      1164            mov     _getsn_sloc0_1_0,a
02A4 F531      1165            mov     (_getsn_sloc0_1_0 + 1),a
02A6 E540      1166            mov     a,_getsn_PARM_2
02A8 24FF      1167            add     a,#0xff
02AA FF        1168            mov     r7,a
02AB E541      1169            mov     a,(_getsn_PARM_2 + 1)
02AD 34FF      1170            addc    a,#0xff
02AF F8        1171            mov     r0,a
02B0 7900      1172            mov     r1,#0x00
02B2 7A00      1173            mov     r2,#0x00
02B4           1174   L015005?:
02B4 C3        1175            clr     c
02B5 E9        1176            mov     a,r1
02B6 9F        1177            subb    a,r7
02B7 EA        1178            mov     a,r2
02B8 6480      1179            xrl     a,#0x80
02BA 88F0      1180            mov     b,r0
02BC 63F080    1181            xrl     b,#0x80
02BF 95F0      1182            subb    a,b
02C1 5000      1183            jnc     L015008?
02C3           1184   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:279: c=getchar();
02C3 C002      1185            push    ar2
02C5 C007      1186            push    ar7
02C7 C000      1187            push    ar0
02C9 C001      1188            push    ar1
02CB 120000    1189            lcall   _getchar
02CE AB82      1190            mov     r3,dpl
02D0 D001      1191            pop     ar1
02D2 D000      1192            pop     ar0
02D4 D007      1193            pop     ar7
02D6 D002      1194            pop     ar2
02D8           1195   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:280: if ( (c=='\n') || (c=='\r') )
02D8 BB0A30    1196            cjne    r3,#0x0A,L015015?
02DB 8000      1197            sjmp    L015001?
02DD           1198   L015015?:
02DD BB0DB0    1199            cjne    r3,#0x0D,L015002?
02E0           1200   L015001?:
02E0           1201   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:282: buff[j]=0;
02E0 E530      1202            mov     a,_getsn_sloc0_1_0
02E2 25E0      1203            add     a,_getsn_buff_1_70
02E4 FC        1204            mov     r4,a
02E5 E531      1205            mov     a,(_getsn_sloc0_1_0 + 1)
02E7 35E1      1206            addc    a,(_getsn_buff_1_70 + 1)
02E9 FD        1207            mov     r5,a
02EA AEE2      1208            mov     r6,(_getsn_buff_1_70 + 2)
02EC 8C82      1209            mov     dpl,r4
02EE 8D83      1210            mov     dph,r5
02F0 8EF0      1211            mov     b,r6
02F2 E4        1212            clr     a
02F3 120000    1213            lcall   __gptrput
02F6           1214   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:283: return j;
02F6 853082    1215            mov     dpl,_getsn_sloc0_1_0
02F9 853183    1216            mov     dph,(_getsn_sloc0_1_0 + 1)
02FC 22        1217            ret
02FD           1218   L015002?:
02FD           1219   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:287: buff[j]=c;
02FD E9        1220            mov     a,r1
02FE 25E0      1221            add     a,_getsn_buff_1_70
0300 FC        1222            mov     r4,a
0301 EA        1223            mov     a,r2
0302 35E1      1224            addc    a,(_getsn_buff_1_70 + 1)
0304 FD        1225            mov     r5,a
0305 AEE2      1226            mov     r6,(_getsn_buff_1_70 + 2)
0307 8C82      1227            mov     dpl,r4
0309 8D83      1228            mov     dph,r5
030B 8EF0      1229            mov     b,r6
030D EB        1230            mov     a,r3
030E 120000    1231            lcall   __gptrput
0311           1232   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:277: for(j=0; j<(len-1); j++)
0311 09        1233            inc     r1
0312 B90030    1234            cjne    r1,#0x00,L015018?
0315 0A        1235            inc     r2
0316           1236   L015018?:
0316 8930      1237            mov     _getsn_sloc0_1_0,r1
0318 8A31      1238            mov     (_getsn_sloc0_1_0 + 1),r2
031A 8000      1239            sjmp    L015005?
031C           1240   L015008?:
031C           1241   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:290: buff[j]=0;
031C E530      1242            mov     a,_getsn_sloc0_1_0
031E 25E0      1243            add     a,_getsn_buff_1_70
0320 FA        1244            mov     r2,a
0321 E531      1245            mov     a,(_getsn_sloc0_1_0 + 1)
0323 35E1      1246            addc    a,(_getsn_buff_1_70 + 1)
0325 FB        1247            mov     r3,a
0326 ACE2      1248            mov     r4,(_getsn_buff_1_70 + 2)
0328 8A82      1249            mov     dpl,r2
032A 8B83      1250            mov     dph,r3
032C 8CF0      1251            mov     b,r4
032E E4        1252            clr     a
032F 120000    1253            lcall   __gptrput
0332           1254   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:291: return len;
0332 854082    1255            mov     dpl,_getsn_PARM_2
0335 854183    1256            mov     dph,(_getsn_PARM_2 + 1)
0338 22        1257            ret
0339           1258   ;------------------------------------------------------------
0339           1259   ;Allocation info for local variables in function 'TIMER0_Init'
0339           1260   ;------------------------------------------------------------
0339           1261   ;------------------------------------------------------------
0339           1262   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:294: void TIMER0_Init(void)
0339           1263   ;        -----------------------------------------
0339           1264   ;         function TIMER0_Init
0339           1265   ;        -----------------------------------------
0339           1266   _TIMER0_Init:
0339           1267   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:296: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0339 5389F0    1268            anl     _TMOD,#0xF0
033C           1269   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:297: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
033C 438901    1270            orl     _TMOD,#0x01
033F           1271   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:298: TR0=0; // Stop Timer/Counter 0
033F C28C      1272            clr     _TR0
0341 22        1273            ret
0342           1274   ;------------------------------------------------------------
0342           1275   ;Allocation info for local variables in function 'PtoC'
0342           1276   ;------------------------------------------------------------
0342           1277   ;period                    Allocated to registers r2 r3 r4 r5 
0342           1278   ;------------------------------------------------------------
0342           1279   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:301: double PtoC(double period){
0342           1280   ;        -----------------------------------------
0342           1281   ;         function PtoC
0342           1282   ;        -----------------------------------------
0342           1283   _PtoC:
0342 AA82      1284            mov     r2,dpl
0344 AB83      1285            mov     r3,dph
0346 ACF0      1286            mov     r4,b
0348 FD        1287            mov     r5,a
0349           1288   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:302: return ((period*1000000000.0)/(3465.7359028));
0349 C002      1289            push    ar2
034B C003      1290            push    ar3
034D C004      1291            push    ar4
034F C005      1292            push    ar5
0351 906B28    1293            mov     dptr,#0x6B28
0354 75F06E    1294            mov     b,#0x6E
0357 744E      1295            mov     a,#0x4E
0359 120000    1296            lcall   ___fsmul
035C AA82      1297            mov     r2,dpl
035E AB83      1298            mov     r3,dph
0360 ACF0      1299            mov     r4,b
0362 FD        1300            mov     r5,a
0363 E581      1301            mov     a,sp
0365 24FC      1302            add     a,#0xfc
0367 F581      1303            mov     sp,a
0369 74C6      1304            mov     a,#0xC6
036B C0E0      1305            push    acc
036D 749B      1306            mov     a,#0x9B
036F C0E0      1307            push    acc
0371 7458      1308            mov     a,#0x58
0373 C0E0      1309            push    acc
0375 7445      1310            mov     a,#0x45
0377 C0E0      1311            push    acc
0379 8A82      1312            mov     dpl,r2
037B 8B83      1313            mov     dph,r3
037D 8CF0      1314            mov     b,r4
037F ED        1315            mov     a,r5
0380 120000    1316            lcall   ___fsdiv
0383 AA82      1317            mov     r2,dpl
0385 AB83      1318            mov     r3,dph
0387 ACF0      1319            mov     r4,b
0389 FD        1320            mov     r5,a
038A E581      1321            mov     a,sp
038C 24FC      1322            add     a,#0xfc
038E F581      1323            mov     sp,a
0390 8A82      1324            mov     dpl,r2
0392 8B83      1325            mov     dph,r3
0394 8CF0      1326            mov     b,r4
0396 ED        1327            mov     a,r5
0397 22        1328            ret
0398           1329   ;------------------------------------------------------------
0398           1330   ;Allocation info for local variables in function 'writeOutputBuffer'
0398           1331   ;------------------------------------------------------------
0398           1332   ;cap                       Allocated with name '_writeOutputBuffer_PARM_2'
0398           1333   ;buffer                    Allocated to registers r2 r3 r4 
0398           1334   ;suffix                    Allocated to registers r5 
0398           1335   ;------------------------------------------------------------
0398           1336   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:305: void writeOutputBuffer(char *buffer, double cap){
0398           1337   ;        -----------------------------------------
0398           1338   ;         function writeOutputBuffer
0398           1339   ;        -----------------------------------------
0398           1340   _writeOutputBuffer:
0398 AA82      1341            mov     r2,dpl
039A AB83      1342            mov     r3,dph
039C ACF0      1343            mov     r4,b
039E           1344   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:306: char suffix = 'n';
039E 7D6E      1345            mov     r5,#0x6E
03A0           1346   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:307: if(cap < 1.5)
03A0 C002      1347            push    ar2
03A2 C003      1348            push    ar3
03A4 C004      1349            push    ar4
03A6 C005      1350            push    ar5
03A8 E4        1351            clr     a
03A9 C0E0      1352            push    acc
03AB C0E0      1353            push    acc
03AD 74C0      1354            mov     a,#0xC0
03AF C0E0      1355            push    acc
03B1 743F      1356            mov     a,#0x3F
03B3 C0E0      1357            push    acc
03B5 850082    1358            mov     dpl,_writeOutputBuffer_PARM_2
03B8 850183    1359            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
03BB 8502F0    1360            mov     b,(_writeOutputBuffer_PARM_2 + 2)
03BE E503      1361            mov     a,(_writeOutputBuffer_PARM_2 + 3)
03C0 120000    1362            lcall   ___fslt
03C3 AE82      1363            mov     r6,dpl
03C5 E581      1364            mov     a,sp
03C7 24FC      1365            add     a,#0xfc
03C9 F581      1366            mov     sp,a
03CB D005      1367            pop     ar5
03CD D004      1368            pop     ar4
03CF D003      1369            pop     ar3
03D1 D002      1370            pop     ar2
03D3 EE        1371            mov     a,r6
03D4 6000      1372            jz      L018002?
03D6           1373   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:309: sprintf(buffer, "Insert Capacitor");
03D6 74F0      1374            mov     a,#__str_0
03D8 C0E0      1375            push    acc
03DA 74BD      1376            mov     a,#(__str_0 >> 8)
03DC C0E0      1377            push    acc
03DE 7480      1378            mov     a,#0x80
03E0 C0E0      1379            push    acc
03E2 C002      1380            push    ar2
03E4 C003      1381            push    ar3
03E6 C004      1382            push    ar4
03E8 120000    1383            lcall   _sprintf
03EB E581      1384            mov     a,sp
03ED 24FA      1385            add     a,#0xfa
03EF F581      1386            mov     sp,a
03F1           1387   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:310: return;
03F1 22        1388            ret
03F2           1389   L018002?:
03F2           1390   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:312: if(cap > 100.0)
03F2 C002      1391            push    ar2
03F4 C003      1392            push    ar3
03F6 C004      1393            push    ar4
03F8 C005      1394            push    ar5
03FA E4        1395            clr     a
03FB C0E0      1396            push    acc
03FD C0E0      1397            push    acc
03FF 74C8      1398            mov     a,#0xC8
0401 C0E0      1399            push    acc
0403 7442      1400            mov     a,#0x42
0405 C0E0      1401            push    acc
0407 850082    1402            mov     dpl,_writeOutputBuffer_PARM_2
040A 850183    1403            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
040D 8502F0    1404            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0410 E503      1405            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0412 120000    1406            lcall   ___fsgt
0415 AE82      1407            mov     r6,dpl
0417 E581      1408            mov     a,sp
0419 24FC      1409            add     a,#0xfc
041B F581      1410            mov     sp,a
041D D005      1411            pop     ar5
041F D004      1412            pop     ar4
0421 D003      1413            pop     ar3
0423 D002      1414            pop     ar2
0425 EE        1415            mov     a,r6
0426 6000      1416            jz      L018004?
0428           1417   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:314: suffix = 'u';
0428 7D75      1418            mov     r5,#0x75
042A           1419   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:315: cap = cap/1000.0;
042A C002      1420            push    ar2
042C C003      1421            push    ar3
042E C004      1422            push    ar4
0430 C005      1423            push    ar5
0432 E4        1424            clr     a
0433 C0E0      1425            push    acc
0435 C0E0      1426            push    acc
0437 747A      1427            mov     a,#0x7A
0439 C0E0      1428            push    acc
043B 7444      1429            mov     a,#0x44
043D C0E0      1430            push    acc
043F 850082    1431            mov     dpl,_writeOutputBuffer_PARM_2
0442 850183    1432            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0445 8502F0    1433            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0448 E503      1434            mov     a,(_writeOutputBuffer_PARM_2 + 3)
044A 120000    1435            lcall   ___fsdiv
044D 858200    1436            mov     _writeOutputBuffer_PARM_2,dpl
0450 858301    1437            mov     (_writeOutputBuffer_PARM_2 + 1),dph
0453 85F002    1438            mov     (_writeOutputBuffer_PARM_2 + 2),b
0456 F503      1439            mov     (_writeOutputBuffer_PARM_2 + 3),a
0458 E581      1440            mov     a,sp
045A 24FC      1441            add     a,#0xfc
045C F581      1442            mov     sp,a
045E D005      1443            pop     ar5
0460 D004      1444            pop     ar4
0462 D003      1445            pop     ar3
0464 D002      1446            pop     ar2
0466           1447   L018004?:
0466           1448   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:317: if(cap > 100.0)
0466 C002      1449            push    ar2
0468 C003      1450            push    ar3
046A C004      1451            push    ar4
046C C005      1452            push    ar5
046E E4        1453            clr     a
046F C0E0      1454            push    acc
0471 C0E0      1455            push    acc
0473 74C8      1456            mov     a,#0xC8
0475 C0E0      1457            push    acc
0477 7442      1458            mov     a,#0x42
0479 C0E0      1459            push    acc
047B 850082    1460            mov     dpl,_writeOutputBuffer_PARM_2
047E 850183    1461            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0481 8502F0    1462            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0484 E503      1463            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0486 120000    1464            lcall   ___fsgt
0489 AE82      1465            mov     r6,dpl
048B E581      1466            mov     a,sp
048D 24FC      1467            add     a,#0xfc
048F F581      1468            mov     sp,a
0491 D005      1469            pop     ar5
0493 D004      1470            pop     ar4
0495 D003      1471            pop     ar3
0497 D002      1472            pop     ar2
0499 EE        1473            mov     a,r6
049A 6000      1474            jz      L018006?
049C           1475   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:319: suffix = 'm';
049C 7D6D      1476            mov     r5,#0x6D
049E           1477   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:320: cap = cap/1000.0;
049E C002      1478            push    ar2
04A0 C003      1479            push    ar3
04A2 C004      1480            push    ar4
04A4 C005      1481            push    ar5
04A6 E4        1482            clr     a
04A7 C0E0      1483            push    acc
04A9 C0E0      1484            push    acc
04AB 747A      1485            mov     a,#0x7A
04AD C0E0      1486            push    acc
04AF 7444      1487            mov     a,#0x44
04B1 C0E0      1488            push    acc
04B3 850082    1489            mov     dpl,_writeOutputBuffer_PARM_2
04B6 850183    1490            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
04B9 8502F0    1491            mov     b,(_writeOutputBuffer_PARM_2 + 2)
04BC E503      1492            mov     a,(_writeOutputBuffer_PARM_2 + 3)
04BE 120000    1493            lcall   ___fsdiv
04C1 858200    1494            mov     _writeOutputBuffer_PARM_2,dpl
04C4 858301    1495            mov     (_writeOutputBuffer_PARM_2 + 1),dph
04C7 85F002    1496            mov     (_writeOutputBuffer_PARM_2 + 2),b
04CA F503      1497            mov     (_writeOutputBuffer_PARM_2 + 3),a
04CC E581      1498            mov     a,sp
04CE 24FC      1499            add     a,#0xfc
04D0 F581      1500            mov     sp,a
04D2 D005      1501            pop     ar5
04D4 D004      1502            pop     ar4
04D6 D003      1503            pop     ar3
04D8 D002      1504            pop     ar2
04DA           1505   L018006?:
04DA           1506   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:322: if(cap > 100.0)
04DA C002      1507            push    ar2
04DC C003      1508            push    ar3
04DE C004      1509            push    ar4
04E0 C005      1510            push    ar5
04E2 E4        1511            clr     a
04E3 C0E0      1512            push    acc
04E5 C0E0      1513            push    acc
04E7 74C8      1514            mov     a,#0xC8
04E9 C0E0      1515            push    acc
04EB 7442      1516            mov     a,#0x42
04ED C0E0      1517            push    acc
04EF 850082    1518            mov     dpl,_writeOutputBuffer_PARM_2
04F2 850183    1519            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
04F5 8502F0    1520            mov     b,(_writeOutputBuffer_PARM_2 + 2)
04F8 E503      1521            mov     a,(_writeOutputBuffer_PARM_2 + 3)
04FA 120000    1522            lcall   ___fsgt
04FD AE82      1523            mov     r6,dpl
04FF E581      1524            mov     a,sp
0501 24FC      1525            add     a,#0xfc
0503 F581      1526            mov     sp,a
0505 D005      1527            pop     ar5
0507 D004      1528            pop     ar4
0509 D003      1529            pop     ar3
050B D002      1530            pop     ar2
050D EE        1531            mov     a,r6
050E 6000      1532            jz      L018008?
0510           1533   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:324: suffix = ' ';
0510 7D20      1534            mov     r5,#0x20
0512           1535   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:325: cap = cap/1000.0;
0512 C002      1536            push    ar2
0514 C003      1537            push    ar3
0516 C004      1538            push    ar4
0518 C005      1539            push    ar5
051A E4        1540            clr     a
051B C0E0      1541            push    acc
051D C0E0      1542            push    acc
051F 747A      1543            mov     a,#0x7A
0521 C0E0      1544            push    acc
0523 7444      1545            mov     a,#0x44
0525 C0E0      1546            push    acc
0527 850082    1547            mov     dpl,_writeOutputBuffer_PARM_2
052A 850183    1548            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
052D 8502F0    1549            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0530 E503      1550            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0532 120000    1551            lcall   ___fsdiv
0535 858200    1552            mov     _writeOutputBuffer_PARM_2,dpl
0538 858301    1553            mov     (_writeOutputBuffer_PARM_2 + 1),dph
053B 85F002    1554            mov     (_writeOutputBuffer_PARM_2 + 2),b
053E F503      1555            mov     (_writeOutputBuffer_PARM_2 + 3),a
0540 E581      1556            mov     a,sp
0542 24FC      1557            add     a,#0xfc
0544 F581      1558            mov     sp,a
0546 D005      1559            pop     ar5
0548 D004      1560            pop     ar4
054A D003      1561            pop     ar3
054C D002      1562            pop     ar2
054E           1563   L018008?:
054E           1564   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:327: sprintf(buffer, "C = %.4f%cF", cap, suffix);
054E ED        1565            mov     a,r5
054F 33        1566            rlc     a
0550 95E0      1567            subb    a,acc
0552 FE        1568            mov     r6,a
0553 C005      1569            push    ar5
0555 C006      1570            push    ar6
0557 C000      1571            push    _writeOutputBuffer_PARM_2
0559 C001      1572            push    (_writeOutputBuffer_PARM_2 + 1)
055B C002      1573            push    (_writeOutputBuffer_PARM_2 + 2)
055D C003      1574            push    (_writeOutputBuffer_PARM_2 + 3)
055F 7470      1575            mov     a,#__str_1
0561 C0E0      1576            push    acc
0563 74BF      1577            mov     a,#(__str_1 >> 8)
0565 C0E0      1578            push    acc
0567 7480      1579            mov     a,#0x80
0569 C0E0      1580            push    acc
056B C002      1581            push    ar2
056D C003      1582            push    ar3
056F C004      1583            push    ar4
0571 120000    1584            lcall   _sprintf
0574 E581      1585            mov     a,sp
0576 24F4      1586            add     a,#0xf4
0578 F581      1587            mov     sp,a
057A 22        1588            ret
057B           1589   ;------------------------------------------------------------
057B           1590   ;Allocation info for local variables in function 'main'
057B           1591   ;------------------------------------------------------------
057B           1592   ;v                         Allocated with name '_main_v_1_86'
057B           1593   ;S1VMax                    Allocated to registers 
057B           1594   ;S2VMax                    Allocated to registers 
057B           1595   ;period                    Allocated to registers r2 r3 r4 r5 
057B           1596   ;time                      Allocated to registers 
057B           1597   ;------------------------------------------------------------
057B           1598   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:330: void main (void)
057B           1599   ;        -----------------------------------------
057B           1600   ;         function main
057B           1601   ;        -----------------------------------------
057B           1602   _main:
057B           1603   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:338: waitms(500); // Give PuTTy a chance to start before sending
057B 9001F4    1604            mov     dptr,#0x01F4
057E 120000    1605            lcall   _waitms
0581           1606   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:339: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0581 74B0      1607            mov     a,#__str_2
0583 C0E0      1608            push    acc
0585 74BF      1609            mov     a,#(__str_2 >> 8)
0587 C0E0      1610            push    acc
0589 7480      1611            mov     a,#0x80
058B C0E0      1612            push    acc
058D 120000    1613            lcall   _printf
0590 1581      1614            dec     sp
0592 1581      1615            dec     sp
0594 1581      1616            dec     sp
0596           1617   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:344: __FILE__, __DATE__, __TIME__);
0596           1618   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:343: "Compiled: %s, %s\n\n",
0596 7430      1619            mov     a,#__str_6
0598 C0E0      1620            push    acc
059A 74C0      1621            mov     a,#(__str_6 >> 8)
059C C0E0      1622            push    acc
059E 7480      1623            mov     a,#0x80
05A0 C0E0      1624            push    acc
05A2 7470      1625            mov     a,#__str_5
05A4 C0E0      1626            push    acc
05A6 74C0      1627            mov     a,#(__str_5 >> 8)
05A8 C0E0      1628            push    acc
05AA 7480      1629            mov     a,#0x80
05AC C0E0      1630            push    acc
05AE 74B0      1631            mov     a,#__str_4
05B0 C0E0      1632            push    acc
05B2 74C0      1633            mov     a,#(__str_4 >> 8)
05B4 C0E0      1634            push    acc
05B6 7480      1635            mov     a,#0x80
05B8 C0E0      1636            push    acc
05BA 74F0      1637            mov     a,#__str_3
05BC C0E0      1638            push    acc
05BE 74C0      1639            mov     a,#(__str_3 >> 8)
05C0 C0E0      1640            push    acc
05C2 7480      1641            mov     a,#0x80
05C4 C0E0      1642            push    acc
05C6 120000    1643            lcall   _printf
05C9 E581      1644            mov     a,sp
05CB 24F4      1645            add     a,#0xf4
05CD F581      1646            mov     sp,a
05CF           1647   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:347: InitADC();
05CF 120000    1648            lcall   _InitADC
05D2           1649   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:349: while(1)
05D2           1650   L019018?:
05D2           1651   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:358: TL0=0; 
05D2 758A00    1652            mov     _TL0,#0x00
05D5           1653   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:359: TH0=0;
05D5 758C00    1654            mov     _TH0,#0x00
05D8           1655   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:360: TF0=0;
05D8 C28D      1656            clr     _TF0
05DA           1657   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:361: overflow_count=0;
05DA 75D000    1658            mov     _overflow_count,#0x00
05DD           1659   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:363: while(P0_1!=0); // Wait for the signal to be zero
05DD           1660   L019001?:
05DD 208170    1661            jb      _P0_1,L019001?
05E0           1662   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:364: while(P0_1!=1); // Wait for the signal to be one
05E0           1663   L019004?:
05E0 3081B0    1664            jnb     _P0_1,L019004?
05E3           1665   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:365: TR0=1; // Start the timer
05E3 D28C      1666            setb    _TR0
05E5           1667   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:366: while(P0_1!=0) // Wait for the signal to be zero
05E5           1668   L019009?:
05E5 308130    1669            jnb     _P0_1,L019014?
05E8           1670   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:368: if(TF0==1) // Did the 16-bit timer overflow?
05E8           1671   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:370: TF0=0;
05E8 108D70    1672            jbc     _TF0,L019035?
05EB 8000      1673            sjmp    L019009?
05ED           1674   L019035?:
05ED           1675   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:371: overflow_count++;
05ED 05D0      1676            inc     _overflow_count
05EF           1677   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:374: while(P0_1!=1) // Wait for the signal to be one
05EF 8000      1678            sjmp    L019009?
05F1           1679   L019014?:
05F1 2081B0    1680            jb      _P0_1,L019016?
05F4           1681   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:376: if(TF0==1) // Did the 16-bit timer overflow?
05F4           1682   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:378: TF0=0;
05F4 108DF0    1683            jbc     _TF0,L019037?
05F7 8000      1684            sjmp    L019014?
05F9           1685   L019037?:
05F9           1686   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:379: overflow_count++;
05F9 05D0      1687            inc     _overflow_count
05FB 8000      1688            sjmp    L019014?
05FD           1689   L019016?:
05FD           1690   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:382: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
05FD C28C      1691            clr     _TR0
05FF           1692   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:384: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*(0.1248);
05FF 85D082    1693            mov     dpl,_overflow_count
0602 120000    1694            lcall   ___uchar2fs
0605 AA82      1695            mov     r2,dpl
0607 AB83      1696            mov     r3,dph
0609 ACF0      1697            mov     r4,b
060B FD        1698            mov     r5,a
060C C002      1699            push    ar2
060E C003      1700            push    ar3
0610 C004      1701            push    ar4
0612 C005      1702            push    ar5
0614 900000    1703            mov     dptr,#0x0000
0617 75F080    1704            mov     b,#0x80
061A 7447      1705            mov     a,#0x47
061C 120000    1706            lcall   ___fsmul
061F AA82      1707            mov     r2,dpl
0621 AB83      1708            mov     r3,dph
0623 ACF0      1709            mov     r4,b
0625 FD        1710            mov     r5,a
0626 E581      1711            mov     a,sp
0628 24FC      1712            add     a,#0xfc
062A F581      1713            mov     sp,a
062C 858C82    1714            mov     dpl,_TH0
062F C002      1715            push    ar2
0631 C003      1716            push    ar3
0633 C004      1717            push    ar4
0635 C005      1718            push    ar5
0637 120000    1719            lcall   ___uchar2fs
063A AE82      1720            mov     r6,dpl
063C AF83      1721            mov     r7,dph
063E A8F0      1722            mov     r0,b
0640 F9        1723            mov     r1,a
0641 C006      1724            push    ar6
0643 C007      1725            push    ar7
0645 C000      1726            push    ar0
0647 C001      1727            push    ar1
0649 900000    1728            mov     dptr,#0x0000
064C 75F080    1729            mov     b,#0x80
064F 7443      1730            mov     a,#0x43
0651 120000    1731            lcall   ___fsmul
0654 AE82      1732            mov     r6,dpl
0656 AF83      1733            mov     r7,dph
0658 A8F0      1734            mov     r0,b
065A F9        1735            mov     r1,a
065B E581      1736            mov     a,sp
065D 24FC      1737            add     a,#0xfc
065F F581      1738            mov     sp,a
0661 D005      1739            pop     ar5
0663 D004      1740            pop     ar4
0665 D003      1741            pop     ar3
0667 D002      1742            pop     ar2
0669 C006      1743            push    ar6
066B C007      1744            push    ar7
066D C000      1745            push    ar0
066F C001      1746            push    ar1
0671 8A82      1747            mov     dpl,r2
0673 8B83      1748            mov     dph,r3
0675 8CF0      1749            mov     b,r4
0677 ED        1750            mov     a,r5
0678 120000    1751            lcall   ___fsadd
067B AA82      1752            mov     r2,dpl
067D AB83      1753            mov     r3,dph
067F ACF0      1754            mov     r4,b
0681 FD        1755            mov     r5,a
0682 E581      1756            mov     a,sp
0684 24FC      1757            add     a,#0xfc
0686 F581      1758            mov     sp,a
0688 AE8A      1759            mov     r6,_TL0
068A 7F00      1760            mov     r7,#0x00
068C 8E82      1761            mov     dpl,r6
068E 8F83      1762            mov     dph,r7
0690 C002      1763            push    ar2
0692 C003      1764            push    ar3
0694 C004      1765            push    ar4
0696 C005      1766            push    ar5
0698 120000    1767            lcall   ___sint2fs
069B AE82      1768            mov     r6,dpl
069D AF83      1769            mov     r7,dph
069F A8F0      1770            mov     r0,b
06A1 F9        1771            mov     r1,a
06A2 D005      1772            pop     ar5
06A4 D004      1773            pop     ar4
06A6 D003      1774            pop     ar3
06A8 D002      1775            pop     ar2
06AA C006      1776            push    ar6
06AC C007      1777            push    ar7
06AE C000      1778            push    ar0
06B0 C001      1779            push    ar1
06B2 8A82      1780            mov     dpl,r2
06B4 8B83      1781            mov     dph,r3
06B6 8CF0      1782            mov     b,r4
06B8 ED        1783            mov     a,r5
06B9 120000    1784            lcall   ___fsadd
06BC AA82      1785            mov     r2,dpl
06BE AB83      1786            mov     r3,dph
06C0 ACF0      1787            mov     r4,b
06C2 FD        1788            mov     r5,a
06C3 E581      1789            mov     a,sp
06C5 24FC      1790            add     a,#0xfc
06C7 F581      1791            mov     sp,a
06C9 C002      1792            push    ar2
06CB C003      1793            push    ar3
06CD C004      1794            push    ar4
06CF C005      1795            push    ar5
06D1 90ABAF    1796            mov     dptr,#0xABAF
06D4 75F0B2    1797            mov     b,#0xB2
06D7 7432      1798            mov     a,#0x32
06D9 120000    1799            lcall   ___fsmul
06DC AA82      1800            mov     r2,dpl
06DE AB83      1801            mov     r3,dph
06E0 ACF0      1802            mov     r4,b
06E2 FD        1803            mov     r5,a
06E3 E581      1804            mov     a,sp
06E5 24FC      1805            add     a,#0xfc
06E7 F581      1806            mov     sp,a
06E9           1807   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:385: printf("%lf\n", period);
06E9 C002      1808            push    ar2
06EB C003      1809            push    ar3
06ED C004      1810            push    ar4
06EF C005      1811            push    ar5
06F1 74F0      1812            mov     a,#__str_7
06F3 C0E0      1813            push    acc
06F5 74C3      1814            mov     a,#(__str_7 >> 8)
06F7 C0E0      1815            push    acc
06F9 7480      1816            mov     a,#0x80
06FB C0E0      1817            push    acc
06FD 120000    1818            lcall   _printf
0700 E581      1819            mov     a,sp
0702 24F9      1820            add     a,#0xf9
0704 F581      1821            mov     sp,a
0706 020000    1822            ljmp    L019018?
0709           1823            rseg R_CSEG
0709           1824   
0000           1825            rseg R_XINIT
0000           1826   
0000           1827            rseg R_CONST
0000           1828   __str_0:
0000 496E7365  1829            db 'Insert Capacitor'
     72742043
     61706163
     69746F72
0010 00        1830            db 0x00
0011           1831   __str_1:
0011 43203D20  1832            db 'C = %.4f%cF'
     252E3466
     256346
001C 00        1833            db 0x00
001D           1834   __str_2:
001D 1B        1835            db 0x1B
001E 5B324A    1836            db '[2J'
0021 00        1837            db 0x00
0022           1838   __str_3:
0022 41444320  1839            db 'ADC test program'
     74657374
     2070726F
     6772616D
0032 0A        1840            db 0x0A
0033 46696C65  1841            db 'File: %s'
     3A202573
003B 0A        1842            db 0x0A
003C 436F6D70  1843            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
004C 0A        1844            db 0x0A
004D 0A        1845            db 0x0A
004E 00        1846            db 0x00
004F           1847   __str_4:
004F 433A      1848            db 'C:'
0051 5C        1849            db 0x5C
0052 55736572  1850            db 'Users'
     73
0057 5C        1851            db 0x5C
0058 6B636772  1852            db 'kcgro'
     6F
005D 5C        1853            db 0x5C
005E 446F6375  1854            db 'Documents'
     6D656E74
     73
0067 5C        1855            db 0x5C
0068 47697448  1856            db 'GitHub'
     7562
006E 5C        1857            db 0x5C
006F 454C4543  1858            db 'ELEC291'
     323931
0076 5C        1859            db 0x5C
0077 4C414235  1860            db 'LAB5-Phasor Analysis'
     2D506861
     736F7220
     416E616C
     79736973
008B 5C        1861            db 0x5C
008C 45464D38  1862            db 'EFM8_ADC.c'
     5F414443
     2E63
0096 00        1863            db 0x00
0097           1864   __str_5:
0097 4D617220  1865            db 'Mar  7 2023'
     20372032
     303233
00A2 00        1866            db 0x00
00A3           1867   __str_6:
00A3 32323A30  1868            db '22:04:05'
     343A3035
00AB 00        1869            db 0x00
00AC           1870   __str_7:
00AC 256C66    1871            db '%lf'
00AF 0A        1872            db 0x0A
00B0 00        1873            db 0x00
00B1           1874   
0003           1875            CSEG
0003           1876   
0003           1877   end

0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 07 22:08:24 2023
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _writeOutputBuffer
0000             30            public _PtoC
0000             31            public _TIMER0_Init
0000             32            public _getsn
0000             33            public _LCDprint
0000             34            public _LCD_4BIT
0000             35            public _WriteCommand
0000             36            public _WriteData
0000             37            public _LCD_byte
0000             38            public _LCD_pulse
0000             39            public _Volts_at_Pin
0000             40            public _ADC_at_Pin
0000             41            public _InitPinADC
0000             42            public _waitms
0000             43            public _Timer3us
0000             44            public _InitADC
0000             45            public __c51_external_startup
0000             46            public _LCDprint_PARM_3
0000             47            public _writeOutputBuffer_PARM_2
0000             48            public _getsn_PARM_2
0000             49            public _LCDprint_PARM_2
0000             50            public _overflow_count
0000             51            public _getHalfPeriod
0000             52   ;--------------------------------------------------------
0000             53   ; Special Function Registers
0000             54   ;--------------------------------------------------------
0000             55   _ACC            DATA 0xe0
0000             56   _ADC0ASAH       DATA 0xb6
0000             57   _ADC0ASAL       DATA 0xb5
0000             58   _ADC0ASCF       DATA 0xa1
0000             59   _ADC0ASCT       DATA 0xc7
0000             60   _ADC0CF0        DATA 0xbc
0000             61   _ADC0CF1        DATA 0xb9
0000             62   _ADC0CF2        DATA 0xdf
0000             63   _ADC0CN0        DATA 0xe8
0000             64   _ADC0CN1        DATA 0xb2
0000             65   _ADC0CN2        DATA 0xb3
0000             66   _ADC0GTH        DATA 0xc4
0000             67   _ADC0GTL        DATA 0xc3
0000             68   _ADC0H          DATA 0xbe
0000             69   _ADC0L          DATA 0xbd
0000             70   _ADC0LTH        DATA 0xc6
0000             71   _ADC0LTL        DATA 0xc5
0000             72   _ADC0MX         DATA 0xbb
0000             73   _B              DATA 0xf0
0000             74   _CKCON0         DATA 0x8e
0000             75   _CKCON1         DATA 0xa6
0000             76   _CLEN0          DATA 0xc6
0000             77   _CLIE0          DATA 0xc7
0000             78   _CLIF0          DATA 0xe8
0000             79   _CLKSEL         DATA 0xa9
0000             80   _CLOUT0         DATA 0xd1
0000             81   _CLU0CF         DATA 0xb1
0000             82   _CLU0FN         DATA 0xaf
0000             83   _CLU0MX         DATA 0x84
0000             84   _CLU1CF         DATA 0xb3
0000             85   _CLU1FN         DATA 0xb2
0000             86   _CLU1MX         DATA 0x85
0000             87   _CLU2CF         DATA 0xb6
0000             88   _CLU2FN         DATA 0xb5
0000             89   _CLU2MX         DATA 0x91
0000             90   _CLU3CF         DATA 0xbf
0000             91   _CLU3FN         DATA 0xbe
0000             92   _CLU3MX         DATA 0xae
0000             93   _CMP0CN0        DATA 0x9b
0000             94   _CMP0CN1        DATA 0x99
0000             95   _CMP0MD         DATA 0x9d
0000             96   _CMP0MX         DATA 0x9f
0000             97   _CMP1CN0        DATA 0xbf
0000             98   _CMP1CN1        DATA 0xac
0000             99   _CMP1MD         DATA 0xab
0000            100   _CMP1MX         DATA 0xaa
0000            101   _CRC0CN0        DATA 0xce
0000            102   _CRC0CN1        DATA 0x86
0000            103   _CRC0CNT        DATA 0xd3
0000            104   _CRC0DAT        DATA 0xcb
0000            105   _CRC0FLIP       DATA 0xcf
0000            106   _CRC0IN         DATA 0xca
0000            107   _CRC0ST         DATA 0xd2
0000            108   _DAC0CF0        DATA 0x91
0000            109   _DAC0CF1        DATA 0x92
0000            110   _DAC0H          DATA 0x85
0000            111   _DAC0L          DATA 0x84
0000            112   _DAC1CF0        DATA 0x93
0000            113   _DAC1CF1        DATA 0x94
0000            114   _DAC1H          DATA 0x8a
0000            115   _DAC1L          DATA 0x89
0000            116   _DAC2CF0        DATA 0x95
0000            117   _DAC2CF1        DATA 0x96
0000            118   _DAC2H          DATA 0x8c
0000            119   _DAC2L          DATA 0x8b
0000            120   _DAC3CF0        DATA 0x9a
0000            121   _DAC3CF1        DATA 0x9c
0000            122   _DAC3H          DATA 0x8e
0000            123   _DAC3L          DATA 0x8d
0000            124   _DACGCF0        DATA 0x88
0000            125   _DACGCF1        DATA 0x98
0000            126   _DACGCF2        DATA 0xa2
0000            127   _DERIVID        DATA 0xad
0000            128   _DEVICEID       DATA 0xb5
0000            129   _DPH            DATA 0x83
0000            130   _DPL            DATA 0x82
0000            131   _EIE1           DATA 0xe6
0000            132   _EIE2           DATA 0xf3
0000            133   _EIP1           DATA 0xbb
0000            134   _EIP1H          DATA 0xee
0000            135   _EIP2           DATA 0xed
0000            136   _EIP2H          DATA 0xf6
0000            137   _EMI0CN         DATA 0xe7
0000            138   _FLKEY          DATA 0xb7
0000            139   _HFO0CAL        DATA 0xc7
0000            140   _HFO1CAL        DATA 0xd6
0000            141   _HFOCN          DATA 0xef
0000            142   _I2C0ADM        DATA 0xff
0000            143   _I2C0CN0        DATA 0xba
0000            144   _I2C0DIN        DATA 0xbc
0000            145   _I2C0DOUT       DATA 0xbb
0000            146   _I2C0FCN0       DATA 0xad
0000            147   _I2C0FCN1       DATA 0xab
0000            148   _I2C0FCT        DATA 0xf5
0000            149   _I2C0SLAD       DATA 0xbd
0000            150   _I2C0STAT       DATA 0xb9
0000            151   _IE             DATA 0xa8
0000            152   _IP             DATA 0xb8
0000            153   _IPH            DATA 0xf2
0000            154   _IT01CF         DATA 0xe4
0000            155   _LFO0CN         DATA 0xb1
0000            156   _P0             DATA 0x80
0000            157   _P0MASK         DATA 0xfe
0000            158   _P0MAT          DATA 0xfd
0000            159   _P0MDIN         DATA 0xf1
0000            160   _P0MDOUT        DATA 0xa4
0000            161   _P0SKIP         DATA 0xd4
0000            162   _P1             DATA 0x90
0000            163   _P1MASK         DATA 0xee
0000            164   _P1MAT          DATA 0xed
0000            165   _P1MDIN         DATA 0xf2
0000            166   _P1MDOUT        DATA 0xa5
0000            167   _P1SKIP         DATA 0xd5
0000            168   _P2             DATA 0xa0
0000            169   _P2MASK         DATA 0xfc
0000            170   _P2MAT          DATA 0xfb
0000            171   _P2MDIN         DATA 0xf3
0000            172   _P2MDOUT        DATA 0xa6
0000            173   _P2SKIP         DATA 0xcc
0000            174   _P3             DATA 0xb0
0000            175   _P3MDIN         DATA 0xf4
0000            176   _P3MDOUT        DATA 0x9c
0000            177   _PCA0CENT       DATA 0x9e
0000            178   _PCA0CLR        DATA 0x9c
0000            179   _PCA0CN0        DATA 0xd8
0000            180   _PCA0CPH0       DATA 0xfc
0000            181   _PCA0CPH1       DATA 0xea
0000            182   _PCA0CPH2       DATA 0xec
0000            183   _PCA0CPH3       DATA 0xf5
0000            184   _PCA0CPH4       DATA 0x85
0000            185   _PCA0CPH5       DATA 0xde
0000            186   _PCA0CPL0       DATA 0xfb
0000            187   _PCA0CPL1       DATA 0xe9
0000            188   _PCA0CPL2       DATA 0xeb
0000            189   _PCA0CPL3       DATA 0xf4
0000            190   _PCA0CPL4       DATA 0x84
0000            191   _PCA0CPL5       DATA 0xdd
0000            192   _PCA0CPM0       DATA 0xda
0000            193   _PCA0CPM1       DATA 0xdb
0000            194   _PCA0CPM2       DATA 0xdc
0000            195   _PCA0CPM3       DATA 0xae
0000            196   _PCA0CPM4       DATA 0xaf
0000            197   _PCA0CPM5       DATA 0xcc
0000            198   _PCA0H          DATA 0xfa
0000            199   _PCA0L          DATA 0xf9
0000            200   _PCA0MD         DATA 0xd9
0000            201   _PCA0POL        DATA 0x96
0000            202   _PCA0PWM        DATA 0xf7
0000            203   _PCON0          DATA 0x87
0000            204   _PCON1          DATA 0xcd
0000            205   _PFE0CN         DATA 0xc1
0000            206   _PRTDRV         DATA 0xf6
0000            207   _PSCTL          DATA 0x8f
0000            208   _PSTAT0         DATA 0xaa
0000            209   _PSW            DATA 0xd0
0000            210   _REF0CN         DATA 0xd1
0000            211   _REG0CN         DATA 0xc9
0000            212   _REVID          DATA 0xb6
0000            213   _RSTSRC         DATA 0xef
0000            214   _SBCON1         DATA 0x94
0000            215   _SBRLH1         DATA 0x96
0000            216   _SBRLL1         DATA 0x95
0000            217   _SBUF           DATA 0x99
0000            218   _SBUF0          DATA 0x99
0000            219   _SBUF1          DATA 0x92
0000            220   _SCON           DATA 0x98
0000            221   _SCON0          DATA 0x98
0000            222   _SCON1          DATA 0xc8
0000            223   _SFRPAGE        DATA 0xa7
0000            224   _SFRPGCN        DATA 0xbc
0000            225   _SFRSTACK       DATA 0xd7
0000            226   _SMB0ADM        DATA 0xd6
0000            227   _SMB0ADR        DATA 0xd7
0000            228   _SMB0CF         DATA 0xc1
0000            229   _SMB0CN0        DATA 0xc0
0000            230   _SMB0DAT        DATA 0xc2
0000            231   _SMB0FCN0       DATA 0xc3
0000            232   _SMB0FCN1       DATA 0xc4
0000            233   _SMB0FCT        DATA 0xef
0000            234   _SMB0RXLN       DATA 0xc5
0000            235   _SMB0TC         DATA 0xac
0000            236   _SMOD1          DATA 0x93
0000            237   _SP             DATA 0x81
0000            238   _SPI0CFG        DATA 0xa1
0000            239   _SPI0CKR        DATA 0xa2
0000            240   _SPI0CN0        DATA 0xf8
0000            241   _SPI0DAT        DATA 0xa3
0000            242   _SPI0FCN0       DATA 0x9a
0000            243   _SPI0FCN1       DATA 0x9b
0000            244   _SPI0FCT        DATA 0xf7
0000            245   _SPI0PCF        DATA 0xdf
0000            246   _TCON           DATA 0x88
0000            247   _TH0            DATA 0x8c
0000            248   _TH1            DATA 0x8d
0000            249   _TL0            DATA 0x8a
0000            250   _TL1            DATA 0x8b
0000            251   _TMOD           DATA 0x89
0000            252   _TMR2CN0        DATA 0xc8
0000            253   _TMR2CN1        DATA 0xfd
0000            254   _TMR2H          DATA 0xcf
0000            255   _TMR2L          DATA 0xce
0000            256   _TMR2RLH        DATA 0xcb
0000            257   _TMR2RLL        DATA 0xca
0000            258   _TMR3CN0        DATA 0x91
0000            259   _TMR3CN1        DATA 0xfe
0000            260   _TMR3H          DATA 0x95
0000            261   _TMR3L          DATA 0x94
0000            262   _TMR3RLH        DATA 0x93
0000            263   _TMR3RLL        DATA 0x92
0000            264   _TMR4CN0        DATA 0x98
0000            265   _TMR4CN1        DATA 0xff
0000            266   _TMR4H          DATA 0xa5
0000            267   _TMR4L          DATA 0xa4
0000            268   _TMR4RLH        DATA 0xa3
0000            269   _TMR4RLL        DATA 0xa2
0000            270   _TMR5CN0        DATA 0xc0
0000            271   _TMR5CN1        DATA 0xf1
0000            272   _TMR5H          DATA 0xd5
0000            273   _TMR5L          DATA 0xd4
0000            274   _TMR5RLH        DATA 0xd3
0000            275   _TMR5RLL        DATA 0xd2
0000            276   _UART0PCF       DATA 0xd9
0000            277   _UART1FCN0      DATA 0x9d
0000            278   _UART1FCN1      DATA 0xd8
0000            279   _UART1FCT       DATA 0xfa
0000            280   _UART1LIN       DATA 0x9e
0000            281   _UART1PCF       DATA 0xda
0000            282   _VDM0CN         DATA 0xff
0000            283   _WDTCN          DATA 0x97
0000            284   _XBR0           DATA 0xe1
0000            285   _XBR1           DATA 0xe2
0000            286   _XBR2           DATA 0xe3
0000            287   _XOSC0CN        DATA 0x86
0000            288   _DPTR           DATA 0x8382
0000            289   _TMR2RL         DATA 0xcbca
0000            290   _TMR3RL         DATA 0x9392
0000            291   _TMR4RL         DATA 0xa3a2
0000            292   _TMR5RL         DATA 0xd3d2
0000            293   _TMR0           DATA 0x8c8a
0000            294   _TMR1           DATA 0x8d8b
0000            295   _TMR2           DATA 0xcfce
0000            296   _TMR3           DATA 0x9594
0000            297   _TMR4           DATA 0xa5a4
0000            298   _TMR5           DATA 0xd5d4
0000            299   _SBRL1          DATA 0x9695
0000            300   _PCA0           DATA 0xfaf9
0000            301   _PCA0CP0        DATA 0xfcfb
0000            302   _PCA0CP1        DATA 0xeae9
0000            303   _PCA0CP2        DATA 0xeceb
0000            304   _PCA0CP3        DATA 0xf5f4
0000            305   _PCA0CP4        DATA 0x8584
0000            306   _PCA0CP5        DATA 0xdedd
0000            307   _ADC0ASA        DATA 0xb6b5
0000            308   _ADC0GT         DATA 0xc4c3
0000            309   _ADC0           DATA 0xbebd
0000            310   _ADC0LT         DATA 0xc6c5
0000            311   _DAC0           DATA 0x8584
0000            312   _DAC1           DATA 0x8a89
0000            313   _DAC2           DATA 0x8c8b
0000            314   _DAC3           DATA 0x8e8d
0000            315   ;--------------------------------------------------------
0000            316   ; special function bits
0000            317   ;--------------------------------------------------------
0000            318   _ACC_0          BIT 0xe0
0000            319   _ACC_1          BIT 0xe1
0000            320   _ACC_2          BIT 0xe2
0000            321   _ACC_3          BIT 0xe3
0000            322   _ACC_4          BIT 0xe4
0000            323   _ACC_5          BIT 0xe5
0000            324   _ACC_6          BIT 0xe6
0000            325   _ACC_7          BIT 0xe7
0000            326   _TEMPE          BIT 0xe8
0000            327   _ADGN0          BIT 0xe9
0000            328   _ADGN1          BIT 0xea
0000            329   _ADWINT         BIT 0xeb
0000            330   _ADBUSY         BIT 0xec
0000            331   _ADINT          BIT 0xed
0000            332   _IPOEN          BIT 0xee
0000            333   _ADEN           BIT 0xef
0000            334   _B_0            BIT 0xf0
0000            335   _B_1            BIT 0xf1
0000            336   _B_2            BIT 0xf2
0000            337   _B_3            BIT 0xf3
0000            338   _B_4            BIT 0xf4
0000            339   _B_5            BIT 0xf5
0000            340   _B_6            BIT 0xf6
0000            341   _B_7            BIT 0xf7
0000            342   _C0FIF          BIT 0xe8
0000            343   _C0RIF          BIT 0xe9
0000            344   _C1FIF          BIT 0xea
0000            345   _C1RIF          BIT 0xeb
0000            346   _C2FIF          BIT 0xec
0000            347   _C2RIF          BIT 0xed
0000            348   _C3FIF          BIT 0xee
0000            349   _C3RIF          BIT 0xef
0000            350   _D1SRC0         BIT 0x88
0000            351   _D1SRC1         BIT 0x89
0000            352   _D1AMEN         BIT 0x8a
0000            353   _D01REFSL       BIT 0x8b
0000            354   _D3SRC0         BIT 0x8c
0000            355   _D3SRC1         BIT 0x8d
0000            356   _D3AMEN         BIT 0x8e
0000            357   _D23REFSL       BIT 0x8f
0000            358   _D0UDIS         BIT 0x98
0000            359   _D1UDIS         BIT 0x99
0000            360   _D2UDIS         BIT 0x9a
0000            361   _D3UDIS         BIT 0x9b
0000            362   _EX0            BIT 0xa8
0000            363   _ET0            BIT 0xa9
0000            364   _EX1            BIT 0xaa
0000            365   _ET1            BIT 0xab
0000            366   _ES0            BIT 0xac
0000            367   _ET2            BIT 0xad
0000            368   _ESPI0          BIT 0xae
0000            369   _EA             BIT 0xaf
0000            370   _PX0            BIT 0xb8
0000            371   _PT0            BIT 0xb9
0000            372   _PX1            BIT 0xba
0000            373   _PT1            BIT 0xbb
0000            374   _PS0            BIT 0xbc
0000            375   _PT2            BIT 0xbd
0000            376   _PSPI0          BIT 0xbe
0000            377   _P0_0           BIT 0x80
0000            378   _P0_1           BIT 0x81
0000            379   _P0_2           BIT 0x82
0000            380   _P0_3           BIT 0x83
0000            381   _P0_4           BIT 0x84
0000            382   _P0_5           BIT 0x85
0000            383   _P0_6           BIT 0x86
0000            384   _P0_7           BIT 0x87
0000            385   _P1_0           BIT 0x90
0000            386   _P1_1           BIT 0x91
0000            387   _P1_2           BIT 0x92
0000            388   _P1_3           BIT 0x93
0000            389   _P1_4           BIT 0x94
0000            390   _P1_5           BIT 0x95
0000            391   _P1_6           BIT 0x96
0000            392   _P1_7           BIT 0x97
0000            393   _P2_0           BIT 0xa0
0000            394   _P2_1           BIT 0xa1
0000            395   _P2_2           BIT 0xa2
0000            396   _P2_3           BIT 0xa3
0000            397   _P2_4           BIT 0xa4
0000            398   _P2_5           BIT 0xa5
0000            399   _P2_6           BIT 0xa6
0000            400   _P3_0           BIT 0xb0
0000            401   _P3_1           BIT 0xb1
0000            402   _P3_2           BIT 0xb2
0000            403   _P3_3           BIT 0xb3
0000            404   _P3_4           BIT 0xb4
0000            405   _P3_7           BIT 0xb7
0000            406   _CCF0           BIT 0xd8
0000            407   _CCF1           BIT 0xd9
0000            408   _CCF2           BIT 0xda
0000            409   _CCF3           BIT 0xdb
0000            410   _CCF4           BIT 0xdc
0000            411   _CCF5           BIT 0xdd
0000            412   _CR             BIT 0xde
0000            413   _CF             BIT 0xdf
0000            414   _PARITY         BIT 0xd0
0000            415   _F1             BIT 0xd1
0000            416   _OV             BIT 0xd2
0000            417   _RS0            BIT 0xd3
0000            418   _RS1            BIT 0xd4
0000            419   _F0             BIT 0xd5
0000            420   _AC             BIT 0xd6
0000            421   _CY             BIT 0xd7
0000            422   _RI             BIT 0x98
0000            423   _TI             BIT 0x99
0000            424   _RB8            BIT 0x9a
0000            425   _TB8            BIT 0x9b
0000            426   _REN            BIT 0x9c
0000            427   _CE             BIT 0x9d
0000            428   _SMODE          BIT 0x9e
0000            429   _RI1            BIT 0xc8
0000            430   _TI1            BIT 0xc9
0000            431   _RBX1           BIT 0xca
0000            432   _TBX1           BIT 0xcb
0000            433   _REN1           BIT 0xcc
0000            434   _PERR1          BIT 0xcd
0000            435   _OVR1           BIT 0xce
0000            436   _SI             BIT 0xc0
0000            437   _ACK            BIT 0xc1
0000            438   _ARBLOST        BIT 0xc2
0000            439   _ACKRQ          BIT 0xc3
0000            440   _STO            BIT 0xc4
0000            441   _STA            BIT 0xc5
0000            442   _TXMODE         BIT 0xc6
0000            443   _MASTER         BIT 0xc7
0000            444   _SPIEN          BIT 0xf8
0000            445   _TXNF           BIT 0xf9
0000            446   _NSSMD0         BIT 0xfa
0000            447   _NSSMD1         BIT 0xfb
0000            448   _RXOVRN         BIT 0xfc
0000            449   _MODF           BIT 0xfd
0000            450   _WCOL           BIT 0xfe
0000            451   _SPIF           BIT 0xff
0000            452   _IT0            BIT 0x88
0000            453   _IE0            BIT 0x89
0000            454   _IT1            BIT 0x8a
0000            455   _IE1            BIT 0x8b
0000            456   _TR0            BIT 0x8c
0000            457   _TF0            BIT 0x8d
0000            458   _TR1            BIT 0x8e
0000            459   _TF1            BIT 0x8f
0000            460   _T2XCLK0        BIT 0xc8
0000            461   _T2XCLK1        BIT 0xc9
0000            462   _TR2            BIT 0xca
0000            463   _T2SPLIT        BIT 0xcb
0000            464   _TF2CEN         BIT 0xcc
0000            465   _TF2LEN         BIT 0xcd
0000            466   _TF2L           BIT 0xce
0000            467   _TF2H           BIT 0xcf
0000            468   _T4XCLK0        BIT 0x98
0000            469   _T4XCLK1        BIT 0x99
0000            470   _TR4            BIT 0x9a
0000            471   _T4SPLIT        BIT 0x9b
0000            472   _TF4CEN         BIT 0x9c
0000            473   _TF4LEN         BIT 0x9d
0000            474   _TF4L           BIT 0x9e
0000            475   _TF4H           BIT 0x9f
0000            476   _T5XCLK0        BIT 0xc0
0000            477   _T5XCLK1        BIT 0xc1
0000            478   _TR5            BIT 0xc2
0000            479   _T5SPLIT        BIT 0xc3
0000            480   _TF5CEN         BIT 0xc4
0000            481   _TF5LEN         BIT 0xc5
0000            482   _TF5L           BIT 0xc6
0000            483   _TF5H           BIT 0xc7
0000            484   _RIE            BIT 0xd8
0000            485   _RXTO0          BIT 0xd9
0000            486   _RXTO1          BIT 0xda
0000            487   _RFRQ           BIT 0xdb
0000            488   _TIE            BIT 0xdc
0000            489   _TXHOLD         BIT 0xdd
0000            490   _TXNF1          BIT 0xde
0000            491   _TFRQ           BIT 0xdf
0000            492   ;--------------------------------------------------------
0000            493   ; overlayable register banks
0000            494   ;--------------------------------------------------------
0000            495            rbank0 segment data overlay
0000            496   ;--------------------------------------------------------
0000            497   ; internal ram data
0000            498   ;--------------------------------------------------------
0000            499            rseg R_DSEG
0000            500   _overflow_count:
0000            501            ds 1
0001            502   _LCDprint_PARM_2:
0001            503            ds 1
0002            504   _getsn_PARM_2:
0002            505            ds 2
0004            506   _getsn_buff_1_70:
0004            507            ds 3
0007            508   _getsn_sloc0_1_0:
0007            509            ds 2
0009            510   _writeOutputBuffer_PARM_2:
0009            511            ds 4
000D            512   _main_v_1_86:
000D            513            ds 16
001D            514   ;--------------------------------------------------------
001D            515   ; overlayable items in internal ram 
001D            516   ;--------------------------------------------------------
0000            517            rseg    R_OSEG
0000            518            rseg    R_OSEG
0000            519   _InitPinADC_PARM_2:
0000            520            ds 1
0001            521            rseg    R_OSEG
0001            522   ;--------------------------------------------------------
0001            523   ; indirectly addressable internal ram data
0001            524   ;--------------------------------------------------------
0000            525            rseg R_ISEG
0000            526   ;--------------------------------------------------------
0000            527   ; absolute internal ram data
0000            528   ;--------------------------------------------------------
0000            529            DSEG
0000            530   ;--------------------------------------------------------
0000            531   ; bit data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_BSEG
0000            534   _LCDprint_PARM_3:
0000            535            DBIT    1
0001            536   ;--------------------------------------------------------
0001            537   ; paged external ram data
0001            538   ;--------------------------------------------------------
0000            539            rseg R_PSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; absolute external ram data
0000            546   ;--------------------------------------------------------
0000            547            XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external initialized ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_IXSEG
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_CSEG
0000            555   ;--------------------------------------------------------
0000            556   ; Reset entry point and interrupt vectors
0000            557   ;--------------------------------------------------------
0000            558            CSEG at 0x0000
0000 020000     559            ljmp    _crt0
0003            560   ;--------------------------------------------------------
0003            561   ; global & static initialisations
0003            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            571   ;--------------------------------------------------------
0000            572   ; code
0000            573   ;--------------------------------------------------------
0000            574            rseg R_CSEG
0000            575   ;------------------------------------------------------------
0000            576   ;Allocation info for local variables in function '_c51_external_startup'
0000            577   ;------------------------------------------------------------
0000            578   ;------------------------------------------------------------
0000            579   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:30: char _c51_external_startup (void)
0000            580   ;        -----------------------------------------
0000            581   ;         function _c51_external_startup
0000            582   ;        -----------------------------------------
0000            583   __c51_external_startup:
0000            584            using   0
0000            585   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:33: SFRPAGE = 0x00;
0000 75A700     586            mov     _SFRPAGE,#0x00
0003            587   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:34: WDTCN = 0xDE; //First key
0003 7597DE     588            mov     _WDTCN,#0xDE
0006            589   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:35: WDTCN = 0xAD; //Second key
0006 7597AD     590            mov     _WDTCN,#0xAD
0009            591   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:37: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     592            mov     _VDM0CN,#0x80
000C            593   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:38: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     594            mov     _RSTSRC,#0x06
000F            595   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:45: SFRPAGE = 0x10;
000F 75A710     596            mov     _SFRPAGE,#0x10
0012            597   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:46: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     598            mov     _PFE0CN,#0x20
0015            599   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:47: SFRPAGE = 0x00;
0015 75A700     600            mov     _SFRPAGE,#0x00
0018            601   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:68: CLKSEL = 0x00;
0018 75A900     602            mov     _CLKSEL,#0x00
001B            603   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:69: CLKSEL = 0x00;
001B 75A900     604            mov     _CLKSEL,#0x00
001E            605   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:70: while ((CLKSEL & 0x80) == 0);
001E            606   L002001?:
001E E5A9       607            mov     a,_CLKSEL
0020 30E730     608            jnb     acc.7,L002001?
0023            609   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:71: CLKSEL = 0x03;
0023 75A903     610            mov     _CLKSEL,#0x03
0026            611   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:72: CLKSEL = 0x03;
0026 75A903     612            mov     _CLKSEL,#0x03
0029            613   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:73: while ((CLKSEL & 0x80) == 0);
0029            614   L002004?:
0029 E5A9       615            mov     a,_CLKSEL
002B 30E7B0     616            jnb     acc.7,L002004?
002E            617   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:78: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     618            orl     _P0MDOUT,#0x10
0031            619   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:79: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     620            mov     _XBR0,#0x01
0034            621   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:80: XBR1     = 0X00;
0034 75E200     622            mov     _XBR1,#0x00
0037            623   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:81: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     624            mov     _XBR2,#0x40
003A            625   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:87: SCON0 = 0x10;
003A 759810     626            mov     _SCON0,#0x10
003D            627   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:88: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     628            mov     _TH1,#0xE6
0040            629   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:89: TL1 = TH1;      // Init Timer1
0040 858D8B     630            mov     _TL1,_TH1
0043            631   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:90: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     632            anl     _TMOD,#0x0F
0046            633   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:91: TMOD |=  0x20;                       
0046 438920     634            orl     _TMOD,#0x20
0049            635   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:92: TR1 = 1; // START Timer1
0049 D28E       636            setb    _TR1
004B            637   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:93: TI = 1;  // Indicate TX0 ready
004B D299       638            setb    _TI
004D            639   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:95: return 0;
004D 758200     640            mov     dpl,#0x00
0050 22         641            ret
0051            642   ;------------------------------------------------------------
0051            643   ;Allocation info for local variables in function 'InitADC'
0051            644   ;------------------------------------------------------------
0051            645   ;------------------------------------------------------------
0051            646   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:98: void InitADC (void)
0051            647   ;        -----------------------------------------
0051            648   ;         function InitADC
0051            649   ;        -----------------------------------------
0051            650   _InitADC:
0051            651   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:100: SFRPAGE = 0x00;
0051 75A700     652            mov     _SFRPAGE,#0x00
0054            653   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:101: ADEN=0; // Disable ADC
0054 C2EF       654            clr     _ADEN
0056            655   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:106: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     656            mov     _ADC0CN1,#0x80
0059            657   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:110: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     658            mov     _ADC0CF0,#0x20
005C            659   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:114: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     660            mov     _ADC0CF1,#0x1E
005F            661   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:123: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     662            mov     _ADC0CN0,#0x00
0062            663   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:128: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     664            mov     _ADC0CF2,#0x3F
0065            665   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:132: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     666            mov     _ADC0CN2,#0x00
0068            667   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:134: ADEN=1; // Enable ADC
0068 D2EF       668            setb    _ADEN
006A 22         669            ret
006B            670   ;------------------------------------------------------------
006B            671   ;Allocation info for local variables in function 'Timer3us'
006B            672   ;------------------------------------------------------------
006B            673   ;us                        Allocated to registers r2 
006B            674   ;i                         Allocated to registers r3 
006B            675   ;------------------------------------------------------------
006B            676   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:138: void Timer3us(unsigned char us)
006B            677   ;        -----------------------------------------
006B            678   ;         function Timer3us
006B            679   ;        -----------------------------------------
006B            680   _Timer3us:
006B AA82       681            mov     r2,dpl
006D            682   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:143: CKCON0|=0b_0100_0000;
006D 438E40     683            orl     _CKCON0,#0x40
0070            684   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:145: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     685            mov     _TMR3RL,#0xB8
0073 7593FF     686            mov     (_TMR3RL >> 8),#0xFF
0076            687   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:146: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     688            mov     _TMR3,_TMR3RL
0079 859395     689            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            690   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:148: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     691            mov     _TMR3CN0,#0x04
007F            692   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:149: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       693            mov     r3,#0x00
0081            694   L004004?:
0081 C3         695            clr     c
0082 EB         696            mov     a,r3
0083 9A         697            subb    a,r2
0084 5000       698            jnc     L004007?
0086            699   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:151: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            700   L004001?:
0086 E591       701            mov     a,_TMR3CN0
0088 30E7B0     702            jnb     acc.7,L004001?
008B            703   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:152: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     704            anl     _TMR3CN0,#0x7F
008E            705   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:149: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         706            inc     r3
008F 8000       707            sjmp    L004004?
0091            708   L004007?:
0091            709   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:154: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     710            mov     _TMR3CN0,#0x00
0094 22         711            ret
0095            712   ;------------------------------------------------------------
0095            713   ;Allocation info for local variables in function 'waitms'
0095            714   ;------------------------------------------------------------
0095            715   ;ms                        Allocated to registers r2 r3 
0095            716   ;j                         Allocated to registers r4 r5 
0095            717   ;k                         Allocated to registers r6 
0095            718   ;------------------------------------------------------------
0095            719   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:157: void waitms (unsigned int ms)
0095            720   ;        -----------------------------------------
0095            721   ;         function waitms
0095            722   ;        -----------------------------------------
0095            723   _waitms:
0095 AA82       724            mov     r2,dpl
0097 AB83       725            mov     r3,dph
0099            726   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:161: for(j=0; j<ms; j++)
0099 7C00       727            mov     r4,#0x00
009B 7D00       728            mov     r5,#0x00
009D            729   L005005?:
009D C3         730            clr     c
009E EC         731            mov     a,r4
009F 9A         732            subb    a,r2
00A0 ED         733            mov     a,r5
00A1 9B         734            subb    a,r3
00A2 5000       735            jnc     L005009?
00A4            736   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:162: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       737            mov     r6,#0x00
00A6            738   L005001?:
00A6 BE04F0     739            cjne    r6,#0x04,L005018?
00A9            740   L005018?:
00A9 5000       741            jnc     L005007?
00AB 7582FA     742            mov     dpl,#0xFA
00AE C002       743            push    ar2
00B0 C003       744            push    ar3
00B2 C004       745            push    ar4
00B4 C005       746            push    ar5
00B6 C006       747            push    ar6
00B8 120000     748            lcall   _Timer3us
00BB D006       749            pop     ar6
00BD D005       750            pop     ar5
00BF D004       751            pop     ar4
00C1 D003       752            pop     ar3
00C3 D002       753            pop     ar2
00C5 0E         754            inc     r6
00C6 8000       755            sjmp    L005001?
00C8            756   L005007?:
00C8            757   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:161: for(j=0; j<ms; j++)
00C8 0C         758            inc     r4
00C9 BC0030     759            cjne    r4,#0x00,L005005?
00CC 0D         760            inc     r5
00CD 8000       761            sjmp    L005005?
00CF            762   L005009?:
00CF 22         763            ret
00D0            764   ;------------------------------------------------------------
00D0            765   ;Allocation info for local variables in function 'InitPinADC'
00D0            766   ;------------------------------------------------------------
00D0            767   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            768   ;portno                    Allocated to registers r2 
00D0            769   ;mask                      Allocated to registers r3 
00D0            770   ;------------------------------------------------------------
00D0            771   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:167: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            772   ;        -----------------------------------------
00D0            773   ;         function InitPinADC
00D0            774   ;        -----------------------------------------
00D0            775   _InitPinADC:
00D0 AA82       776            mov     r2,dpl
00D2            777   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:171: mask=1<<pinno;
00D2 85C0F0     778            mov     b,_InitPinADC_PARM_2
00D5 05F0       779            inc     b
00D7 7401       780            mov     a,#0x01
00D9 8000       781            sjmp    L006013?
00DB            782   L006011?:
00DB 25E0       783            add     a,acc
00DD            784   L006013?:
00DD D5F0F0     785            djnz    b,L006011?
00E0 FB         786            mov     r3,a
00E1            787   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:173: SFRPAGE = 0x20;
00E1 75A720     788            mov     _SFRPAGE,#0x20
00E4            789   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:174: switch (portno)
00E4 BA0030     790            cjne    r2,#0x00,L006014?
00E7 8000       791            sjmp    L006001?
00E9            792   L006014?:
00E9 BA01B0     793            cjne    r2,#0x01,L006015?
00EC 8000       794            sjmp    L006002?
00EE            795   L006015?:
00EE            796   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:176: case 0:
00EE BA0230     797            cjne    r2,#0x02,L006005?
00F1 8000       798            sjmp    L006003?
00F3            799   L006001?:
00F3            800   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:177: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         801            mov     a,r3
00F4 F4         802            cpl     a
00F5 FA         803            mov     r2,a
00F6 52F1       804            anl     _P0MDIN,a
00F8            805   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:178: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         806            mov     a,r3
00F9 42D4       807            orl     _P0SKIP,a
00FB            808   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:179: break;
00FB            809   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:180: case 1:
00FB 8000       810            sjmp    L006005?
00FD            811   L006002?:
00FD            812   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:181: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         813            mov     a,r3
00FE F4         814            cpl     a
00FF FA         815            mov     r2,a
0100 52F2       816            anl     _P1MDIN,a
0102            817   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:182: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         818            mov     a,r3
0103 42D5       819            orl     _P1SKIP,a
0105            820   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:183: break;
0105            821   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:184: case 2:
0105 8000       822            sjmp    L006005?
0107            823   L006003?:
0107            824   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:185: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         825            mov     a,r3
0108 F4         826            cpl     a
0109 FA         827            mov     r2,a
010A 52F3       828            anl     _P2MDIN,a
010C            829   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:186: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         830            mov     a,r3
010D 42CC       831            orl     _P2SKIP,a
010F            832   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:190: }
010F            833   L006005?:
010F            834   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:191: SFRPAGE = 0x00;
010F 75A700     835            mov     _SFRPAGE,#0x00
0112 22         836            ret
0113            837   ;------------------------------------------------------------
0113            838   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            839   ;------------------------------------------------------------
0113            840   ;pin                       Allocated to registers 
0113            841   ;------------------------------------------------------------
0113            842   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:194: unsigned int ADC_at_Pin(unsigned char pin)
0113            843   ;        -----------------------------------------
0113            844   ;         function ADC_at_Pin
0113            845   ;        -----------------------------------------
0113            846   _ADC_at_Pin:
0113 8582BB     847            mov     _ADC0MX,dpl
0116            848   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:197: ADINT = 0;
0116 C2ED       849            clr     _ADINT
0118            850   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:198: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       851            setb    _ADBUSY
011A            852   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:199: while (!ADINT); // Wait for conversion to complete
011A            853   L007001?:
011A 30EDB0     854            jnb     _ADINT,L007001?
011D            855   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:200: return (ADC0);
011D 85BD82     856            mov     dpl,_ADC0
0120 85BE83     857            mov     dph,(_ADC0 >> 8)
0123 22         858            ret
0124            859   ;------------------------------------------------------------
0124            860   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            861   ;------------------------------------------------------------
0124            862   ;pin                       Allocated to registers r2 
0124            863   ;------------------------------------------------------------
0124            864   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:203: float Volts_at_Pin(unsigned char pin)
0124            865   ;        -----------------------------------------
0124            866   ;         function Volts_at_Pin
0124            867   ;        -----------------------------------------
0124            868   _Volts_at_Pin:
0124            869   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:205: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     870            lcall   _ADC_at_Pin
0127 120000     871            lcall   ___uint2fs
012A AA82       872            mov     r2,dpl
012C AB83       873            mov     r3,dph
012E ACF0       874            mov     r4,b
0130 FD         875            mov     r5,a
0131 C002       876            push    ar2
0133 C003       877            push    ar3
0135 C004       878            push    ar4
0137 C005       879            push    ar5
0139 906C8B     880            mov     dptr,#0x6C8B
013C 75F053     881            mov     b,#0x53
013F 7440       882            mov     a,#0x40
0141 120000     883            lcall   ___fsmul
0144 AA82       884            mov     r2,dpl
0146 AB83       885            mov     r3,dph
0148 ACF0       886            mov     r4,b
014A FD         887            mov     r5,a
014B E581       888            mov     a,sp
014D 24FC       889            add     a,#0xfc
014F F581       890            mov     sp,a
0151 E4         891            clr     a
0152 C0E0       892            push    acc
0154 74FC       893            mov     a,#0xFC
0156 C0E0       894            push    acc
0158 747F       895            mov     a,#0x7F
015A C0E0       896            push    acc
015C 7446       897            mov     a,#0x46
015E C0E0       898            push    acc
0160 8A82       899            mov     dpl,r2
0162 8B83       900            mov     dph,r3
0164 8CF0       901            mov     b,r4
0166 ED         902            mov     a,r5
0167 120000     903            lcall   ___fsdiv
016A AA82       904            mov     r2,dpl
016C AB83       905            mov     r3,dph
016E ACF0       906            mov     r4,b
0170 FD         907            mov     r5,a
0171 E581       908            mov     a,sp
0173 24FC       909            add     a,#0xfc
0175 F581       910            mov     sp,a
0177 8A82       911            mov     dpl,r2
0179 8B83       912            mov     dph,r3
017B 8CF0       913            mov     b,r4
017D ED         914            mov     a,r5
017E 22         915            ret
017F            916   ;------------------------------------------------------------
017F            917   ;Allocation info for local variables in function 'LCD_pulse'
017F            918   ;------------------------------------------------------------
017F            919   ;------------------------------------------------------------
017F            920   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:208: void LCD_pulse (void)
017F            921   ;        -----------------------------------------
017F            922   ;         function LCD_pulse
017F            923   ;        -----------------------------------------
017F            924   _LCD_pulse:
017F            925   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:210: LCD_E=1;
017F D2A5       926            setb    _P2_5
0181            927   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:211: Timer3us(40);
0181 758228     928            mov     dpl,#0x28
0184 120000     929            lcall   _Timer3us
0187            930   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:212: LCD_E=0;
0187 C2A5       931            clr     _P2_5
0189 22         932            ret
018A            933   ;------------------------------------------------------------
018A            934   ;Allocation info for local variables in function 'LCD_byte'
018A            935   ;------------------------------------------------------------
018A            936   ;x                         Allocated to registers r2 
018A            937   ;------------------------------------------------------------
018A            938   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:215: void LCD_byte (unsigned char x)
018A            939   ;        -----------------------------------------
018A            940   ;         function LCD_byte
018A            941   ;        -----------------------------------------
018A            942   _LCD_byte:
018A AA82       943            mov     r2,dpl
018C            944   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:218: ACC=x; //Send high nible
018C 8AE0       945            mov     _ACC,r2
018E            946   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:219: LCD_D7=ACC_7;
018E A2E7       947            mov     c,_ACC_7
0190 92A1       948            mov     _P2_1,c
0192            949   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:220: LCD_D6=ACC_6;
0192 A2E6       950            mov     c,_ACC_6
0194 92A2       951            mov     _P2_2,c
0196            952   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:221: LCD_D5=ACC_5;
0196 A2E5       953            mov     c,_ACC_5
0198 92A3       954            mov     _P2_3,c
019A            955   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:222: LCD_D4=ACC_4;
019A A2E4       956            mov     c,_ACC_4
019C 92A4       957            mov     _P2_4,c
019E            958   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:223: LCD_pulse();
019E C002       959            push    ar2
01A0 120000     960            lcall   _LCD_pulse
01A3            961   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:224: Timer3us(40);
01A3 758228     962            mov     dpl,#0x28
01A6 120000     963            lcall   _Timer3us
01A9 D002       964            pop     ar2
01AB            965   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:225: ACC=x; //Send low nible
01AB 8AE0       966            mov     _ACC,r2
01AD            967   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:226: LCD_D7=ACC_3;
01AD A2E3       968            mov     c,_ACC_3
01AF 92A1       969            mov     _P2_1,c
01B1            970   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:227: LCD_D6=ACC_2;
01B1 A2E2       971            mov     c,_ACC_2
01B3 92A2       972            mov     _P2_2,c
01B5            973   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:228: LCD_D5=ACC_1;
01B5 A2E1       974            mov     c,_ACC_1
01B7 92A3       975            mov     _P2_3,c
01B9            976   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:229: LCD_D4=ACC_0;
01B9 A2E0       977            mov     c,_ACC_0
01BB 92A4       978            mov     _P2_4,c
01BD            979   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:230: LCD_pulse();
01BD 020000     980            ljmp    _LCD_pulse
01C0            981   ;------------------------------------------------------------
01C0            982   ;Allocation info for local variables in function 'WriteData'
01C0            983   ;------------------------------------------------------------
01C0            984   ;x                         Allocated to registers r2 
01C0            985   ;------------------------------------------------------------
01C0            986   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:233: void WriteData (unsigned char x)
01C0            987   ;        -----------------------------------------
01C0            988   ;         function WriteData
01C0            989   ;        -----------------------------------------
01C0            990   _WriteData:
01C0 AA82       991            mov     r2,dpl
01C2            992   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:235: LCD_RS=1;
01C2 D2A6       993            setb    _P2_6
01C4            994   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:236: LCD_byte(x);
01C4 8A82       995            mov     dpl,r2
01C6 120000     996            lcall   _LCD_byte
01C9            997   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:237: waitms(2);
01C9 900002     998            mov     dptr,#0x0002
01CC 020000     999            ljmp    _waitms
01CF           1000   ;------------------------------------------------------------
01CF           1001   ;Allocation info for local variables in function 'WriteCommand'
01CF           1002   ;------------------------------------------------------------
01CF           1003   ;x                         Allocated to registers r2 
01CF           1004   ;------------------------------------------------------------
01CF           1005   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:240: void WriteCommand (unsigned char x)
01CF           1006   ;        -----------------------------------------
01CF           1007   ;         function WriteCommand
01CF           1008   ;        -----------------------------------------
01CF           1009   _WriteCommand:
01CF AA82      1010            mov     r2,dpl
01D1           1011   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:242: LCD_RS=0;
01D1 C2A6      1012            clr     _P2_6
01D3           1013   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:243: LCD_byte(x);
01D3 8A82      1014            mov     dpl,r2
01D5 120000    1015            lcall   _LCD_byte
01D8           1016   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:244: waitms(5);
01D8 900005    1017            mov     dptr,#0x0005
01DB 020000    1018            ljmp    _waitms
01DE           1019   ;------------------------------------------------------------
01DE           1020   ;Allocation info for local variables in function 'LCD_4BIT'
01DE           1021   ;------------------------------------------------------------
01DE           1022   ;------------------------------------------------------------
01DE           1023   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:247: void LCD_4BIT (void)
01DE           1024   ;        -----------------------------------------
01DE           1025   ;         function LCD_4BIT
01DE           1026   ;        -----------------------------------------
01DE           1027   _LCD_4BIT:
01DE           1028   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:249: LCD_E=0; // Resting state of LCD's enable is zero
01DE C2A5      1029            clr     _P2_5
01E0           1030   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:251: waitms(20);
01E0 900014    1031            mov     dptr,#0x0014
01E3 120000    1032            lcall   _waitms
01E6           1033   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:253: WriteCommand(0x33);
01E6 758233    1034            mov     dpl,#0x33
01E9 120000    1035            lcall   _WriteCommand
01EC           1036   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:254: WriteCommand(0x33);
01EC 758233    1037            mov     dpl,#0x33
01EF 120000    1038            lcall   _WriteCommand
01F2           1039   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:255: WriteCommand(0x32); // Change to 4-bit mode
01F2 758232    1040            mov     dpl,#0x32
01F5 120000    1041            lcall   _WriteCommand
01F8           1042   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:258: WriteCommand(0x28);
01F8 758228    1043            mov     dpl,#0x28
01FB 120000    1044            lcall   _WriteCommand
01FE           1045   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:259: WriteCommand(0x0c);
01FE 75820C    1046            mov     dpl,#0x0C
0201 120000    1047            lcall   _WriteCommand
0204           1048   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:260: WriteCommand(0x01); // Clear screen command (takes some time)
0204 758201    1049            mov     dpl,#0x01
0207 120000    1050            lcall   _WriteCommand
020A           1051   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:261: waitms(20); // Wait for clear screen command to finsih.
020A 900014    1052            mov     dptr,#0x0014
020D 020000    1053            ljmp    _waitms
0210           1054   ;------------------------------------------------------------
0210           1055   ;Allocation info for local variables in function 'LCDprint'
0210           1056   ;------------------------------------------------------------
0210           1057   ;line                      Allocated with name '_LCDprint_PARM_2'
0210           1058   ;string                    Allocated to registers r2 r3 r4 
0210           1059   ;j                         Allocated to registers r5 r6 
0210           1060   ;------------------------------------------------------------
0210           1061   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:264: void LCDprint(char * string, unsigned char line, bit clear)
0210           1062   ;        -----------------------------------------
0210           1063   ;         function LCDprint
0210           1064   ;        -----------------------------------------
0210           1065   _LCDprint:
0210 AA82      1066            mov     r2,dpl
0212 AB83      1067            mov     r3,dph
0214 ACF0      1068            mov     r4,b
0216           1069   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:268: WriteCommand(line==2?0xc0:0x80);
0216 7402      1070            mov     a,#0x02
0218 B590F0    1071            cjne    a,_LCDprint_PARM_2,L014013?
021B 7DC0      1072            mov     r5,#0xC0
021D 8000      1073            sjmp    L014014?
021F           1074   L014013?:
021F 7D80      1075            mov     r5,#0x80
0221           1076   L014014?:
0221 8D82      1077            mov     dpl,r5
0223 C002      1078            push    ar2
0225 C003      1079            push    ar3
0227 C004      1080            push    ar4
0229 120000    1081            lcall   _WriteCommand
022C           1082   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:269: waitms(5);
022C 900005    1083            mov     dptr,#0x0005
022F 120000    1084            lcall   _waitms
0232 D004      1085            pop     ar4
0234 D003      1086            pop     ar3
0236 D002      1087            pop     ar2
0238           1088   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:270: for(j=0; string[j]!=0; j++)        WriteData(string[j]);// Write the message
0238 7D00      1089            mov     r5,#0x00
023A 7E00      1090            mov     r6,#0x00
023C           1091   L014003?:
023C ED        1092            mov     a,r5
023D 2A        1093            add     a,r2
023E FF        1094            mov     r7,a
023F EE        1095            mov     a,r6
0240 3B        1096            addc    a,r3
0241 F8        1097            mov     r0,a
0242 8C01      1098            mov     ar1,r4
0244 8F82      1099            mov     dpl,r7
0246 8883      1100            mov     dph,r0
0248 89F0      1101            mov     b,r1
024A 120000    1102            lcall   __gptrget
024D FF        1103            mov     r7,a
024E 6000      1104            jz      L014006?
0250 8F82      1105            mov     dpl,r7
0252 C002      1106            push    ar2
0254 C003      1107            push    ar3
0256 C004      1108            push    ar4
0258 C005      1109            push    ar5
025A C006      1110            push    ar6
025C 120000    1111            lcall   _WriteData
025F D006      1112            pop     ar6
0261 D005      1113            pop     ar5
0263 D004      1114            pop     ar4
0265 D003      1115            pop     ar3
0267 D002      1116            pop     ar2
0269 0D        1117            inc     r5
026A BD0070    1118            cjne    r5,#0x00,L014003?
026D 0E        1119            inc     r6
026E 8000      1120            sjmp    L014003?
0270           1121   L014006?:
0270           1122   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:271: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0270 30B030    1123            jnb     _LCDprint_PARM_3,L014011?
0273 8D02      1124            mov     ar2,r5
0275 8E03      1125            mov     ar3,r6
0277           1126   L014007?:
0277 C3        1127            clr     c
0278 EA        1128            mov     a,r2
0279 9410      1129            subb    a,#0x10
027B EB        1130            mov     a,r3
027C 6480      1131            xrl     a,#0x80
027E 9480      1132            subb    a,#0x80
0280 5000      1133            jnc     L014011?
0282 758220    1134            mov     dpl,#0x20
0285 C002      1135            push    ar2
0287 C003      1136            push    ar3
0289 120000    1137            lcall   _WriteData
028C D003      1138            pop     ar3
028E D002      1139            pop     ar2
0290 0A        1140            inc     r2
0291 BA0070    1141            cjne    r2,#0x00,L014007?
0294 0B        1142            inc     r3
0295 8000      1143            sjmp    L014007?
0297           1144   L014011?:
0297 22        1145            ret
0298           1146   ;------------------------------------------------------------
0298           1147   ;Allocation info for local variables in function 'getsn'
0298           1148   ;------------------------------------------------------------
0298           1149   ;len                       Allocated with name '_getsn_PARM_2'
0298           1150   ;buff                      Allocated with name '_getsn_buff_1_70'
0298           1151   ;j                         Allocated with name '_getsn_sloc0_1_0'
0298           1152   ;c                         Allocated to registers r3 
0298           1153   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0298           1154   ;------------------------------------------------------------
0298           1155   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:274: int getsn (char * buff, int len)
0298           1156   ;        -----------------------------------------
0298           1157   ;         function getsn
0298           1158   ;        -----------------------------------------
0298           1159   _getsn:
0298 858220    1160            mov     _getsn_buff_1_70,dpl
029B 858321    1161            mov     (_getsn_buff_1_70 + 1),dph
029E 85F022    1162            mov     (_getsn_buff_1_70 + 2),b
02A1           1163   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:279: for(j=0; j<(len-1); j++)
02A1 E4        1164            clr     a
02A2 F570      1165            mov     _getsn_sloc0_1_0,a
02A4 F571      1166            mov     (_getsn_sloc0_1_0 + 1),a
02A6 E540      1167            mov     a,_getsn_PARM_2
02A8 24FF      1168            add     a,#0xff
02AA FF        1169            mov     r7,a
02AB E541      1170            mov     a,(_getsn_PARM_2 + 1)
02AD 34FF      1171            addc    a,#0xff
02AF F8        1172            mov     r0,a
02B0 7900      1173            mov     r1,#0x00
02B2 7A00      1174            mov     r2,#0x00
02B4           1175   L015005?:
02B4 C3        1176            clr     c
02B5 E9        1177            mov     a,r1
02B6 9F        1178            subb    a,r7
02B7 EA        1179            mov     a,r2
02B8 6480      1180            xrl     a,#0x80
02BA 88F0      1181            mov     b,r0
02BC 63F080    1182            xrl     b,#0x80
02BF 95F0      1183            subb    a,b
02C1 5000      1184            jnc     L015008?
02C3           1185   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:281: c=getchar();
02C3 C002      1186            push    ar2
02C5 C007      1187            push    ar7
02C7 C000      1188            push    ar0
02C9 C001      1189            push    ar1
02CB 120000    1190            lcall   _getchar
02CE AB82      1191            mov     r3,dpl
02D0 D001      1192            pop     ar1
02D2 D000      1193            pop     ar0
02D4 D007      1194            pop     ar7
02D6 D002      1195            pop     ar2
02D8           1196   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:282: if ( (c=='\n') || (c=='\r') )
02D8 BB0A70    1197            cjne    r3,#0x0A,L015015?
02DB 8000      1198            sjmp    L015001?
02DD           1199   L015015?:
02DD BB0DF0    1200            cjne    r3,#0x0D,L015002?
02E0           1201   L015001?:
02E0           1202   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:284: buff[j]=0;
02E0 E570      1203            mov     a,_getsn_sloc0_1_0
02E2 2520      1204            add     a,_getsn_buff_1_70
02E4 FC        1205            mov     r4,a
02E5 E571      1206            mov     a,(_getsn_sloc0_1_0 + 1)
02E7 3521      1207            addc    a,(_getsn_buff_1_70 + 1)
02E9 FD        1208            mov     r5,a
02EA AE22      1209            mov     r6,(_getsn_buff_1_70 + 2)
02EC 8C82      1210            mov     dpl,r4
02EE 8D83      1211            mov     dph,r5
02F0 8EF0      1212            mov     b,r6
02F2 E4        1213            clr     a
02F3 120000    1214            lcall   __gptrput
02F6           1215   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:285: return j;
02F6 857082    1216            mov     dpl,_getsn_sloc0_1_0
02F9 857183    1217            mov     dph,(_getsn_sloc0_1_0 + 1)
02FC 22        1218            ret
02FD           1219   L015002?:
02FD           1220   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:289: buff[j]=c;
02FD E9        1221            mov     a,r1
02FE 2520      1222            add     a,_getsn_buff_1_70
0300 FC        1223            mov     r4,a
0301 EA        1224            mov     a,r2
0302 3521      1225            addc    a,(_getsn_buff_1_70 + 1)
0304 FD        1226            mov     r5,a
0305 AE22      1227            mov     r6,(_getsn_buff_1_70 + 2)
0307 8C82      1228            mov     dpl,r4
0309 8D83      1229            mov     dph,r5
030B 8EF0      1230            mov     b,r6
030D EB        1231            mov     a,r3
030E 120000    1232            lcall   __gptrput
0311           1233   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:279: for(j=0; j<(len-1); j++)
0311 09        1234            inc     r1
0312 B90070    1235            cjne    r1,#0x00,L015018?
0315 0A        1236            inc     r2
0316           1237   L015018?:
0316 8970      1238            mov     _getsn_sloc0_1_0,r1
0318 8A71      1239            mov     (_getsn_sloc0_1_0 + 1),r2
031A 8000      1240            sjmp    L015005?
031C           1241   L015008?:
031C           1242   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:292: buff[j]=0;
031C E570      1243            mov     a,_getsn_sloc0_1_0
031E 2520      1244            add     a,_getsn_buff_1_70
0320 FA        1245            mov     r2,a
0321 E571      1246            mov     a,(_getsn_sloc0_1_0 + 1)
0323 3521      1247            addc    a,(_getsn_buff_1_70 + 1)
0325 FB        1248            mov     r3,a
0326 AC22      1249            mov     r4,(_getsn_buff_1_70 + 2)
0328 8A82      1250            mov     dpl,r2
032A 8B83      1251            mov     dph,r3
032C 8CF0      1252            mov     b,r4
032E E4        1253            clr     a
032F 120000    1254            lcall   __gptrput
0332           1255   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:293: return len;
0332 854082    1256            mov     dpl,_getsn_PARM_2
0335 854183    1257            mov     dph,(_getsn_PARM_2 + 1)
0338 22        1258            ret
0339           1259   ;------------------------------------------------------------
0339           1260   ;Allocation info for local variables in function 'TIMER0_Init'
0339           1261   ;------------------------------------------------------------
0339           1262   ;------------------------------------------------------------
0339           1263   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:296: void TIMER0_Init(void)
0339           1264   ;        -----------------------------------------
0339           1265   ;         function TIMER0_Init
0339           1266   ;        -----------------------------------------
0339           1267   _TIMER0_Init:
0339           1268   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:298: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0339 5389F0    1269            anl     _TMOD,#0xF0
033C           1270   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:299: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
033C 438901    1271            orl     _TMOD,#0x01
033F           1272   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:300: TR0=0; // Stop Timer/Counter 0
033F C28C      1273            clr     _TR0
0341 22        1274            ret
0342           1275   ;------------------------------------------------------------
0342           1276   ;Allocation info for local variables in function 'PtoC'
0342           1277   ;------------------------------------------------------------
0342           1278   ;period                    Allocated to registers r2 r3 r4 r5 
0342           1279   ;------------------------------------------------------------
0342           1280   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:303: double PtoC(double period){
0342           1281   ;        -----------------------------------------
0342           1282   ;         function PtoC
0342           1283   ;        -----------------------------------------
0342           1284   _PtoC:
0342 AA82      1285            mov     r2,dpl
0344 AB83      1286            mov     r3,dph
0346 ACF0      1287            mov     r4,b
0348 FD        1288            mov     r5,a
0349           1289   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:304: return ((period*1000000000.0)/(3465.7359028));
0349 C002      1290            push    ar2
034B C003      1291            push    ar3
034D C004      1292            push    ar4
034F C005      1293            push    ar5
0351 906B28    1294            mov     dptr,#0x6B28
0354 75F06E    1295            mov     b,#0x6E
0357 744E      1296            mov     a,#0x4E
0359 120000    1297            lcall   ___fsmul
035C AA82      1298            mov     r2,dpl
035E AB83      1299            mov     r3,dph
0360 ACF0      1300            mov     r4,b
0362 FD        1301            mov     r5,a
0363 E581      1302            mov     a,sp
0365 24FC      1303            add     a,#0xfc
0367 F581      1304            mov     sp,a
0369 74C6      1305            mov     a,#0xC6
036B C0E0      1306            push    acc
036D 749B      1307            mov     a,#0x9B
036F C0E0      1308            push    acc
0371 7458      1309            mov     a,#0x58
0373 C0E0      1310            push    acc
0375 7445      1311            mov     a,#0x45
0377 C0E0      1312            push    acc
0379 8A82      1313            mov     dpl,r2
037B 8B83      1314            mov     dph,r3
037D 8CF0      1315            mov     b,r4
037F ED        1316            mov     a,r5
0380 120000    1317            lcall   ___fsdiv
0383 AA82      1318            mov     r2,dpl
0385 AB83      1319            mov     r3,dph
0387 ACF0      1320            mov     r4,b
0389 FD        1321            mov     r5,a
038A E581      1322            mov     a,sp
038C 24FC      1323            add     a,#0xfc
038E F581      1324            mov     sp,a
0390 8A82      1325            mov     dpl,r2
0392 8B83      1326            mov     dph,r3
0394 8CF0      1327            mov     b,r4
0396 ED        1328            mov     a,r5
0397 22        1329            ret
0398           1330   ;------------------------------------------------------------
0398           1331   ;Allocation info for local variables in function 'writeOutputBuffer'
0398           1332   ;------------------------------------------------------------
0398           1333   ;cap                       Allocated with name '_writeOutputBuffer_PARM_2'
0398           1334   ;buffer                    Allocated to registers r2 r3 r4 
0398           1335   ;suffix                    Allocated to registers r5 
0398           1336   ;------------------------------------------------------------
0398           1337   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:307: void writeOutputBuffer(char *buffer, double cap){
0398           1338   ;        -----------------------------------------
0398           1339   ;         function writeOutputBuffer
0398           1340   ;        -----------------------------------------
0398           1341   _writeOutputBuffer:
0398 AA82      1342            mov     r2,dpl
039A AB83      1343            mov     r3,dph
039C ACF0      1344            mov     r4,b
039E           1345   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:308: char suffix = 'n';
039E 7D6E      1346            mov     r5,#0x6E
03A0           1347   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:309: if(cap < 1.5)
03A0 C002      1348            push    ar2
03A2 C003      1349            push    ar3
03A4 C004      1350            push    ar4
03A6 C005      1351            push    ar5
03A8 E4        1352            clr     a
03A9 C0E0      1353            push    acc
03AB C0E0      1354            push    acc
03AD 74C0      1355            mov     a,#0xC0
03AF C0E0      1356            push    acc
03B1 743F      1357            mov     a,#0x3F
03B3 C0E0      1358            push    acc
03B5 850082    1359            mov     dpl,_writeOutputBuffer_PARM_2
03B8 850183    1360            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
03BB 8502F0    1361            mov     b,(_writeOutputBuffer_PARM_2 + 2)
03BE E503      1362            mov     a,(_writeOutputBuffer_PARM_2 + 3)
03C0 120000    1363            lcall   ___fslt
03C3 AE82      1364            mov     r6,dpl
03C5 E581      1365            mov     a,sp
03C7 24FC      1366            add     a,#0xfc
03C9 F581      1367            mov     sp,a
03CB D005      1368            pop     ar5
03CD D004      1369            pop     ar4
03CF D003      1370            pop     ar3
03D1 D002      1371            pop     ar2
03D3 EE        1372            mov     a,r6
03D4 6000      1373            jz      L018002?
03D6           1374   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:311: sprintf(buffer, "Insert Capacitor");
03D6 7430      1375            mov     a,#__str_0
03D8 C0E0      1376            push    acc
03DA 74BE      1377            mov     a,#(__str_0 >> 8)
03DC C0E0      1378            push    acc
03DE 7480      1379            mov     a,#0x80
03E0 C0E0      1380            push    acc
03E2 C002      1381            push    ar2
03E4 C003      1382            push    ar3
03E6 C004      1383            push    ar4
03E8 120000    1384            lcall   _sprintf
03EB E581      1385            mov     a,sp
03ED 24FA      1386            add     a,#0xfa
03EF F581      1387            mov     sp,a
03F1           1388   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:312: return;
03F1 22        1389            ret
03F2           1390   L018002?:
03F2           1391   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:314: if(cap > 100.0)
03F2 C002      1392            push    ar2
03F4 C003      1393            push    ar3
03F6 C004      1394            push    ar4
03F8 C005      1395            push    ar5
03FA E4        1396            clr     a
03FB C0E0      1397            push    acc
03FD C0E0      1398            push    acc
03FF 74C8      1399            mov     a,#0xC8
0401 C0E0      1400            push    acc
0403 7442      1401            mov     a,#0x42
0405 C0E0      1402            push    acc
0407 850082    1403            mov     dpl,_writeOutputBuffer_PARM_2
040A 850183    1404            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
040D 8502F0    1405            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0410 E503      1406            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0412 120000    1407            lcall   ___fsgt
0415 AE82      1408            mov     r6,dpl
0417 E581      1409            mov     a,sp
0419 24FC      1410            add     a,#0xfc
041B F581      1411            mov     sp,a
041D D005      1412            pop     ar5
041F D004      1413            pop     ar4
0421 D003      1414            pop     ar3
0423 D002      1415            pop     ar2
0425 EE        1416            mov     a,r6
0426 6000      1417            jz      L018004?
0428           1418   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:316: suffix = 'u';
0428 7D75      1419            mov     r5,#0x75
042A           1420   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:317: cap = cap/1000.0;
042A C002      1421            push    ar2
042C C003      1422            push    ar3
042E C004      1423            push    ar4
0430 C005      1424            push    ar5
0432 E4        1425            clr     a
0433 C0E0      1426            push    acc
0435 C0E0      1427            push    acc
0437 747A      1428            mov     a,#0x7A
0439 C0E0      1429            push    acc
043B 7444      1430            mov     a,#0x44
043D C0E0      1431            push    acc
043F 850082    1432            mov     dpl,_writeOutputBuffer_PARM_2
0442 850183    1433            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0445 8502F0    1434            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0448 E503      1435            mov     a,(_writeOutputBuffer_PARM_2 + 3)
044A 120000    1436            lcall   ___fsdiv
044D 858200    1437            mov     _writeOutputBuffer_PARM_2,dpl
0450 858301    1438            mov     (_writeOutputBuffer_PARM_2 + 1),dph
0453 85F002    1439            mov     (_writeOutputBuffer_PARM_2 + 2),b
0456 F503      1440            mov     (_writeOutputBuffer_PARM_2 + 3),a
0458 E581      1441            mov     a,sp
045A 24FC      1442            add     a,#0xfc
045C F581      1443            mov     sp,a
045E D005      1444            pop     ar5
0460 D004      1445            pop     ar4
0462 D003      1446            pop     ar3
0464 D002      1447            pop     ar2
0466           1448   L018004?:
0466           1449   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:319: if(cap > 100.0)
0466 C002      1450            push    ar2
0468 C003      1451            push    ar3
046A C004      1452            push    ar4
046C C005      1453            push    ar5
046E E4        1454            clr     a
046F C0E0      1455            push    acc
0471 C0E0      1456            push    acc
0473 74C8      1457            mov     a,#0xC8
0475 C0E0      1458            push    acc
0477 7442      1459            mov     a,#0x42
0479 C0E0      1460            push    acc
047B 850082    1461            mov     dpl,_writeOutputBuffer_PARM_2
047E 850183    1462            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0481 8502F0    1463            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0484 E503      1464            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0486 120000    1465            lcall   ___fsgt
0489 AE82      1466            mov     r6,dpl
048B E581      1467            mov     a,sp
048D 24FC      1468            add     a,#0xfc
048F F581      1469            mov     sp,a
0491 D005      1470            pop     ar5
0493 D004      1471            pop     ar4
0495 D003      1472            pop     ar3
0497 D002      1473            pop     ar2
0499 EE        1474            mov     a,r6
049A 6000      1475            jz      L018006?
049C           1476   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:321: suffix = 'm';
049C 7D6D      1477            mov     r5,#0x6D
049E           1478   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:322: cap = cap/1000.0;
049E C002      1479            push    ar2
04A0 C003      1480            push    ar3
04A2 C004      1481            push    ar4
04A4 C005      1482            push    ar5
04A6 E4        1483            clr     a
04A7 C0E0      1484            push    acc
04A9 C0E0      1485            push    acc
04AB 747A      1486            mov     a,#0x7A
04AD C0E0      1487            push    acc
04AF 7444      1488            mov     a,#0x44
04B1 C0E0      1489            push    acc
04B3 850082    1490            mov     dpl,_writeOutputBuffer_PARM_2
04B6 850183    1491            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
04B9 8502F0    1492            mov     b,(_writeOutputBuffer_PARM_2 + 2)
04BC E503      1493            mov     a,(_writeOutputBuffer_PARM_2 + 3)
04BE 120000    1494            lcall   ___fsdiv
04C1 858200    1495            mov     _writeOutputBuffer_PARM_2,dpl
04C4 858301    1496            mov     (_writeOutputBuffer_PARM_2 + 1),dph
04C7 85F002    1497            mov     (_writeOutputBuffer_PARM_2 + 2),b
04CA F503      1498            mov     (_writeOutputBuffer_PARM_2 + 3),a
04CC E581      1499            mov     a,sp
04CE 24FC      1500            add     a,#0xfc
04D0 F581      1501            mov     sp,a
04D2 D005      1502            pop     ar5
04D4 D004      1503            pop     ar4
04D6 D003      1504            pop     ar3
04D8 D002      1505            pop     ar2
04DA           1506   L018006?:
04DA           1507   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:324: if(cap > 100.0)
04DA C002      1508            push    ar2
04DC C003      1509            push    ar3
04DE C004      1510            push    ar4
04E0 C005      1511            push    ar5
04E2 E4        1512            clr     a
04E3 C0E0      1513            push    acc
04E5 C0E0      1514            push    acc
04E7 74C8      1515            mov     a,#0xC8
04E9 C0E0      1516            push    acc
04EB 7442      1517            mov     a,#0x42
04ED C0E0      1518            push    acc
04EF 850082    1519            mov     dpl,_writeOutputBuffer_PARM_2
04F2 850183    1520            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
04F5 8502F0    1521            mov     b,(_writeOutputBuffer_PARM_2 + 2)
04F8 E503      1522            mov     a,(_writeOutputBuffer_PARM_2 + 3)
04FA 120000    1523            lcall   ___fsgt
04FD AE82      1524            mov     r6,dpl
04FF E581      1525            mov     a,sp
0501 24FC      1526            add     a,#0xfc
0503 F581      1527            mov     sp,a
0505 D005      1528            pop     ar5
0507 D004      1529            pop     ar4
0509 D003      1530            pop     ar3
050B D002      1531            pop     ar2
050D EE        1532            mov     a,r6
050E 6000      1533            jz      L018008?
0510           1534   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:326: suffix = ' ';
0510 7D20      1535            mov     r5,#0x20
0512           1536   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:327: cap = cap/1000.0;
0512 C002      1537            push    ar2
0514 C003      1538            push    ar3
0516 C004      1539            push    ar4
0518 C005      1540            push    ar5
051A E4        1541            clr     a
051B C0E0      1542            push    acc
051D C0E0      1543            push    acc
051F 747A      1544            mov     a,#0x7A
0521 C0E0      1545            push    acc
0523 7444      1546            mov     a,#0x44
0525 C0E0      1547            push    acc
0527 850082    1548            mov     dpl,_writeOutputBuffer_PARM_2
052A 850183    1549            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
052D 8502F0    1550            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0530 E503      1551            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0532 120000    1552            lcall   ___fsdiv
0535 858200    1553            mov     _writeOutputBuffer_PARM_2,dpl
0538 858301    1554            mov     (_writeOutputBuffer_PARM_2 + 1),dph
053B 85F002    1555            mov     (_writeOutputBuffer_PARM_2 + 2),b
053E F503      1556            mov     (_writeOutputBuffer_PARM_2 + 3),a
0540 E581      1557            mov     a,sp
0542 24FC      1558            add     a,#0xfc
0544 F581      1559            mov     sp,a
0546 D005      1560            pop     ar5
0548 D004      1561            pop     ar4
054A D003      1562            pop     ar3
054C D002      1563            pop     ar2
054E           1564   L018008?:
054E           1565   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:329: sprintf(buffer, "C = %.4f%cF", cap, suffix);
054E ED        1566            mov     a,r5
054F 33        1567            rlc     a
0550 95E0      1568            subb    a,acc
0552 FE        1569            mov     r6,a
0553 C005      1570            push    ar5
0555 C006      1571            push    ar6
0557 C000      1572            push    _writeOutputBuffer_PARM_2
0559 C001      1573            push    (_writeOutputBuffer_PARM_2 + 1)
055B C002      1574            push    (_writeOutputBuffer_PARM_2 + 2)
055D C003      1575            push    (_writeOutputBuffer_PARM_2 + 3)
055F 74B0      1576            mov     a,#__str_1
0561 C0E0      1577            push    acc
0563 74BF      1578            mov     a,#(__str_1 >> 8)
0565 C0E0      1579            push    acc
0567 7480      1580            mov     a,#0x80
0569 C0E0      1581            push    acc
056B C002      1582            push    ar2
056D C003      1583            push    ar3
056F C004      1584            push    ar4
0571 120000    1585            lcall   _sprintf
0574 E581      1586            mov     a,sp
0576 24F4      1587            add     a,#0xf4
0578 F581      1588            mov     sp,a
057A 22        1589            ret
057B           1590   ;------------------------------------------------------------
057B           1591   ;Allocation info for local variables in function 'main'
057B           1592   ;------------------------------------------------------------
057B           1593   ;v                         Allocated with name '_main_v_1_86'
057B           1594   ;S1VMax                    Allocated to registers 
057B           1595   ;S2VMax                    Allocated to registers 
057B           1596   ;period                    Allocated with name '_main_period_1_86'
057B           1597   ;time                      Allocated to registers 
057B           1598   ;------------------------------------------------------------
057B           1599   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:332: void main (void)
057B           1600   ;        -----------------------------------------
057B           1601   ;         function main
057B           1602   ;        -----------------------------------------
057B           1603   _main:
057B           1604   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:340: waitms(500); // Give PuTTy a chance to start before sending
057B 9001F4    1605            mov     dptr,#0x01F4
057E 120000    1606            lcall   _waitms
0581           1607   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:341: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0581 74F0      1608            mov     a,#__str_2
0583 C0E0      1609            push    acc
0585 74BF      1610            mov     a,#(__str_2 >> 8)
0587 C0E0      1611            push    acc
0589 7480      1612            mov     a,#0x80
058B C0E0      1613            push    acc
058D 120000    1614            lcall   _printf
0590 1581      1615            dec     sp
0592 1581      1616            dec     sp
0594 1581      1617            dec     sp
0596           1618   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:346: __FILE__, __DATE__, __TIME__);
0596           1619   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:345: "Compiled: %s, %s\n\n",
0596 7470      1620            mov     a,#__str_6
0598 C0E0      1621            push    acc
059A 74C0      1622            mov     a,#(__str_6 >> 8)
059C C0E0      1623            push    acc
059E 7480      1624            mov     a,#0x80
05A0 C0E0      1625            push    acc
05A2 74B0      1626            mov     a,#__str_5
05A4 C0E0      1627            push    acc
05A6 74C0      1628            mov     a,#(__str_5 >> 8)
05A8 C0E0      1629            push    acc
05AA 7480      1630            mov     a,#0x80
05AC C0E0      1631            push    acc
05AE 74F0      1632            mov     a,#__str_4
05B0 C0E0      1633            push    acc
05B2 74C0      1634            mov     a,#(__str_4 >> 8)
05B4 C0E0      1635            push    acc
05B6 7480      1636            mov     a,#0x80
05B8 C0E0      1637            push    acc
05BA 7430      1638            mov     a,#__str_3
05BC C0E0      1639            push    acc
05BE 74C1      1640            mov     a,#(__str_3 >> 8)
05C0 C0E0      1641            push    acc
05C2 7480      1642            mov     a,#0x80
05C4 C0E0      1643            push    acc
05C6 120000    1644            lcall   _printf
05C9 E581      1645            mov     a,sp
05CB 24F4      1646            add     a,#0xf4
05CD F581      1647            mov     sp,a
05CF           1648   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:349: InitADC();
05CF 120000    1649            lcall   _InitADC
05D2           1650   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:351: while(1)
05D2           1651   L019002?:
05D2           1652   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:354: printf("%lf\n", getHalfPeriod());
05D2 120000    1653            lcall   _getHalfPeriod
05D5 AA82      1654            mov     r2,dpl
05D7 AB83      1655            mov     r3,dph
05D9 ACF0      1656            mov     r4,b
05DB FD        1657            mov     r5,a
05DC C002      1658            push    ar2
05DE C003      1659            push    ar3
05E0 C004      1660            push    ar4
05E2 C005      1661            push    ar5
05E4 74B0      1662            mov     a,#__str_7
05E6 C0E0      1663            push    acc
05E8 74C1      1664            mov     a,#(__str_7 >> 8)
05EA C0E0      1665            push    acc
05EC 7480      1666            mov     a,#0x80
05EE C0E0      1667            push    acc
05F0 120000    1668            lcall   _printf
05F3 E581      1669            mov     a,sp
05F5 24F9      1670            add     a,#0xf9
05F7 F581      1671            mov     sp,a
05F9 8000      1672            sjmp    L019002?
05FB           1673   ;------------------------------------------------------------
05FB           1674   ;Allocation info for local variables in function 'getHalfPeriod'
05FB           1675   ;------------------------------------------------------------
05FB           1676   ;halfPeriod                Allocated to registers r2 r3 r4 r5 
05FB           1677   ;overflow_count            Allocated to registers r2 r3 
05FB           1678   ;------------------------------------------------------------
05FB           1679   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:358: float getHalfPeriod() {
05FB           1680   ;        -----------------------------------------
05FB           1681   ;         function getHalfPeriod
05FB           1682   ;        -----------------------------------------
05FB           1683   _getHalfPeriod:
05FB           1684   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:363: TR0 = 0;
05FB C28C      1685            clr     _TR0
05FD           1686   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:364: TMOD &= 0xF0;
05FD 5389F0    1687            anl     _TMOD,#0xF0
0600           1688   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:365: TMOD |= 0x01;
0600 438901    1689            orl     _TMOD,#0x01
0603           1690   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:366: TH0 = 0;
0603 758C00    1691            mov     _TH0,#0x00
0606           1692   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:367: TL0 = 0;
0606 758A00    1693            mov     _TL0,#0x00
0609           1694   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:368: TF0 = 0;
0609 C28D      1695            clr     _TF0
060B           1696   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:371: while (P0_1);
060B           1697   L020001?:
060B 2081F0    1698            jb      _P0_1,L020001?
060E           1699   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:372: while (!P0_1);
060E           1700   L020004?:
060E 308130    1701            jnb     _P0_1,L020004?
0611           1702   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:375: TR0 = 1;
0611 D28C      1703            setb    _TR0
0613           1704   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:376: while (P0_1) {
0613 7A00      1705            mov     r2,#0x00
0615 7B00      1706            mov     r3,#0x00
0617           1707   L020009?:
0617 3081B0    1708            jnb     _P0_1,L020011?
061A           1709   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:377: if (TF0) {
061A           1710   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:378: TF0 = 0;
061A 108DF0    1711            jbc     _TF0,L020024?
061D 8000      1712            sjmp    L020009?
061F           1713   L020024?:
061F           1714   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:379: overflow_count++;
061F 0A        1715            inc     r2
0620 BA0070    1716            cjne    r2,#0x00,L020009?
0623 0B        1717            inc     r3
0624 8000      1718            sjmp    L020009?
0626           1719   L020011?:
0626           1720   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:384: TR0 = 0;
0626 C28C      1721            clr     _TR0
0628           1722   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:385: halfPeriod = (overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)*1000000L;
0628 8A82      1723            mov     dpl,r2
062A 8B83      1724            mov     dph,r3
062C 120000    1725            lcall   ___uint2fs
062F AA82      1726            mov     r2,dpl
0631 AB83      1727            mov     r3,dph
0633 ACF0      1728            mov     r4,b
0635 FD        1729            mov     r5,a
0636 C002      1730            push    ar2
0638 C003      1731            push    ar3
063A C004      1732            push    ar4
063C C005      1733            push    ar5
063E 900000    1734            mov     dptr,#0x0000
0641 75F080    1735            mov     b,#0x80
0644 7447      1736            mov     a,#0x47
0646 120000    1737            lcall   ___fsmul
0649 AA82      1738            mov     r2,dpl
064B AB83      1739            mov     r3,dph
064D ACF0      1740            mov     r4,b
064F FD        1741            mov     r5,a
0650 E581      1742            mov     a,sp
0652 24FC      1743            add     a,#0xfc
0654 F581      1744            mov     sp,a
0656 858C82    1745            mov     dpl,_TH0
0659 C002      1746            push    ar2
065B C003      1747            push    ar3
065D C004      1748            push    ar4
065F C005      1749            push    ar5
0661 120000    1750            lcall   ___uchar2fs
0664 AE82      1751            mov     r6,dpl
0666 AF83      1752            mov     r7,dph
0668 A8F0      1753            mov     r0,b
066A F9        1754            mov     r1,a
066B C006      1755            push    ar6
066D C007      1756            push    ar7
066F C000      1757            push    ar0
0671 C001      1758            push    ar1
0673 900000    1759            mov     dptr,#0x0000
0676 75F080    1760            mov     b,#0x80
0679 7443      1761            mov     a,#0x43
067B 120000    1762            lcall   ___fsmul
067E AE82      1763            mov     r6,dpl
0680 AF83      1764            mov     r7,dph
0682 A8F0      1765            mov     r0,b
0684 F9        1766            mov     r1,a
0685 E581      1767            mov     a,sp
0687 24FC      1768            add     a,#0xfc
0689 F581      1769            mov     sp,a
068B D005      1770            pop     ar5
068D D004      1771            pop     ar4
068F D003      1772            pop     ar3
0691 D002      1773            pop     ar2
0693 C006      1774            push    ar6
0695 C007      1775            push    ar7
0697 C000      1776            push    ar0
0699 C001      1777            push    ar1
069B 8A82      1778            mov     dpl,r2
069D 8B83      1779            mov     dph,r3
069F 8CF0      1780            mov     b,r4
06A1 ED        1781            mov     a,r5
06A2 120000    1782            lcall   ___fsadd
06A5 AA82      1783            mov     r2,dpl
06A7 AB83      1784            mov     r3,dph
06A9 ACF0      1785            mov     r4,b
06AB FD        1786            mov     r5,a
06AC E581      1787            mov     a,sp
06AE 24FC      1788            add     a,#0xfc
06B0 F581      1789            mov     sp,a
06B2 AE8A      1790            mov     r6,_TL0
06B4 7F00      1791            mov     r7,#0x00
06B6 8E82      1792            mov     dpl,r6
06B8 8F83      1793            mov     dph,r7
06BA C002      1794            push    ar2
06BC C003      1795            push    ar3
06BE C004      1796            push    ar4
06C0 C005      1797            push    ar5
06C2 120000    1798            lcall   ___sint2fs
06C5 AE82      1799            mov     r6,dpl
06C7 AF83      1800            mov     r7,dph
06C9 A8F0      1801            mov     r0,b
06CB F9        1802            mov     r1,a
06CC D005      1803            pop     ar5
06CE D004      1804            pop     ar4
06D0 D003      1805            pop     ar3
06D2 D002      1806            pop     ar2
06D4 C006      1807            push    ar6
06D6 C007      1808            push    ar7
06D8 C000      1809            push    ar0
06DA C001      1810            push    ar1
06DC 8A82      1811            mov     dpl,r2
06DE 8B83      1812            mov     dph,r3
06E0 8CF0      1813            mov     b,r4
06E2 ED        1814            mov     a,r5
06E3 120000    1815            lcall   ___fsadd
06E6 AA82      1816            mov     r2,dpl
06E8 AB83      1817            mov     r3,dph
06EA ACF0      1818            mov     r4,b
06EC FD        1819            mov     r5,a
06ED E581      1820            mov     a,sp
06EF 24FC      1821            add     a,#0xfc
06F1 F581      1822            mov     sp,a
06F3 C002      1823            push    ar2
06F5 C003      1824            push    ar3
06F7 C004      1825            push    ar4
06F9 C005      1826            push    ar5
06FB 90AAAB    1827            mov     dptr,#0xAAAB
06FE 75F02A    1828            mov     b,#0x2A
0701 743E      1829            mov     a,#0x3E
0703 120000    1830            lcall   ___fsmul
0706 AA82      1831            mov     r2,dpl
0708 AB83      1832            mov     r3,dph
070A ACF0      1833            mov     r4,b
070C FD        1834            mov     r5,a
070D E581      1835            mov     a,sp
070F 24FC      1836            add     a,#0xfc
0711 F581      1837            mov     sp,a
0713           1838   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB5-Phasor Analysis\EFM8_ADC.c:386: return halfPeriod;
0713 8A82      1839            mov     dpl,r2
0715 8B83      1840            mov     dph,r3
0717 8CF0      1841            mov     b,r4
0719 ED        1842            mov     a,r5
071A 22        1843            ret
071B           1844            rseg R_CSEG
071B           1845   
0000           1846            rseg R_XINIT
0000           1847   
0000           1848            rseg R_CONST
0000           1849   __str_0:
0000 496E7365  1850            db 'Insert Capacitor'
     72742043
     61706163
     69746F72
0010 00        1851            db 0x00
0011           1852   __str_1:
0011 43203D20  1853            db 'C = %.4f%cF'
     252E3466
     256346
001C 00        1854            db 0x00
001D           1855   __str_2:
001D 1B        1856            db 0x1B
001E 5B324A    1857            db '[2J'
0021 00        1858            db 0x00
0022           1859   __str_3:
0022 41444320  1860            db 'ADC test program'
     74657374
     2070726F
     6772616D
0032 0A        1861            db 0x0A
0033 46696C65  1862            db 'File: %s'
     3A202573
003B 0A        1863            db 0x0A
003C 436F6D70  1864            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
004C 0A        1865            db 0x0A
004D 0A        1866            db 0x0A
004E 00        1867            db 0x00
004F           1868   __str_4:
004F 433A      1869            db 'C:'
0051 5C        1870            db 0x5C
0052 55736572  1871            db 'Users'
     73
0057 5C        1872            db 0x5C
0058 6B636772  1873            db 'kcgro'
     6F
005D 5C        1874            db 0x5C
005E 446F6375  1875            db 'Documents'
     6D656E74
     73
0067 5C        1876            db 0x5C
0068 47697448  1877            db 'GitHub'
     7562
006E 5C        1878            db 0x5C
006F 454C4543  1879            db 'ELEC291'
     323931
0076 5C        1880            db 0x5C
0077 4C414235  1881            db 'LAB5-Phasor Analysis'
     2D506861
     736F7220
     416E616C
     79736973
008B 5C        1882            db 0x5C
008C 45464D38  1883            db 'EFM8_ADC.c'
     5F414443
     2E63
0096 00        1884            db 0x00
0097           1885   __str_5:
0097 4D617220  1886            db 'Mar  7 2023'
     20372032
     303233
00A2 00        1887            db 0x00
00A3           1888   __str_6:
00A3 32323A30  1889            db '22:08:23'
     383A3233
00AB 00        1890            db 0x00
00AC           1891   __str_7:
00AC 256C66    1892            db '%lf'
00AF 0A        1893            db 0x0A
00B0 00        1894            db 0x00
00B1           1895   
0003           1896            CSEG
0003           1897   
0003           1898   end

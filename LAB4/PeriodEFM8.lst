0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Feb 28 14:59:27 2023
0000              5   ;--------------------------------------------------------
                  5   $name PeriodEFM8
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _writeOutputBuffer
0000             29            public _PtoC
0000             30            public _TIMER0_Init
0000             31            public _getsn
0000             32            public _LCDprint
0000             33            public _LCD_4BIT
0000             34            public _WriteCommand
0000             35            public _WriteData
0000             36            public _LCD_byte
0000             37            public _LCD_pulse
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public __c51_external_startup
0000             41            public _LCDprint_PARM_3
0000             42            public _writeOutputBuffer_PARM_2
0000             43            public _getsn_PARM_2
0000             44            public _LCDprint_PARM_2
0000             45            public _overflow_count
0000             46   ;--------------------------------------------------------
0000             47   ; Special Function Registers
0000             48   ;--------------------------------------------------------
0000             49   _ACC            DATA 0xe0
0000             50   _ADC0ASAH       DATA 0xb6
0000             51   _ADC0ASAL       DATA 0xb5
0000             52   _ADC0ASCF       DATA 0xa1
0000             53   _ADC0ASCT       DATA 0xc7
0000             54   _ADC0CF0        DATA 0xbc
0000             55   _ADC0CF1        DATA 0xb9
0000             56   _ADC0CF2        DATA 0xdf
0000             57   _ADC0CN0        DATA 0xe8
0000             58   _ADC0CN1        DATA 0xb2
0000             59   _ADC0CN2        DATA 0xb3
0000             60   _ADC0GTH        DATA 0xc4
0000             61   _ADC0GTL        DATA 0xc3
0000             62   _ADC0H          DATA 0xbe
0000             63   _ADC0L          DATA 0xbd
0000             64   _ADC0LTH        DATA 0xc6
0000             65   _ADC0LTL        DATA 0xc5
0000             66   _ADC0MX         DATA 0xbb
0000             67   _B              DATA 0xf0
0000             68   _CKCON0         DATA 0x8e
0000             69   _CKCON1         DATA 0xa6
0000             70   _CLEN0          DATA 0xc6
0000             71   _CLIE0          DATA 0xc7
0000             72   _CLIF0          DATA 0xe8
0000             73   _CLKSEL         DATA 0xa9
0000             74   _CLOUT0         DATA 0xd1
0000             75   _CLU0CF         DATA 0xb1
0000             76   _CLU0FN         DATA 0xaf
0000             77   _CLU0MX         DATA 0x84
0000             78   _CLU1CF         DATA 0xb3
0000             79   _CLU1FN         DATA 0xb2
0000             80   _CLU1MX         DATA 0x85
0000             81   _CLU2CF         DATA 0xb6
0000             82   _CLU2FN         DATA 0xb5
0000             83   _CLU2MX         DATA 0x91
0000             84   _CLU3CF         DATA 0xbf
0000             85   _CLU3FN         DATA 0xbe
0000             86   _CLU3MX         DATA 0xae
0000             87   _CMP0CN0        DATA 0x9b
0000             88   _CMP0CN1        DATA 0x99
0000             89   _CMP0MD         DATA 0x9d
0000             90   _CMP0MX         DATA 0x9f
0000             91   _CMP1CN0        DATA 0xbf
0000             92   _CMP1CN1        DATA 0xac
0000             93   _CMP1MD         DATA 0xab
0000             94   _CMP1MX         DATA 0xaa
0000             95   _CRC0CN0        DATA 0xce
0000             96   _CRC0CN1        DATA 0x86
0000             97   _CRC0CNT        DATA 0xd3
0000             98   _CRC0DAT        DATA 0xcb
0000             99   _CRC0FLIP       DATA 0xcf
0000            100   _CRC0IN         DATA 0xca
0000            101   _CRC0ST         DATA 0xd2
0000            102   _DAC0CF0        DATA 0x91
0000            103   _DAC0CF1        DATA 0x92
0000            104   _DAC0H          DATA 0x85
0000            105   _DAC0L          DATA 0x84
0000            106   _DAC1CF0        DATA 0x93
0000            107   _DAC1CF1        DATA 0x94
0000            108   _DAC1H          DATA 0x8a
0000            109   _DAC1L          DATA 0x89
0000            110   _DAC2CF0        DATA 0x95
0000            111   _DAC2CF1        DATA 0x96
0000            112   _DAC2H          DATA 0x8c
0000            113   _DAC2L          DATA 0x8b
0000            114   _DAC3CF0        DATA 0x9a
0000            115   _DAC3CF1        DATA 0x9c
0000            116   _DAC3H          DATA 0x8e
0000            117   _DAC3L          DATA 0x8d
0000            118   _DACGCF0        DATA 0x88
0000            119   _DACGCF1        DATA 0x98
0000            120   _DACGCF2        DATA 0xa2
0000            121   _DERIVID        DATA 0xad
0000            122   _DEVICEID       DATA 0xb5
0000            123   _DPH            DATA 0x83
0000            124   _DPL            DATA 0x82
0000            125   _EIE1           DATA 0xe6
0000            126   _EIE2           DATA 0xf3
0000            127   _EIP1           DATA 0xbb
0000            128   _EIP1H          DATA 0xee
0000            129   _EIP2           DATA 0xed
0000            130   _EIP2H          DATA 0xf6
0000            131   _EMI0CN         DATA 0xe7
0000            132   _FLKEY          DATA 0xb7
0000            133   _HFO0CAL        DATA 0xc7
0000            134   _HFO1CAL        DATA 0xd6
0000            135   _HFOCN          DATA 0xef
0000            136   _I2C0ADM        DATA 0xff
0000            137   _I2C0CN0        DATA 0xba
0000            138   _I2C0DIN        DATA 0xbc
0000            139   _I2C0DOUT       DATA 0xbb
0000            140   _I2C0FCN0       DATA 0xad
0000            141   _I2C0FCN1       DATA 0xab
0000            142   _I2C0FCT        DATA 0xf5
0000            143   _I2C0SLAD       DATA 0xbd
0000            144   _I2C0STAT       DATA 0xb9
0000            145   _IE             DATA 0xa8
0000            146   _IP             DATA 0xb8
0000            147   _IPH            DATA 0xf2
0000            148   _IT01CF         DATA 0xe4
0000            149   _LFO0CN         DATA 0xb1
0000            150   _P0             DATA 0x80
0000            151   _P0MASK         DATA 0xfe
0000            152   _P0MAT          DATA 0xfd
0000            153   _P0MDIN         DATA 0xf1
0000            154   _P0MDOUT        DATA 0xa4
0000            155   _P0SKIP         DATA 0xd4
0000            156   _P1             DATA 0x90
0000            157   _P1MASK         DATA 0xee
0000            158   _P1MAT          DATA 0xed
0000            159   _P1MDIN         DATA 0xf2
0000            160   _P1MDOUT        DATA 0xa5
0000            161   _P1SKIP         DATA 0xd5
0000            162   _P2             DATA 0xa0
0000            163   _P2MASK         DATA 0xfc
0000            164   _P2MAT          DATA 0xfb
0000            165   _P2MDIN         DATA 0xf3
0000            166   _P2MDOUT        DATA 0xa6
0000            167   _P2SKIP         DATA 0xcc
0000            168   _P3             DATA 0xb0
0000            169   _P3MDIN         DATA 0xf4
0000            170   _P3MDOUT        DATA 0x9c
0000            171   _PCA0CENT       DATA 0x9e
0000            172   _PCA0CLR        DATA 0x9c
0000            173   _PCA0CN0        DATA 0xd8
0000            174   _PCA0CPH0       DATA 0xfc
0000            175   _PCA0CPH1       DATA 0xea
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPH3       DATA 0xf5
0000            178   _PCA0CPH4       DATA 0x85
0000            179   _PCA0CPH5       DATA 0xde
0000            180   _PCA0CPL0       DATA 0xfb
0000            181   _PCA0CPL1       DATA 0xe9
0000            182   _PCA0CPL2       DATA 0xeb
0000            183   _PCA0CPL3       DATA 0xf4
0000            184   _PCA0CPL4       DATA 0x84
0000            185   _PCA0CPL5       DATA 0xdd
0000            186   _PCA0CPM0       DATA 0xda
0000            187   _PCA0CPM1       DATA 0xdb
0000            188   _PCA0CPM2       DATA 0xdc
0000            189   _PCA0CPM3       DATA 0xae
0000            190   _PCA0CPM4       DATA 0xaf
0000            191   _PCA0CPM5       DATA 0xcc
0000            192   _PCA0H          DATA 0xfa
0000            193   _PCA0L          DATA 0xf9
0000            194   _PCA0MD         DATA 0xd9
0000            195   _PCA0POL        DATA 0x96
0000            196   _PCA0PWM        DATA 0xf7
0000            197   _PCON0          DATA 0x87
0000            198   _PCON1          DATA 0xcd
0000            199   _PFE0CN         DATA 0xc1
0000            200   _PRTDRV         DATA 0xf6
0000            201   _PSCTL          DATA 0x8f
0000            202   _PSTAT0         DATA 0xaa
0000            203   _PSW            DATA 0xd0
0000            204   _REF0CN         DATA 0xd1
0000            205   _REG0CN         DATA 0xc9
0000            206   _REVID          DATA 0xb6
0000            207   _RSTSRC         DATA 0xef
0000            208   _SBCON1         DATA 0x94
0000            209   _SBRLH1         DATA 0x96
0000            210   _SBRLL1         DATA 0x95
0000            211   _SBUF           DATA 0x99
0000            212   _SBUF0          DATA 0x99
0000            213   _SBUF1          DATA 0x92
0000            214   _SCON           DATA 0x98
0000            215   _SCON0          DATA 0x98
0000            216   _SCON1          DATA 0xc8
0000            217   _SFRPAGE        DATA 0xa7
0000            218   _SFRPGCN        DATA 0xbc
0000            219   _SFRSTACK       DATA 0xd7
0000            220   _SMB0ADM        DATA 0xd6
0000            221   _SMB0ADR        DATA 0xd7
0000            222   _SMB0CF         DATA 0xc1
0000            223   _SMB0CN0        DATA 0xc0
0000            224   _SMB0DAT        DATA 0xc2
0000            225   _SMB0FCN0       DATA 0xc3
0000            226   _SMB0FCN1       DATA 0xc4
0000            227   _SMB0FCT        DATA 0xef
0000            228   _SMB0RXLN       DATA 0xc5
0000            229   _SMB0TC         DATA 0xac
0000            230   _SMOD1          DATA 0x93
0000            231   _SP             DATA 0x81
0000            232   _SPI0CFG        DATA 0xa1
0000            233   _SPI0CKR        DATA 0xa2
0000            234   _SPI0CN0        DATA 0xf8
0000            235   _SPI0DAT        DATA 0xa3
0000            236   _SPI0FCN0       DATA 0x9a
0000            237   _SPI0FCN1       DATA 0x9b
0000            238   _SPI0FCT        DATA 0xf7
0000            239   _SPI0PCF        DATA 0xdf
0000            240   _TCON           DATA 0x88
0000            241   _TH0            DATA 0x8c
0000            242   _TH1            DATA 0x8d
0000            243   _TL0            DATA 0x8a
0000            244   _TL1            DATA 0x8b
0000            245   _TMOD           DATA 0x89
0000            246   _TMR2CN0        DATA 0xc8
0000            247   _TMR2CN1        DATA 0xfd
0000            248   _TMR2H          DATA 0xcf
0000            249   _TMR2L          DATA 0xce
0000            250   _TMR2RLH        DATA 0xcb
0000            251   _TMR2RLL        DATA 0xca
0000            252   _TMR3CN0        DATA 0x91
0000            253   _TMR3CN1        DATA 0xfe
0000            254   _TMR3H          DATA 0x95
0000            255   _TMR3L          DATA 0x94
0000            256   _TMR3RLH        DATA 0x93
0000            257   _TMR3RLL        DATA 0x92
0000            258   _TMR4CN0        DATA 0x98
0000            259   _TMR4CN1        DATA 0xff
0000            260   _TMR4H          DATA 0xa5
0000            261   _TMR4L          DATA 0xa4
0000            262   _TMR4RLH        DATA 0xa3
0000            263   _TMR4RLL        DATA 0xa2
0000            264   _TMR5CN0        DATA 0xc0
0000            265   _TMR5CN1        DATA 0xf1
0000            266   _TMR5H          DATA 0xd5
0000            267   _TMR5L          DATA 0xd4
0000            268   _TMR5RLH        DATA 0xd3
0000            269   _TMR5RLL        DATA 0xd2
0000            270   _UART0PCF       DATA 0xd9
0000            271   _UART1FCN0      DATA 0x9d
0000            272   _UART1FCN1      DATA 0xd8
0000            273   _UART1FCT       DATA 0xfa
0000            274   _UART1LIN       DATA 0x9e
0000            275   _UART1PCF       DATA 0xda
0000            276   _VDM0CN         DATA 0xff
0000            277   _WDTCN          DATA 0x97
0000            278   _XBR0           DATA 0xe1
0000            279   _XBR1           DATA 0xe2
0000            280   _XBR2           DATA 0xe3
0000            281   _XOSC0CN        DATA 0x86
0000            282   _DPTR           DATA 0x8382
0000            283   _TMR2RL         DATA 0xcbca
0000            284   _TMR3RL         DATA 0x9392
0000            285   _TMR4RL         DATA 0xa3a2
0000            286   _TMR5RL         DATA 0xd3d2
0000            287   _TMR0           DATA 0x8c8a
0000            288   _TMR1           DATA 0x8d8b
0000            289   _TMR2           DATA 0xcfce
0000            290   _TMR3           DATA 0x9594
0000            291   _TMR4           DATA 0xa5a4
0000            292   _TMR5           DATA 0xd5d4
0000            293   _SBRL1          DATA 0x9695
0000            294   _PCA0           DATA 0xfaf9
0000            295   _PCA0CP0        DATA 0xfcfb
0000            296   _PCA0CP1        DATA 0xeae9
0000            297   _PCA0CP2        DATA 0xeceb
0000            298   _PCA0CP3        DATA 0xf5f4
0000            299   _PCA0CP4        DATA 0x8584
0000            300   _PCA0CP5        DATA 0xdedd
0000            301   _ADC0ASA        DATA 0xb6b5
0000            302   _ADC0GT         DATA 0xc4c3
0000            303   _ADC0           DATA 0xbebd
0000            304   _ADC0LT         DATA 0xc6c5
0000            305   _DAC0           DATA 0x8584
0000            306   _DAC1           DATA 0x8a89
0000            307   _DAC2           DATA 0x8c8b
0000            308   _DAC3           DATA 0x8e8d
0000            309   ;--------------------------------------------------------
0000            310   ; special function bits
0000            311   ;--------------------------------------------------------
0000            312   _ACC_0          BIT 0xe0
0000            313   _ACC_1          BIT 0xe1
0000            314   _ACC_2          BIT 0xe2
0000            315   _ACC_3          BIT 0xe3
0000            316   _ACC_4          BIT 0xe4
0000            317   _ACC_5          BIT 0xe5
0000            318   _ACC_6          BIT 0xe6
0000            319   _ACC_7          BIT 0xe7
0000            320   _TEMPE          BIT 0xe8
0000            321   _ADGN0          BIT 0xe9
0000            322   _ADGN1          BIT 0xea
0000            323   _ADWINT         BIT 0xeb
0000            324   _ADBUSY         BIT 0xec
0000            325   _ADINT          BIT 0xed
0000            326   _IPOEN          BIT 0xee
0000            327   _ADEN           BIT 0xef
0000            328   _B_0            BIT 0xf0
0000            329   _B_1            BIT 0xf1
0000            330   _B_2            BIT 0xf2
0000            331   _B_3            BIT 0xf3
0000            332   _B_4            BIT 0xf4
0000            333   _B_5            BIT 0xf5
0000            334   _B_6            BIT 0xf6
0000            335   _B_7            BIT 0xf7
0000            336   _C0FIF          BIT 0xe8
0000            337   _C0RIF          BIT 0xe9
0000            338   _C1FIF          BIT 0xea
0000            339   _C1RIF          BIT 0xeb
0000            340   _C2FIF          BIT 0xec
0000            341   _C2RIF          BIT 0xed
0000            342   _C3FIF          BIT 0xee
0000            343   _C3RIF          BIT 0xef
0000            344   _D1SRC0         BIT 0x88
0000            345   _D1SRC1         BIT 0x89
0000            346   _D1AMEN         BIT 0x8a
0000            347   _D01REFSL       BIT 0x8b
0000            348   _D3SRC0         BIT 0x8c
0000            349   _D3SRC1         BIT 0x8d
0000            350   _D3AMEN         BIT 0x8e
0000            351   _D23REFSL       BIT 0x8f
0000            352   _D0UDIS         BIT 0x98
0000            353   _D1UDIS         BIT 0x99
0000            354   _D2UDIS         BIT 0x9a
0000            355   _D3UDIS         BIT 0x9b
0000            356   _EX0            BIT 0xa8
0000            357   _ET0            BIT 0xa9
0000            358   _EX1            BIT 0xaa
0000            359   _ET1            BIT 0xab
0000            360   _ES0            BIT 0xac
0000            361   _ET2            BIT 0xad
0000            362   _ESPI0          BIT 0xae
0000            363   _EA             BIT 0xaf
0000            364   _PX0            BIT 0xb8
0000            365   _PT0            BIT 0xb9
0000            366   _PX1            BIT 0xba
0000            367   _PT1            BIT 0xbb
0000            368   _PS0            BIT 0xbc
0000            369   _PT2            BIT 0xbd
0000            370   _PSPI0          BIT 0xbe
0000            371   _P0_0           BIT 0x80
0000            372   _P0_1           BIT 0x81
0000            373   _P0_2           BIT 0x82
0000            374   _P0_3           BIT 0x83
0000            375   _P0_4           BIT 0x84
0000            376   _P0_5           BIT 0x85
0000            377   _P0_6           BIT 0x86
0000            378   _P0_7           BIT 0x87
0000            379   _P1_0           BIT 0x90
0000            380   _P1_1           BIT 0x91
0000            381   _P1_2           BIT 0x92
0000            382   _P1_3           BIT 0x93
0000            383   _P1_4           BIT 0x94
0000            384   _P1_5           BIT 0x95
0000            385   _P1_6           BIT 0x96
0000            386   _P1_7           BIT 0x97
0000            387   _P2_0           BIT 0xa0
0000            388   _P2_1           BIT 0xa1
0000            389   _P2_2           BIT 0xa2
0000            390   _P2_3           BIT 0xa3
0000            391   _P2_4           BIT 0xa4
0000            392   _P2_5           BIT 0xa5
0000            393   _P2_6           BIT 0xa6
0000            394   _P3_0           BIT 0xb0
0000            395   _P3_1           BIT 0xb1
0000            396   _P3_2           BIT 0xb2
0000            397   _P3_3           BIT 0xb3
0000            398   _P3_4           BIT 0xb4
0000            399   _P3_7           BIT 0xb7
0000            400   _CCF0           BIT 0xd8
0000            401   _CCF1           BIT 0xd9
0000            402   _CCF2           BIT 0xda
0000            403   _CCF3           BIT 0xdb
0000            404   _CCF4           BIT 0xdc
0000            405   _CCF5           BIT 0xdd
0000            406   _CR             BIT 0xde
0000            407   _CF             BIT 0xdf
0000            408   _PARITY         BIT 0xd0
0000            409   _F1             BIT 0xd1
0000            410   _OV             BIT 0xd2
0000            411   _RS0            BIT 0xd3
0000            412   _RS1            BIT 0xd4
0000            413   _F0             BIT 0xd5
0000            414   _AC             BIT 0xd6
0000            415   _CY             BIT 0xd7
0000            416   _RI             BIT 0x98
0000            417   _TI             BIT 0x99
0000            418   _RB8            BIT 0x9a
0000            419   _TB8            BIT 0x9b
0000            420   _REN            BIT 0x9c
0000            421   _CE             BIT 0x9d
0000            422   _SMODE          BIT 0x9e
0000            423   _RI1            BIT 0xc8
0000            424   _TI1            BIT 0xc9
0000            425   _RBX1           BIT 0xca
0000            426   _TBX1           BIT 0xcb
0000            427   _REN1           BIT 0xcc
0000            428   _PERR1          BIT 0xcd
0000            429   _OVR1           BIT 0xce
0000            430   _SI             BIT 0xc0
0000            431   _ACK            BIT 0xc1
0000            432   _ARBLOST        BIT 0xc2
0000            433   _ACKRQ          BIT 0xc3
0000            434   _STO            BIT 0xc4
0000            435   _STA            BIT 0xc5
0000            436   _TXMODE         BIT 0xc6
0000            437   _MASTER         BIT 0xc7
0000            438   _SPIEN          BIT 0xf8
0000            439   _TXNF           BIT 0xf9
0000            440   _NSSMD0         BIT 0xfa
0000            441   _NSSMD1         BIT 0xfb
0000            442   _RXOVRN         BIT 0xfc
0000            443   _MODF           BIT 0xfd
0000            444   _WCOL           BIT 0xfe
0000            445   _SPIF           BIT 0xff
0000            446   _IT0            BIT 0x88
0000            447   _IE0            BIT 0x89
0000            448   _IT1            BIT 0x8a
0000            449   _IE1            BIT 0x8b
0000            450   _TR0            BIT 0x8c
0000            451   _TF0            BIT 0x8d
0000            452   _TR1            BIT 0x8e
0000            453   _TF1            BIT 0x8f
0000            454   _T2XCLK0        BIT 0xc8
0000            455   _T2XCLK1        BIT 0xc9
0000            456   _TR2            BIT 0xca
0000            457   _T2SPLIT        BIT 0xcb
0000            458   _TF2CEN         BIT 0xcc
0000            459   _TF2LEN         BIT 0xcd
0000            460   _TF2L           BIT 0xce
0000            461   _TF2H           BIT 0xcf
0000            462   _T4XCLK0        BIT 0x98
0000            463   _T4XCLK1        BIT 0x99
0000            464   _TR4            BIT 0x9a
0000            465   _T4SPLIT        BIT 0x9b
0000            466   _TF4CEN         BIT 0x9c
0000            467   _TF4LEN         BIT 0x9d
0000            468   _TF4L           BIT 0x9e
0000            469   _TF4H           BIT 0x9f
0000            470   _T5XCLK0        BIT 0xc0
0000            471   _T5XCLK1        BIT 0xc1
0000            472   _TR5            BIT 0xc2
0000            473   _T5SPLIT        BIT 0xc3
0000            474   _TF5CEN         BIT 0xc4
0000            475   _TF5LEN         BIT 0xc5
0000            476   _TF5L           BIT 0xc6
0000            477   _TF5H           BIT 0xc7
0000            478   _RIE            BIT 0xd8
0000            479   _RXTO0          BIT 0xd9
0000            480   _RXTO1          BIT 0xda
0000            481   _RFRQ           BIT 0xdb
0000            482   _TIE            BIT 0xdc
0000            483   _TXHOLD         BIT 0xdd
0000            484   _TXNF1          BIT 0xde
0000            485   _TFRQ           BIT 0xdf
0000            486   ;--------------------------------------------------------
0000            487   ; overlayable register banks
0000            488   ;--------------------------------------------------------
0000            489            rbank0 segment data overlay
0000            490   ;--------------------------------------------------------
0000            491   ; internal ram data
0000            492   ;--------------------------------------------------------
0000            493            rseg R_DSEG
0000            494   _overflow_count:
0000            495            ds 1
0001            496   _LCDprint_PARM_2:
0001            497            ds 1
0002            498   _getsn_PARM_2:
0002            499            ds 2
0004            500   _getsn_buff_1_43:
0004            501            ds 3
0007            502   _getsn_sloc0_1_0:
0007            503            ds 2
0009            504   _writeOutputBuffer_PARM_2:
0009            505            ds 4
000D            506   _main_output_buffer_1_57:
000D            507            ds 20
0021            508   ;--------------------------------------------------------
0021            509   ; overlayable items in internal ram 
0021            510   ;--------------------------------------------------------
0000            511            rseg    R_OSEG
0000            512   ;--------------------------------------------------------
0000            513   ; indirectly addressable internal ram data
0000            514   ;--------------------------------------------------------
0000            515            rseg R_ISEG
0000            516   ;--------------------------------------------------------
0000            517   ; absolute internal ram data
0000            518   ;--------------------------------------------------------
0000            519            DSEG
0000            520   ;--------------------------------------------------------
0000            521   ; bit data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_BSEG
0000            524   _LCDprint_PARM_3:
0000            525            DBIT    1
0001            526   ;--------------------------------------------------------
0001            527   ; paged external ram data
0001            528   ;--------------------------------------------------------
0000            529            rseg R_PSEG
0000            530   ;--------------------------------------------------------
0000            531   ; external ram data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_XSEG
0000            534   ;--------------------------------------------------------
0000            535   ; absolute external ram data
0000            536   ;--------------------------------------------------------
0000            537            XSEG
0000            538   ;--------------------------------------------------------
0000            539   ; external initialized ram data
0000            540   ;--------------------------------------------------------
0000            541            rseg R_IXSEG
0000            542            rseg R_HOME
0000            543            rseg R_GSINIT
0000            544            rseg R_CSEG
0000            545   ;--------------------------------------------------------
0000            546   ; Reset entry point and interrupt vectors
0000            547   ;--------------------------------------------------------
0000            548            CSEG at 0x0000
0000 020000     549            ljmp    _crt0
0003            550   ;--------------------------------------------------------
0003            551   ; global & static initialisations
0003            552   ;--------------------------------------------------------
0000            553            rseg R_HOME
0000            554            rseg R_GSINIT
0000            555            rseg R_GSINIT
0000            556   ;--------------------------------------------------------
0000            557   ; data variables initialization
0000            558   ;--------------------------------------------------------
0000            559            rseg R_DINIT
0000            560            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            561   ;--------------------------------------------------------
0000            562   ; code
0000            563   ;--------------------------------------------------------
0000            564            rseg R_CSEG
0000            565   ;------------------------------------------------------------
0000            566   ;Allocation info for local variables in function '_c51_external_startup'
0000            567   ;------------------------------------------------------------
0000            568   ;------------------------------------------------------------
0000            569   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:25: char _c51_external_startup (void)
0000            570   ;        -----------------------------------------
0000            571   ;         function _c51_external_startup
0000            572   ;        -----------------------------------------
0000            573   __c51_external_startup:
0000            574            using   0
0000            575   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:28: SFRPAGE = 0x00;
0000 75A700     576            mov     _SFRPAGE,#0x00
0003            577   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:29: WDTCN = 0xDE; //First key
0003 7597DE     578            mov     _WDTCN,#0xDE
0006            579   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:30: WDTCN = 0xAD; //Second key
0006 7597AD     580            mov     _WDTCN,#0xAD
0009            581   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:32: VDM0CN |= 0x80;
0009 43FF80     582            orl     _VDM0CN,#0x80
000C            583   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:33: RSTSRC = 0x02;
000C 75EF02     584            mov     _RSTSRC,#0x02
000F            585   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:40: SFRPAGE = 0x10;
000F 75A710     586            mov     _SFRPAGE,#0x10
0012            587   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:41: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     588            mov     _PFE0CN,#0x20
0015            589   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:42: SFRPAGE = 0x00;
0015 75A700     590            mov     _SFRPAGE,#0x00
0018            591   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:63: CLKSEL = 0x00;
0018 75A900     592            mov     _CLKSEL,#0x00
001B            593   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:64: CLKSEL = 0x00;
001B 75A900     594            mov     _CLKSEL,#0x00
001E            595   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:65: while ((CLKSEL & 0x80) == 0);
001E            596   L002001?:
001E E5A9       597            mov     a,_CLKSEL
0020 30E730     598            jnb     acc.7,L002001?
0023            599   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:66: CLKSEL = 0x03;
0023 75A903     600            mov     _CLKSEL,#0x03
0026            601   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:67: CLKSEL = 0x03;
0026 75A903     602            mov     _CLKSEL,#0x03
0029            603   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:68: while ((CLKSEL & 0x80) == 0);
0029            604   L002004?:
0029 E5A9       605            mov     a,_CLKSEL
002B 30E7B0     606            jnb     acc.7,L002004?
002E            607   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:73: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     608            orl     _P0MDOUT,#0x10
0031            609   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:74: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     610            mov     _XBR0,#0x01
0034            611   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:75: XBR1     = 0X00;
0034 75E200     612            mov     _XBR1,#0x00
0037            613   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:76: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     614            mov     _XBR2,#0x40
003A            615   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:82: SCON0 = 0x10;
003A 759810     616            mov     _SCON0,#0x10
003D            617   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:83: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     618            mov     _CKCON0,_CKCON0
0040            619   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:84: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     620            mov     _TH1,#0xE6
0043            621   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:85: TL1 = TH1;      // Init Timer1
0043 858D8B     622            mov     _TL1,_TH1
0046            623   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:86: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     624            anl     _TMOD,#0x0F
0049            625   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:87: TMOD |=  0x20;                       
0049 438920     626            orl     _TMOD,#0x20
004C            627   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:88: TR1 = 1; // START Timer1
004C D28E       628            setb    _TR1
004E            629   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:89: TI = 1;  // Indicate TX0 ready
004E D299       630            setb    _TI
0050            631   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:91: return 0;
0050 758200     632            mov     dpl,#0x00
0053 22         633            ret
0054            634   ;------------------------------------------------------------
0054            635   ;Allocation info for local variables in function 'Timer3us'
0054            636   ;------------------------------------------------------------
0054            637   ;us                        Allocated to registers r2 
0054            638   ;i                         Allocated to registers r3 
0054            639   ;------------------------------------------------------------
0054            640   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:95: void Timer3us(unsigned char us)
0054            641   ;        -----------------------------------------
0054            642   ;         function Timer3us
0054            643   ;        -----------------------------------------
0054            644   _Timer3us:
0054 AA82       645            mov     r2,dpl
0056            646   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:100: CKCON0|=0b_0100_0000;
0056 438E40     647            orl     _CKCON0,#0x40
0059            648   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:102: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     649            mov     _TMR3RL,#0xB8
005C 7593FF     650            mov     (_TMR3RL >> 8),#0xFF
005F            651   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:103: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     652            mov     _TMR3,_TMR3RL
0062 859395     653            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            654   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:105: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     655            mov     _TMR3CN0,#0x04
0068            656   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       657            mov     r3,#0x00
006A            658   L003004?:
006A C3         659            clr     c
006B EB         660            mov     a,r3
006C 9A         661            subb    a,r2
006D 5000       662            jnc     L003007?
006F            663   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:108: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            664   L003001?:
006F E591       665            mov     a,_TMR3CN0
0071 30E7B0     666            jnb     acc.7,L003001?
0074            667   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:109: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     668            anl     _TMR3CN0,#0x7F
0077            669   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         670            inc     r3
0078 8000       671            sjmp    L003004?
007A            672   L003007?:
007A            673   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:111: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     674            mov     _TMR3CN0,#0x00
007D 22         675            ret
007E            676   ;------------------------------------------------------------
007E            677   ;Allocation info for local variables in function 'waitms'
007E            678   ;------------------------------------------------------------
007E            679   ;ms                        Allocated to registers r2 r3 
007E            680   ;j                         Allocated to registers r2 r3 
007E            681   ;------------------------------------------------------------
007E            682   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:114: void waitms (unsigned int ms)
007E            683   ;        -----------------------------------------
007E            684   ;         function waitms
007E            685   ;        -----------------------------------------
007E            686   _waitms:
007E AA82       687            mov     r2,dpl
0080 AB83       688            mov     r3,dph
0082            689   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:117: for(j=ms; j!=0; j--)
0082            690   L004001?:
0082 BA0070     691            cjne    r2,#0x00,L004010?
0085 BB0070     692            cjne    r3,#0x00,L004010?
0088 22         693            ret
0089            694   L004010?:
0089            695   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:119: Timer3us(249);
0089 7582F9     696            mov     dpl,#0xF9
008C C002       697            push    ar2
008E C003       698            push    ar3
0090 120000     699            lcall   _Timer3us
0093            700   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:120: Timer3us(249);
0093 7582F9     701            mov     dpl,#0xF9
0096 120000     702            lcall   _Timer3us
0099            703   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:121: Timer3us(249);
0099 7582F9     704            mov     dpl,#0xF9
009C 120000     705            lcall   _Timer3us
009F            706   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:122: Timer3us(250);
009F 7582FA     707            mov     dpl,#0xFA
00A2 120000     708            lcall   _Timer3us
00A5 D003       709            pop     ar3
00A7 D002       710            pop     ar2
00A9            711   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:117: for(j=ms; j!=0; j--)
00A9 1A         712            dec     r2
00AA BAFFB0     713            cjne    r2,#0xff,L004011?
00AD 1B         714            dec     r3
00AE            715   L004011?:
00AE 8000       716            sjmp    L004001?
00B0            717   ;------------------------------------------------------------
00B0            718   ;Allocation info for local variables in function 'LCD_pulse'
00B0            719   ;------------------------------------------------------------
00B0            720   ;------------------------------------------------------------
00B0            721   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:127: void LCD_pulse (void)
00B0            722   ;        -----------------------------------------
00B0            723   ;         function LCD_pulse
00B0            724   ;        -----------------------------------------
00B0            725   _LCD_pulse:
00B0            726   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:129: LCD_E=1;
00B0 D2A5       727            setb    _P2_5
00B2            728   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:130: Timer3us(40);
00B2 758228     729            mov     dpl,#0x28
00B5 120000     730            lcall   _Timer3us
00B8            731   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:131: LCD_E=0;
00B8 C2A5       732            clr     _P2_5
00BA 22         733            ret
00BB            734   ;------------------------------------------------------------
00BB            735   ;Allocation info for local variables in function 'LCD_byte'
00BB            736   ;------------------------------------------------------------
00BB            737   ;x                         Allocated to registers r2 
00BB            738   ;------------------------------------------------------------
00BB            739   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:134: void LCD_byte (unsigned char x)
00BB            740   ;        -----------------------------------------
00BB            741   ;         function LCD_byte
00BB            742   ;        -----------------------------------------
00BB            743   _LCD_byte:
00BB AA82       744            mov     r2,dpl
00BD            745   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:137: ACC=x; //Send high nible
00BD 8AE0       746            mov     _ACC,r2
00BF            747   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:138: LCD_D7=ACC_7;
00BF A2E7       748            mov     c,_ACC_7
00C1 92A1       749            mov     _P2_1,c
00C3            750   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:139: LCD_D6=ACC_6;
00C3 A2E6       751            mov     c,_ACC_6
00C5 92A2       752            mov     _P2_2,c
00C7            753   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:140: LCD_D5=ACC_5;
00C7 A2E5       754            mov     c,_ACC_5
00C9 92A3       755            mov     _P2_3,c
00CB            756   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:141: LCD_D4=ACC_4;
00CB A2E4       757            mov     c,_ACC_4
00CD 92A4       758            mov     _P2_4,c
00CF            759   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:142: LCD_pulse();
00CF C002       760            push    ar2
00D1 120000     761            lcall   _LCD_pulse
00D4            762   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:143: Timer3us(40);
00D4 758228     763            mov     dpl,#0x28
00D7 120000     764            lcall   _Timer3us
00DA D002       765            pop     ar2
00DC            766   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:144: ACC=x; //Send low nible
00DC 8AE0       767            mov     _ACC,r2
00DE            768   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:145: LCD_D7=ACC_3;
00DE A2E3       769            mov     c,_ACC_3
00E0 92A1       770            mov     _P2_1,c
00E2            771   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:146: LCD_D6=ACC_2;
00E2 A2E2       772            mov     c,_ACC_2
00E4 92A2       773            mov     _P2_2,c
00E6            774   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:147: LCD_D5=ACC_1;
00E6 A2E1       775            mov     c,_ACC_1
00E8 92A3       776            mov     _P2_3,c
00EA            777   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:148: LCD_D4=ACC_0;
00EA A2E0       778            mov     c,_ACC_0
00EC 92A4       779            mov     _P2_4,c
00EE            780   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:149: LCD_pulse();
00EE 020000     781            ljmp    _LCD_pulse
00F1            782   ;------------------------------------------------------------
00F1            783   ;Allocation info for local variables in function 'WriteData'
00F1            784   ;------------------------------------------------------------
00F1            785   ;x                         Allocated to registers r2 
00F1            786   ;------------------------------------------------------------
00F1            787   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:152: void WriteData (unsigned char x)
00F1            788   ;        -----------------------------------------
00F1            789   ;         function WriteData
00F1            790   ;        -----------------------------------------
00F1            791   _WriteData:
00F1 AA82       792            mov     r2,dpl
00F3            793   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:154: LCD_RS=1;
00F3 D2A6       794            setb    _P2_6
00F5            795   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:155: LCD_byte(x);
00F5 8A82       796            mov     dpl,r2
00F7 120000     797            lcall   _LCD_byte
00FA            798   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:156: waitms(2);
00FA 900002     799            mov     dptr,#0x0002
00FD 020000     800            ljmp    _waitms
0100            801   ;------------------------------------------------------------
0100            802   ;Allocation info for local variables in function 'WriteCommand'
0100            803   ;------------------------------------------------------------
0100            804   ;x                         Allocated to registers r2 
0100            805   ;------------------------------------------------------------
0100            806   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:159: void WriteCommand (unsigned char x)
0100            807   ;        -----------------------------------------
0100            808   ;         function WriteCommand
0100            809   ;        -----------------------------------------
0100            810   _WriteCommand:
0100 AA82       811            mov     r2,dpl
0102            812   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:161: LCD_RS=0;
0102 C2A6       813            clr     _P2_6
0104            814   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:162: LCD_byte(x);
0104 8A82       815            mov     dpl,r2
0106 120000     816            lcall   _LCD_byte
0109            817   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:163: waitms(5);
0109 900005     818            mov     dptr,#0x0005
010C 020000     819            ljmp    _waitms
010F            820   ;------------------------------------------------------------
010F            821   ;Allocation info for local variables in function 'LCD_4BIT'
010F            822   ;------------------------------------------------------------
010F            823   ;------------------------------------------------------------
010F            824   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:166: void LCD_4BIT (void)
010F            825   ;        -----------------------------------------
010F            826   ;         function LCD_4BIT
010F            827   ;        -----------------------------------------
010F            828   _LCD_4BIT:
010F            829   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:168: LCD_E=0; // Resting state of LCD's enable is zero
010F C2A5       830            clr     _P2_5
0111            831   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:170: waitms(20);
0111 900014     832            mov     dptr,#0x0014
0114 120000     833            lcall   _waitms
0117            834   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:172: WriteCommand(0x33);
0117 758233     835            mov     dpl,#0x33
011A 120000     836            lcall   _WriteCommand
011D            837   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:173: WriteCommand(0x33);
011D 758233     838            mov     dpl,#0x33
0120 120000     839            lcall   _WriteCommand
0123            840   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:174: WriteCommand(0x32); // Change to 4-bit mode
0123 758232     841            mov     dpl,#0x32
0126 120000     842            lcall   _WriteCommand
0129            843   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:177: WriteCommand(0x28);
0129 758228     844            mov     dpl,#0x28
012C 120000     845            lcall   _WriteCommand
012F            846   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:178: WriteCommand(0x0c);
012F 75820C     847            mov     dpl,#0x0C
0132 120000     848            lcall   _WriteCommand
0135            849   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:179: WriteCommand(0x01); // Clear screen command (takes some time)
0135 758201     850            mov     dpl,#0x01
0138 120000     851            lcall   _WriteCommand
013B            852   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:180: waitms(20); // Wait for clear screen command to finsih.
013B 900014     853            mov     dptr,#0x0014
013E 020000     854            ljmp    _waitms
0141            855   ;------------------------------------------------------------
0141            856   ;Allocation info for local variables in function 'LCDprint'
0141            857   ;------------------------------------------------------------
0141            858   ;line                      Allocated with name '_LCDprint_PARM_2'
0141            859   ;string                    Allocated to registers r2 r3 r4 
0141            860   ;j                         Allocated to registers r5 r6 
0141            861   ;------------------------------------------------------------
0141            862   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:183: void LCDprint(char * string, unsigned char line, bit clear)
0141            863   ;        -----------------------------------------
0141            864   ;         function LCDprint
0141            865   ;        -----------------------------------------
0141            866   _LCDprint:
0141 AA82       867            mov     r2,dpl
0143 AB83       868            mov     r3,dph
0145 ACF0       869            mov     r4,b
0147            870   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:187: WriteCommand(line==2?0xc0:0x80);
0147 7402       871            mov     a,#0x02
0149 B5B830     872            cjne    a,_LCDprint_PARM_2,L010013?
014C 7DC0       873            mov     r5,#0xC0
014E 8000       874            sjmp    L010014?
0150            875   L010013?:
0150 7D80       876            mov     r5,#0x80
0152            877   L010014?:
0152 8D82       878            mov     dpl,r5
0154 C002       879            push    ar2
0156 C003       880            push    ar3
0158 C004       881            push    ar4
015A 120000     882            lcall   _WriteCommand
015D            883   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:188: waitms(5);
015D 900005     884            mov     dptr,#0x0005
0160 120000     885            lcall   _waitms
0163 D004       886            pop     ar4
0165 D003       887            pop     ar3
0167 D002       888            pop     ar2
0169            889   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:189: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0169 7D00       890            mov     r5,#0x00
016B 7E00       891            mov     r6,#0x00
016D            892   L010003?:
016D ED         893            mov     a,r5
016E 2A         894            add     a,r2
016F FF         895            mov     r7,a
0170 EE         896            mov     a,r6
0171 3B         897            addc    a,r3
0172 F8         898            mov     r0,a
0173 8C01       899            mov     ar1,r4
0175 8F82       900            mov     dpl,r7
0177 8883       901            mov     dph,r0
0179 89F0       902            mov     b,r1
017B 120000     903            lcall   __gptrget
017E FF         904            mov     r7,a
017F 6000       905            jz      L010006?
0181 8F82       906            mov     dpl,r7
0183 C002       907            push    ar2
0185 C003       908            push    ar3
0187 C004       909            push    ar4
0189 C005       910            push    ar5
018B C006       911            push    ar6
018D 120000     912            lcall   _WriteData
0190 D006       913            pop     ar6
0192 D005       914            pop     ar5
0194 D004       915            pop     ar4
0196 D003       916            pop     ar3
0198 D002       917            pop     ar2
019A 0D         918            inc     r5
019B BD00B0     919            cjne    r5,#0x00,L010003?
019E 0E         920            inc     r6
019F 8000       921            sjmp    L010003?
01A1            922   L010006?:
01A1            923   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:190: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01A1 30F070     924            jnb     _LCDprint_PARM_3,L010011?
01A4 8D02       925            mov     ar2,r5
01A6 8E03       926            mov     ar3,r6
01A8            927   L010007?:
01A8 C3         928            clr     c
01A9 EA         929            mov     a,r2
01AA 9410       930            subb    a,#0x10
01AC EB         931            mov     a,r3
01AD 6480       932            xrl     a,#0x80
01AF 9480       933            subb    a,#0x80
01B1 5000       934            jnc     L010011?
01B3 758220     935            mov     dpl,#0x20
01B6 C002       936            push    ar2
01B8 C003       937            push    ar3
01BA 120000     938            lcall   _WriteData
01BD D003       939            pop     ar3
01BF D002       940            pop     ar2
01C1 0A         941            inc     r2
01C2 BA00B0     942            cjne    r2,#0x00,L010007?
01C5 0B         943            inc     r3
01C6 8000       944            sjmp    L010007?
01C8            945   L010011?:
01C8 22         946            ret
01C9            947   ;------------------------------------------------------------
01C9            948   ;Allocation info for local variables in function 'getsn'
01C9            949   ;------------------------------------------------------------
01C9            950   ;len                       Allocated with name '_getsn_PARM_2'
01C9            951   ;buff                      Allocated with name '_getsn_buff_1_43'
01C9            952   ;j                         Allocated with name '_getsn_sloc0_1_0'
01C9            953   ;c                         Allocated to registers r3 
01C9            954   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
01C9            955   ;------------------------------------------------------------
01C9            956   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:193: int getsn (char * buff, int len)
01C9            957   ;        -----------------------------------------
01C9            958   ;         function getsn
01C9            959   ;        -----------------------------------------
01C9            960   _getsn:
01C9 858210     961            mov     _getsn_buff_1_43,dpl
01CC 858311     962            mov     (_getsn_buff_1_43 + 1),dph
01CF 85F012     963            mov     (_getsn_buff_1_43 + 2),b
01D2            964   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:198: for(j=0; j<(len-1); j++)
01D2 E4         965            clr     a
01D3 F560       966            mov     _getsn_sloc0_1_0,a
01D5 F561       967            mov     (_getsn_sloc0_1_0 + 1),a
01D7 E568       968            mov     a,_getsn_PARM_2
01D9 24FF       969            add     a,#0xff
01DB FF         970            mov     r7,a
01DC E569       971            mov     a,(_getsn_PARM_2 + 1)
01DE 34FF       972            addc    a,#0xff
01E0 F8         973            mov     r0,a
01E1 7900       974            mov     r1,#0x00
01E3 7A00       975            mov     r2,#0x00
01E5            976   L011005?:
01E5 C3         977            clr     c
01E6 E9         978            mov     a,r1
01E7 9F         979            subb    a,r7
01E8 EA         980            mov     a,r2
01E9 6480       981            xrl     a,#0x80
01EB 88F0       982            mov     b,r0
01ED 63F080     983            xrl     b,#0x80
01F0 95F0       984            subb    a,b
01F2 5000       985            jnc     L011008?
01F4            986   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:200: c=getchar();
01F4 C002       987            push    ar2
01F6 C007       988            push    ar7
01F8 C000       989            push    ar0
01FA C001       990            push    ar1
01FC 120000     991            lcall   _getchar
01FF AB82       992            mov     r3,dpl
0201 D001       993            pop     ar1
0203 D000       994            pop     ar0
0205 D007       995            pop     ar7
0207 D002       996            pop     ar2
0209            997   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:201: if ( (c=='\n') || (c=='\r') )
0209 BB0AB0     998            cjne    r3,#0x0A,L011015?
020C 8000       999            sjmp    L011001?
020E           1000   L011015?:
020E BB0D30    1001            cjne    r3,#0x0D,L011002?
0211           1002   L011001?:
0211           1003   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:203: buff[j]=0;
0211 E560      1004            mov     a,_getsn_sloc0_1_0
0213 2510      1005            add     a,_getsn_buff_1_43
0215 FC        1006            mov     r4,a
0216 E561      1007            mov     a,(_getsn_sloc0_1_0 + 1)
0218 3511      1008            addc    a,(_getsn_buff_1_43 + 1)
021A FD        1009            mov     r5,a
021B AE12      1010            mov     r6,(_getsn_buff_1_43 + 2)
021D 8C82      1011            mov     dpl,r4
021F 8D83      1012            mov     dph,r5
0221 8EF0      1013            mov     b,r6
0223 E4        1014            clr     a
0224 120000    1015            lcall   __gptrput
0227           1016   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:204: return j;
0227 856082    1017            mov     dpl,_getsn_sloc0_1_0
022A 856183    1018            mov     dph,(_getsn_sloc0_1_0 + 1)
022D 22        1019            ret
022E           1020   L011002?:
022E           1021   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:208: buff[j]=c;
022E E9        1022            mov     a,r1
022F 2510      1023            add     a,_getsn_buff_1_43
0231 FC        1024            mov     r4,a
0232 EA        1025            mov     a,r2
0233 3511      1026            addc    a,(_getsn_buff_1_43 + 1)
0235 FD        1027            mov     r5,a
0236 AE12      1028            mov     r6,(_getsn_buff_1_43 + 2)
0238 8C82      1029            mov     dpl,r4
023A 8D83      1030            mov     dph,r5
023C 8EF0      1031            mov     b,r6
023E EB        1032            mov     a,r3
023F 120000    1033            lcall   __gptrput
0242           1034   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:198: for(j=0; j<(len-1); j++)
0242 09        1035            inc     r1
0243 B900B0    1036            cjne    r1,#0x00,L011018?
0246 0A        1037            inc     r2
0247           1038   L011018?:
0247 8960      1039            mov     _getsn_sloc0_1_0,r1
0249 8A61      1040            mov     (_getsn_sloc0_1_0 + 1),r2
024B 8000      1041            sjmp    L011005?
024D           1042   L011008?:
024D           1043   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:211: buff[j]=0;
024D E560      1044            mov     a,_getsn_sloc0_1_0
024F 2510      1045            add     a,_getsn_buff_1_43
0251 FA        1046            mov     r2,a
0252 E561      1047            mov     a,(_getsn_sloc0_1_0 + 1)
0254 3511      1048            addc    a,(_getsn_buff_1_43 + 1)
0256 FB        1049            mov     r3,a
0257 AC12      1050            mov     r4,(_getsn_buff_1_43 + 2)
0259 8A82      1051            mov     dpl,r2
025B 8B83      1052            mov     dph,r3
025D 8CF0      1053            mov     b,r4
025F E4        1054            clr     a
0260 120000    1055            lcall   __gptrput
0263           1056   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:212: return len;
0263 856882    1057            mov     dpl,_getsn_PARM_2
0266 856983    1058            mov     dph,(_getsn_PARM_2 + 1)
0269 22        1059            ret
026A           1060   ;------------------------------------------------------------
026A           1061   ;Allocation info for local variables in function 'TIMER0_Init'
026A           1062   ;------------------------------------------------------------
026A           1063   ;------------------------------------------------------------
026A           1064   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:215: void TIMER0_Init(void)
026A           1065   ;        -----------------------------------------
026A           1066   ;         function TIMER0_Init
026A           1067   ;        -----------------------------------------
026A           1068   _TIMER0_Init:
026A           1069   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:217: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
026A 5389F0    1070            anl     _TMOD,#0xF0
026D           1071   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:218: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
026D 438901    1072            orl     _TMOD,#0x01
0270           1073   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:219: TR0=0; // Stop Timer/Counter 0
0270 C28C      1074            clr     _TR0
0272 22        1075            ret
0273           1076   ;------------------------------------------------------------
0273           1077   ;Allocation info for local variables in function 'PtoC'
0273           1078   ;------------------------------------------------------------
0273           1079   ;period                    Allocated to registers r2 r3 r4 r5 
0273           1080   ;------------------------------------------------------------
0273           1081   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:222: double PtoC(double period){
0273           1082   ;        -----------------------------------------
0273           1083   ;         function PtoC
0273           1084   ;        -----------------------------------------
0273           1085   _PtoC:
0273 AA82      1086            mov     r2,dpl
0275 AB83      1087            mov     r3,dph
0277 ACF0      1088            mov     r4,b
0279 FD        1089            mov     r5,a
027A           1090   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:223: return ((period*1000000000.0)/(3465.7359028));
027A C002      1091            push    ar2
027C C003      1092            push    ar3
027E C004      1093            push    ar4
0280 C005      1094            push    ar5
0282 906B28    1095            mov     dptr,#0x6B28
0285 75F06E    1096            mov     b,#0x6E
0288 744E      1097            mov     a,#0x4E
028A 120000    1098            lcall   ___fsmul
028D AA82      1099            mov     r2,dpl
028F AB83      1100            mov     r3,dph
0291 ACF0      1101            mov     r4,b
0293 FD        1102            mov     r5,a
0294 E581      1103            mov     a,sp
0296 24FC      1104            add     a,#0xfc
0298 F581      1105            mov     sp,a
029A 74C6      1106            mov     a,#0xC6
029C C0E0      1107            push    acc
029E 749B      1108            mov     a,#0x9B
02A0 C0E0      1109            push    acc
02A2 7458      1110            mov     a,#0x58
02A4 C0E0      1111            push    acc
02A6 7445      1112            mov     a,#0x45
02A8 C0E0      1113            push    acc
02AA 8A82      1114            mov     dpl,r2
02AC 8B83      1115            mov     dph,r3
02AE 8CF0      1116            mov     b,r4
02B0 ED        1117            mov     a,r5
02B1 120000    1118            lcall   ___fsdiv
02B4 AA82      1119            mov     r2,dpl
02B6 AB83      1120            mov     r3,dph
02B8 ACF0      1121            mov     r4,b
02BA FD        1122            mov     r5,a
02BB E581      1123            mov     a,sp
02BD 24FC      1124            add     a,#0xfc
02BF F581      1125            mov     sp,a
02C1 8A82      1126            mov     dpl,r2
02C3 8B83      1127            mov     dph,r3
02C5 8CF0      1128            mov     b,r4
02C7 ED        1129            mov     a,r5
02C8 22        1130            ret
02C9           1131   ;------------------------------------------------------------
02C9           1132   ;Allocation info for local variables in function 'writeOutputBuffer'
02C9           1133   ;------------------------------------------------------------
02C9           1134   ;cap                       Allocated with name '_writeOutputBuffer_PARM_2'
02C9           1135   ;buffer                    Allocated to registers r2 r3 r4 
02C9           1136   ;suffix                    Allocated to registers r5 
02C9           1137   ;------------------------------------------------------------
02C9           1138   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:226: void writeOutputBuffer(char *buffer, double cap){
02C9           1139   ;        -----------------------------------------
02C9           1140   ;         function writeOutputBuffer
02C9           1141   ;        -----------------------------------------
02C9           1142   _writeOutputBuffer:
02C9 AA82      1143            mov     r2,dpl
02CB AB83      1144            mov     r3,dph
02CD ACF0      1145            mov     r4,b
02CF           1146   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:227: char suffix = 'n';
02CF 7D6E      1147            mov     r5,#0x6E
02D1           1148   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:229: if(cap > 100.0)
02D1 C002      1149            push    ar2
02D3 C003      1150            push    ar3
02D5 C004      1151            push    ar4
02D7 C005      1152            push    ar5
02D9 E4        1153            clr     a
02DA C0E0      1154            push    acc
02DC C0E0      1155            push    acc
02DE 74C8      1156            mov     a,#0xC8
02E0 C0E0      1157            push    acc
02E2 7442      1158            mov     a,#0x42
02E4 C0E0      1159            push    acc
02E6 854082    1160            mov     dpl,_writeOutputBuffer_PARM_2
02E9 854183    1161            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
02EC 8542F0    1162            mov     b,(_writeOutputBuffer_PARM_2 + 2)
02EF E543      1163            mov     a,(_writeOutputBuffer_PARM_2 + 3)
02F1 120000    1164            lcall   ___fsgt
02F4 AE82      1165            mov     r6,dpl
02F6 E581      1166            mov     a,sp
02F8 24FC      1167            add     a,#0xfc
02FA F581      1168            mov     sp,a
02FC D005      1169            pop     ar5
02FE D004      1170            pop     ar4
0300 D003      1171            pop     ar3
0302 D002      1172            pop     ar2
0304 EE        1173            mov     a,r6
0305 6000      1174            jz      L014002?
0307           1175   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:231: suffix = 'u';
0307 7D75      1176            mov     r5,#0x75
0309           1177   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:232: cap = cap/1000.0;
0309 C002      1178            push    ar2
030B C003      1179            push    ar3
030D C004      1180            push    ar4
030F C005      1181            push    ar5
0311 E4        1182            clr     a
0312 C0E0      1183            push    acc
0314 C0E0      1184            push    acc
0316 747A      1185            mov     a,#0x7A
0318 C0E0      1186            push    acc
031A 7444      1187            mov     a,#0x44
031C C0E0      1188            push    acc
031E 854082    1189            mov     dpl,_writeOutputBuffer_PARM_2
0321 854183    1190            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0324 8542F0    1191            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0327 E543      1192            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0329 120000    1193            lcall   ___fsdiv
032C 858240    1194            mov     _writeOutputBuffer_PARM_2,dpl
032F 858341    1195            mov     (_writeOutputBuffer_PARM_2 + 1),dph
0332 85F042    1196            mov     (_writeOutputBuffer_PARM_2 + 2),b
0335 F543      1197            mov     (_writeOutputBuffer_PARM_2 + 3),a
0337 E581      1198            mov     a,sp
0339 24FC      1199            add     a,#0xfc
033B F581      1200            mov     sp,a
033D D005      1201            pop     ar5
033F D004      1202            pop     ar4
0341 D003      1203            pop     ar3
0343 D002      1204            pop     ar2
0345           1205   L014002?:
0345           1206   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:234: if(cap > 100.0)
0345 C002      1207            push    ar2
0347 C003      1208            push    ar3
0349 C004      1209            push    ar4
034B C005      1210            push    ar5
034D E4        1211            clr     a
034E C0E0      1212            push    acc
0350 C0E0      1213            push    acc
0352 74C8      1214            mov     a,#0xC8
0354 C0E0      1215            push    acc
0356 7442      1216            mov     a,#0x42
0358 C0E0      1217            push    acc
035A 854082    1218            mov     dpl,_writeOutputBuffer_PARM_2
035D 854183    1219            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0360 8542F0    1220            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0363 E543      1221            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0365 120000    1222            lcall   ___fsgt
0368 AE82      1223            mov     r6,dpl
036A E581      1224            mov     a,sp
036C 24FC      1225            add     a,#0xfc
036E F581      1226            mov     sp,a
0370 D005      1227            pop     ar5
0372 D004      1228            pop     ar4
0374 D003      1229            pop     ar3
0376 D002      1230            pop     ar2
0378 EE        1231            mov     a,r6
0379 6000      1232            jz      L014004?
037B           1233   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:236: suffix = 'm';
037B 7D6D      1234            mov     r5,#0x6D
037D           1235   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:237: cap = cap/1000.0;
037D C002      1236            push    ar2
037F C003      1237            push    ar3
0381 C004      1238            push    ar4
0383 C005      1239            push    ar5
0385 E4        1240            clr     a
0386 C0E0      1241            push    acc
0388 C0E0      1242            push    acc
038A 747A      1243            mov     a,#0x7A
038C C0E0      1244            push    acc
038E 7444      1245            mov     a,#0x44
0390 C0E0      1246            push    acc
0392 854082    1247            mov     dpl,_writeOutputBuffer_PARM_2
0395 854183    1248            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0398 8542F0    1249            mov     b,(_writeOutputBuffer_PARM_2 + 2)
039B E543      1250            mov     a,(_writeOutputBuffer_PARM_2 + 3)
039D 120000    1251            lcall   ___fsdiv
03A0 858240    1252            mov     _writeOutputBuffer_PARM_2,dpl
03A3 858341    1253            mov     (_writeOutputBuffer_PARM_2 + 1),dph
03A6 85F042    1254            mov     (_writeOutputBuffer_PARM_2 + 2),b
03A9 F543      1255            mov     (_writeOutputBuffer_PARM_2 + 3),a
03AB E581      1256            mov     a,sp
03AD 24FC      1257            add     a,#0xfc
03AF F581      1258            mov     sp,a
03B1 D005      1259            pop     ar5
03B3 D004      1260            pop     ar4
03B5 D003      1261            pop     ar3
03B7 D002      1262            pop     ar2
03B9           1263   L014004?:
03B9           1264   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:239: sprintf(buffer, "C = %.4f%cF", cap, suffix);
03B9 ED        1265            mov     a,r5
03BA 33        1266            rlc     a
03BB 95E0      1267            subb    a,acc
03BD FE        1268            mov     r6,a
03BE C005      1269            push    ar5
03C0 C006      1270            push    ar6
03C2 C040      1271            push    _writeOutputBuffer_PARM_2
03C4 C041      1272            push    (_writeOutputBuffer_PARM_2 + 1)
03C6 C042      1273            push    (_writeOutputBuffer_PARM_2 + 2)
03C8 C043      1274            push    (_writeOutputBuffer_PARM_2 + 3)
03CA 7470      1275            mov     a,#__str_0
03CC C0E0      1276            push    acc
03CE 74B9      1277            mov     a,#(__str_0 >> 8)
03D0 C0E0      1278            push    acc
03D2 7480      1279            mov     a,#0x80
03D4 C0E0      1280            push    acc
03D6 C002      1281            push    ar2
03D8 C003      1282            push    ar3
03DA C004      1283            push    ar4
03DC 120000    1284            lcall   _sprintf
03DF E581      1285            mov     a,sp
03E1 24F4      1286            add     a,#0xf4
03E3 F581      1287            mov     sp,a
03E5 22        1288            ret
03E6           1289   ;------------------------------------------------------------
03E6           1290   ;Allocation info for local variables in function 'main'
03E6           1291   ;------------------------------------------------------------
03E6           1292   ;period                    Allocated to registers r2 r3 r4 r5 
03E6           1293   ;output_buffer             Allocated with name '_main_output_buffer_1_57'
03E6           1294   ;------------------------------------------------------------
03E6           1295   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:242: void main (void) 
03E6           1296   ;        -----------------------------------------
03E6           1297   ;         function main
03E6           1298   ;        -----------------------------------------
03E6           1299   _main:
03E6           1300   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:249: TIMER0_Init();
03E6 120000    1301            lcall   _TIMER0_Init
03E9           1302   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:251: LCD_4BIT();
03E9 120000    1303            lcall   _LCD_4BIT
03EC           1304   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:253: waitms(500); // Give PuTTY a chance to start.
03EC 9001F4    1305            mov     dptr,#0x01F4
03EF 120000    1306            lcall   _waitms
03F2           1307   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:254: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
03F2 74F0      1308            mov     a,#__str_1
03F4 C0E0      1309            push    acc
03F6 74B9      1310            mov     a,#(__str_1 >> 8)
03F8 C0E0      1311            push    acc
03FA 7480      1312            mov     a,#0x80
03FC C0E0      1313            push    acc
03FE 120000    1314            lcall   _printf
0401 1581      1315            dec     sp
0403 1581      1316            dec     sp
0405 1581      1317            dec     sp
0407           1318   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:259: __FILE__, __DATE__, __TIME__);
0407           1319   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:258: "Compiled: %s, %s\n\n",
0407 7470      1320            mov     a,#__str_5
0409 C0E0      1321            push    acc
040B 74BA      1322            mov     a,#(__str_5 >> 8)
040D C0E0      1323            push    acc
040F 7480      1324            mov     a,#0x80
0411 C0E0      1325            push    acc
0413 74B0      1326            mov     a,#__str_4
0415 C0E0      1327            push    acc
0417 74BA      1328            mov     a,#(__str_4 >> 8)
0419 C0E0      1329            push    acc
041B 7480      1330            mov     a,#0x80
041D C0E0      1331            push    acc
041F 74F0      1332            mov     a,#__str_3
0421 C0E0      1333            push    acc
0423 74BA      1334            mov     a,#(__str_3 >> 8)
0425 C0E0      1335            push    acc
0427 7480      1336            mov     a,#0x80
0429 C0E0      1337            push    acc
042B 7430      1338            mov     a,#__str_2
042D C0E0      1339            push    acc
042F 74BB      1340            mov     a,#(__str_2 >> 8)
0431 C0E0      1341            push    acc
0433 7480      1342            mov     a,#0x80
0435 C0E0      1343            push    acc
0437 120000    1344            lcall   _printf
043A E581      1345            mov     a,sp
043C 24F4      1346            add     a,#0xf4
043E F581      1347            mov     sp,a
0440           1348   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:261: while (1)
0440           1349   L015018?:
0440           1350   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:264: TL0=0; 
0440 758A00    1351            mov     _TL0,#0x00
0443           1352   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:265: TH0=0;
0443 758C00    1353            mov     _TH0,#0x00
0446           1354   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:266: TF0=0;
0446 C28D      1355            clr     _TF0
0448           1356   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:267: overflow_count=0;
0448 75F800    1357            mov     _overflow_count,#0x00
044B           1358   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:269: while(P0_1!=0); // Wait for the signal to be zero
044B           1359   L015001?:
044B 2081B0    1360            jb      _P0_1,L015001?
044E           1361   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:270: while(P0_1!=1); // Wait for the signal to be one
044E           1362   L015004?:
044E 3081F0    1363            jnb     _P0_1,L015004?
0451           1364   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:271: TR0=1; // Start the timer
0451 D28C      1365            setb    _TR0
0453           1366   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:272: while(P0_1!=0) // Wait for the signal to be zero
0453           1367   L015009?:
0453 308170    1368            jnb     _P0_1,L015014?
0456           1369   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:274: if(TF0==1) // Did the 16-bit timer overflow?
0456           1370   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:276: TF0=0;
0456 108DB0    1371            jbc     _TF0,L015035?
0459 8000      1372            sjmp    L015009?
045B           1373   L015035?:
045B           1374   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:277: overflow_count++;
045B 05F8      1375            inc     _overflow_count
045D           1376   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:280: while(P0_1!=1) // Wait for the signal to be one
045D 8000      1377            sjmp    L015009?
045F           1378   L015014?:
045F 2081F0    1379            jb      _P0_1,L015016?
0462           1380   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:282: if(TF0==1) // Did the 16-bit timer overflow?
0462           1381   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:284: TF0=0;
0462 108D30    1382            jbc     _TF0,L015037?
0465 8000      1383            sjmp    L015014?
0467           1384   L015037?:
0467           1385   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:285: overflow_count++;
0467 05F8      1386            inc     _overflow_count
0469 8000      1387            sjmp    L015014?
046B           1388   L015016?:
046B           1389   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:288: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
046B C28C      1390            clr     _TR0
046D           1391   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:289: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
046D 85F882    1392            mov     dpl,_overflow_count
0470 120000    1393            lcall   ___uchar2fs
0473 AA82      1394            mov     r2,dpl
0475 AB83      1395            mov     r3,dph
0477 ACF0      1396            mov     r4,b
0479 FD        1397            mov     r5,a
047A C002      1398            push    ar2
047C C003      1399            push    ar3
047E C004      1400            push    ar4
0480 C005      1401            push    ar5
0482 900000    1402            mov     dptr,#0x0000
0485 75F080    1403            mov     b,#0x80
0488 7447      1404            mov     a,#0x47
048A 120000    1405            lcall   ___fsmul
048D AA82      1406            mov     r2,dpl
048F AB83      1407            mov     r3,dph
0491 ACF0      1408            mov     r4,b
0493 FD        1409            mov     r5,a
0494 E581      1410            mov     a,sp
0496 24FC      1411            add     a,#0xfc
0498 F581      1412            mov     sp,a
049A 858C82    1413            mov     dpl,_TH0
049D C002      1414            push    ar2
049F C003      1415            push    ar3
04A1 C004      1416            push    ar4
04A3 C005      1417            push    ar5
04A5 120000    1418            lcall   ___uchar2fs
04A8 AE82      1419            mov     r6,dpl
04AA AF83      1420            mov     r7,dph
04AC A8F0      1421            mov     r0,b
04AE F9        1422            mov     r1,a
04AF C006      1423            push    ar6
04B1 C007      1424            push    ar7
04B3 C000      1425            push    ar0
04B5 C001      1426            push    ar1
04B7 900000    1427            mov     dptr,#0x0000
04BA 75F080    1428            mov     b,#0x80
04BD 7443      1429            mov     a,#0x43
04BF 120000    1430            lcall   ___fsmul
04C2 AE82      1431            mov     r6,dpl
04C4 AF83      1432            mov     r7,dph
04C6 A8F0      1433            mov     r0,b
04C8 F9        1434            mov     r1,a
04C9 E581      1435            mov     a,sp
04CB 24FC      1436            add     a,#0xfc
04CD F581      1437            mov     sp,a
04CF D005      1438            pop     ar5
04D1 D004      1439            pop     ar4
04D3 D003      1440            pop     ar3
04D5 D002      1441            pop     ar2
04D7 C006      1442            push    ar6
04D9 C007      1443            push    ar7
04DB C000      1444            push    ar0
04DD C001      1445            push    ar1
04DF 8A82      1446            mov     dpl,r2
04E1 8B83      1447            mov     dph,r3
04E3 8CF0      1448            mov     b,r4
04E5 ED        1449            mov     a,r5
04E6 120000    1450            lcall   ___fsadd
04E9 AA82      1451            mov     r2,dpl
04EB AB83      1452            mov     r3,dph
04ED ACF0      1453            mov     r4,b
04EF FD        1454            mov     r5,a
04F0 E581      1455            mov     a,sp
04F2 24FC      1456            add     a,#0xfc
04F4 F581      1457            mov     sp,a
04F6 AE8A      1458            mov     r6,_TL0
04F8 7F00      1459            mov     r7,#0x00
04FA 8E82      1460            mov     dpl,r6
04FC 8F83      1461            mov     dph,r7
04FE C002      1462            push    ar2
0500 C003      1463            push    ar3
0502 C004      1464            push    ar4
0504 C005      1465            push    ar5
0506 120000    1466            lcall   ___sint2fs
0509 AE82      1467            mov     r6,dpl
050B AF83      1468            mov     r7,dph
050D A8F0      1469            mov     r0,b
050F F9        1470            mov     r1,a
0510 D005      1471            pop     ar5
0512 D004      1472            pop     ar4
0514 D003      1473            pop     ar3
0516 D002      1474            pop     ar2
0518 C006      1475            push    ar6
051A C007      1476            push    ar7
051C C000      1477            push    ar0
051E C001      1478            push    ar1
0520 8A82      1479            mov     dpl,r2
0522 8B83      1480            mov     dph,r3
0524 8CF0      1481            mov     b,r4
0526 ED        1482            mov     a,r5
0527 120000    1483            lcall   ___fsadd
052A AA82      1484            mov     r2,dpl
052C AB83      1485            mov     r3,dph
052E ACF0      1486            mov     r4,b
0530 FD        1487            mov     r5,a
0531 E581      1488            mov     a,sp
0533 24FC      1489            add     a,#0xfc
0535 F581      1490            mov     sp,a
0537 C002      1491            push    ar2
0539 C003      1492            push    ar3
053B C004      1493            push    ar4
053D C005      1494            push    ar5
053F 90F4FC    1495            mov     dptr,#0xF4FC
0542 75F032    1496            mov     b,#0x32
0545 7434      1497            mov     a,#0x34
0547 120000    1498            lcall   ___fsmul
054A AA82      1499            mov     r2,dpl
054C AB83      1500            mov     r3,dph
054E ACF0      1501            mov     r4,b
0550 FD        1502            mov     r5,a
0551 E581      1503            mov     a,sp
0553 24FC      1504            add     a,#0xfc
0555 F581      1505            mov     sp,a
0557           1506   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:292: writeOutputBuffer(output_buffer, PtoC(period));
0557 8A82      1507            mov     dpl,r2
0559 8B83      1508            mov     dph,r3
055B 8CF0      1509            mov     b,r4
055D ED        1510            mov     a,r5
055E 120000    1511            lcall   _PtoC
0561 858240    1512            mov     _writeOutputBuffer_PARM_2,dpl
0564 858341    1513            mov     (_writeOutputBuffer_PARM_2 + 1),dph
0567 85F042    1514            mov     (_writeOutputBuffer_PARM_2 + 2),b
056A F543      1515            mov     (_writeOutputBuffer_PARM_2 + 3),a
056C 90B0B0    1516            mov     dptr,#_main_output_buffer_1_57
056F 75F040    1517            mov     b,#0x40
0572 120000    1518            lcall   _writeOutputBuffer
0575           1519   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:295: LCDprint(output_buffer, 1, 1);
0575 75B801    1520            mov     _LCDprint_PARM_2,#0x01
0578 D2F0      1521            setb    _LCDprint_PARM_3
057A 90B0B0    1522            mov     dptr,#_main_output_buffer_1_57
057D 75F040    1523            mov     b,#0x40
0580 120000    1524            lcall   _LCDprint
0583 020000    1525            ljmp    L015018?
0586           1526            rseg R_CSEG
0586           1527   
0000           1528            rseg R_XINIT
0000           1529   
0000           1530            rseg R_CONST
0000           1531   __str_0:
0000 43203D20  1532            db 'C = %.4f%cF'
     252E3466
     256346
000B 00        1533            db 0x00
000C           1534   __str_1:
000C 1B        1535            db 0x1B
000D 5B324A    1536            db '[2J'
0010 00        1537            db 0x00
0011           1538   __str_2:
0011 45464D38  1539            db 'EFM8 Period measurement at pin P0.1 using Timer 0.'
     20506572
     696F6420
     6D656173
     7572656D
     656E7420
     61742070
     696E2050
     302E3120
     7573696E
     67205469
     6D657220
     302E
0043 0A        1540            db 0x0A
0044 46696C65  1541            db 'File: %s'
     3A202573
004C 0A        1542            db 0x0A
004D 436F6D70  1543            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
005D 0A        1544            db 0x0A
005E 0A        1545            db 0x0A
005F 00        1546            db 0x00
0060           1547   __str_3:
0060 433A      1548            db 'C:'
0062 5C        1549            db 0x5C
0063 55736572  1550            db 'Users'
     73
0068 5C        1551            db 0x5C
0069 6B636772  1552            db 'kcgro'
     6F
006E 5C        1553            db 0x5C
006F 446F6375  1554            db 'Documents'
     6D656E74
     73
0078 5C        1555            db 0x5C
0079 47697448  1556            db 'GitHub'
     7562
007F 5C        1557            db 0x5C
0080 454C4543  1558            db 'ELEC291'
     323931
0087 5C        1559            db 0x5C
0088 4C414234  1560            db 'LAB4'
008C 5C        1561            db 0x5C
008D 50657269  1562            db 'PeriodEFM8.c'
     6F644546
     4D382E63
0099 00        1563            db 0x00
009A           1564   __str_4:
009A 46656220  1565            db 'Feb 28 2023'
     32382032
     303233
00A5 00        1566            db 0x00
00A6           1567   __str_5:
00A6 31343A35  1568            db '14:59:27'
     393A3237
00AE 00        1569            db 0x00
00AF           1570   
0003           1571            CSEG
0003           1572   
0003           1573   end

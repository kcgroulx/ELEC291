0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 01 13:06:01 2023
0000              5   ;--------------------------------------------------------
                  5   $name PeriodEFM8
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _writeOutputBuffer
0000             29            public _PtoC
0000             30            public _TIMER0_Init
0000             31            public _getsn
0000             32            public _LCDprint
0000             33            public _LCD_4BIT
0000             34            public _WriteCommand
0000             35            public _WriteData
0000             36            public _LCD_byte
0000             37            public _LCD_pulse
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public __c51_external_startup
0000             41            public _LCDprint_PARM_3
0000             42            public _writeOutputBuffer_PARM_2
0000             43            public _getsn_PARM_2
0000             44            public _LCDprint_PARM_2
0000             45            public _overflow_count
0000             46   ;--------------------------------------------------------
0000             47   ; Special Function Registers
0000             48   ;--------------------------------------------------------
0000             49   _ACC            DATA 0xe0
0000             50   _ADC0ASAH       DATA 0xb6
0000             51   _ADC0ASAL       DATA 0xb5
0000             52   _ADC0ASCF       DATA 0xa1
0000             53   _ADC0ASCT       DATA 0xc7
0000             54   _ADC0CF0        DATA 0xbc
0000             55   _ADC0CF1        DATA 0xb9
0000             56   _ADC0CF2        DATA 0xdf
0000             57   _ADC0CN0        DATA 0xe8
0000             58   _ADC0CN1        DATA 0xb2
0000             59   _ADC0CN2        DATA 0xb3
0000             60   _ADC0GTH        DATA 0xc4
0000             61   _ADC0GTL        DATA 0xc3
0000             62   _ADC0H          DATA 0xbe
0000             63   _ADC0L          DATA 0xbd
0000             64   _ADC0LTH        DATA 0xc6
0000             65   _ADC0LTL        DATA 0xc5
0000             66   _ADC0MX         DATA 0xbb
0000             67   _B              DATA 0xf0
0000             68   _CKCON0         DATA 0x8e
0000             69   _CKCON1         DATA 0xa6
0000             70   _CLEN0          DATA 0xc6
0000             71   _CLIE0          DATA 0xc7
0000             72   _CLIF0          DATA 0xe8
0000             73   _CLKSEL         DATA 0xa9
0000             74   _CLOUT0         DATA 0xd1
0000             75   _CLU0CF         DATA 0xb1
0000             76   _CLU0FN         DATA 0xaf
0000             77   _CLU0MX         DATA 0x84
0000             78   _CLU1CF         DATA 0xb3
0000             79   _CLU1FN         DATA 0xb2
0000             80   _CLU1MX         DATA 0x85
0000             81   _CLU2CF         DATA 0xb6
0000             82   _CLU2FN         DATA 0xb5
0000             83   _CLU2MX         DATA 0x91
0000             84   _CLU3CF         DATA 0xbf
0000             85   _CLU3FN         DATA 0xbe
0000             86   _CLU3MX         DATA 0xae
0000             87   _CMP0CN0        DATA 0x9b
0000             88   _CMP0CN1        DATA 0x99
0000             89   _CMP0MD         DATA 0x9d
0000             90   _CMP0MX         DATA 0x9f
0000             91   _CMP1CN0        DATA 0xbf
0000             92   _CMP1CN1        DATA 0xac
0000             93   _CMP1MD         DATA 0xab
0000             94   _CMP1MX         DATA 0xaa
0000             95   _CRC0CN0        DATA 0xce
0000             96   _CRC0CN1        DATA 0x86
0000             97   _CRC0CNT        DATA 0xd3
0000             98   _CRC0DAT        DATA 0xcb
0000             99   _CRC0FLIP       DATA 0xcf
0000            100   _CRC0IN         DATA 0xca
0000            101   _CRC0ST         DATA 0xd2
0000            102   _DAC0CF0        DATA 0x91
0000            103   _DAC0CF1        DATA 0x92
0000            104   _DAC0H          DATA 0x85
0000            105   _DAC0L          DATA 0x84
0000            106   _DAC1CF0        DATA 0x93
0000            107   _DAC1CF1        DATA 0x94
0000            108   _DAC1H          DATA 0x8a
0000            109   _DAC1L          DATA 0x89
0000            110   _DAC2CF0        DATA 0x95
0000            111   _DAC2CF1        DATA 0x96
0000            112   _DAC2H          DATA 0x8c
0000            113   _DAC2L          DATA 0x8b
0000            114   _DAC3CF0        DATA 0x9a
0000            115   _DAC3CF1        DATA 0x9c
0000            116   _DAC3H          DATA 0x8e
0000            117   _DAC3L          DATA 0x8d
0000            118   _DACGCF0        DATA 0x88
0000            119   _DACGCF1        DATA 0x98
0000            120   _DACGCF2        DATA 0xa2
0000            121   _DERIVID        DATA 0xad
0000            122   _DEVICEID       DATA 0xb5
0000            123   _DPH            DATA 0x83
0000            124   _DPL            DATA 0x82
0000            125   _EIE1           DATA 0xe6
0000            126   _EIE2           DATA 0xf3
0000            127   _EIP1           DATA 0xbb
0000            128   _EIP1H          DATA 0xee
0000            129   _EIP2           DATA 0xed
0000            130   _EIP2H          DATA 0xf6
0000            131   _EMI0CN         DATA 0xe7
0000            132   _FLKEY          DATA 0xb7
0000            133   _HFO0CAL        DATA 0xc7
0000            134   _HFO1CAL        DATA 0xd6
0000            135   _HFOCN          DATA 0xef
0000            136   _I2C0ADM        DATA 0xff
0000            137   _I2C0CN0        DATA 0xba
0000            138   _I2C0DIN        DATA 0xbc
0000            139   _I2C0DOUT       DATA 0xbb
0000            140   _I2C0FCN0       DATA 0xad
0000            141   _I2C0FCN1       DATA 0xab
0000            142   _I2C0FCT        DATA 0xf5
0000            143   _I2C0SLAD       DATA 0xbd
0000            144   _I2C0STAT       DATA 0xb9
0000            145   _IE             DATA 0xa8
0000            146   _IP             DATA 0xb8
0000            147   _IPH            DATA 0xf2
0000            148   _IT01CF         DATA 0xe4
0000            149   _LFO0CN         DATA 0xb1
0000            150   _P0             DATA 0x80
0000            151   _P0MASK         DATA 0xfe
0000            152   _P0MAT          DATA 0xfd
0000            153   _P0MDIN         DATA 0xf1
0000            154   _P0MDOUT        DATA 0xa4
0000            155   _P0SKIP         DATA 0xd4
0000            156   _P1             DATA 0x90
0000            157   _P1MASK         DATA 0xee
0000            158   _P1MAT          DATA 0xed
0000            159   _P1MDIN         DATA 0xf2
0000            160   _P1MDOUT        DATA 0xa5
0000            161   _P1SKIP         DATA 0xd5
0000            162   _P2             DATA 0xa0
0000            163   _P2MASK         DATA 0xfc
0000            164   _P2MAT          DATA 0xfb
0000            165   _P2MDIN         DATA 0xf3
0000            166   _P2MDOUT        DATA 0xa6
0000            167   _P2SKIP         DATA 0xcc
0000            168   _P3             DATA 0xb0
0000            169   _P3MDIN         DATA 0xf4
0000            170   _P3MDOUT        DATA 0x9c
0000            171   _PCA0CENT       DATA 0x9e
0000            172   _PCA0CLR        DATA 0x9c
0000            173   _PCA0CN0        DATA 0xd8
0000            174   _PCA0CPH0       DATA 0xfc
0000            175   _PCA0CPH1       DATA 0xea
0000            176   _PCA0CPH2       DATA 0xec
0000            177   _PCA0CPH3       DATA 0xf5
0000            178   _PCA0CPH4       DATA 0x85
0000            179   _PCA0CPH5       DATA 0xde
0000            180   _PCA0CPL0       DATA 0xfb
0000            181   _PCA0CPL1       DATA 0xe9
0000            182   _PCA0CPL2       DATA 0xeb
0000            183   _PCA0CPL3       DATA 0xf4
0000            184   _PCA0CPL4       DATA 0x84
0000            185   _PCA0CPL5       DATA 0xdd
0000            186   _PCA0CPM0       DATA 0xda
0000            187   _PCA0CPM1       DATA 0xdb
0000            188   _PCA0CPM2       DATA 0xdc
0000            189   _PCA0CPM3       DATA 0xae
0000            190   _PCA0CPM4       DATA 0xaf
0000            191   _PCA0CPM5       DATA 0xcc
0000            192   _PCA0H          DATA 0xfa
0000            193   _PCA0L          DATA 0xf9
0000            194   _PCA0MD         DATA 0xd9
0000            195   _PCA0POL        DATA 0x96
0000            196   _PCA0PWM        DATA 0xf7
0000            197   _PCON0          DATA 0x87
0000            198   _PCON1          DATA 0xcd
0000            199   _PFE0CN         DATA 0xc1
0000            200   _PRTDRV         DATA 0xf6
0000            201   _PSCTL          DATA 0x8f
0000            202   _PSTAT0         DATA 0xaa
0000            203   _PSW            DATA 0xd0
0000            204   _REF0CN         DATA 0xd1
0000            205   _REG0CN         DATA 0xc9
0000            206   _REVID          DATA 0xb6
0000            207   _RSTSRC         DATA 0xef
0000            208   _SBCON1         DATA 0x94
0000            209   _SBRLH1         DATA 0x96
0000            210   _SBRLL1         DATA 0x95
0000            211   _SBUF           DATA 0x99
0000            212   _SBUF0          DATA 0x99
0000            213   _SBUF1          DATA 0x92
0000            214   _SCON           DATA 0x98
0000            215   _SCON0          DATA 0x98
0000            216   _SCON1          DATA 0xc8
0000            217   _SFRPAGE        DATA 0xa7
0000            218   _SFRPGCN        DATA 0xbc
0000            219   _SFRSTACK       DATA 0xd7
0000            220   _SMB0ADM        DATA 0xd6
0000            221   _SMB0ADR        DATA 0xd7
0000            222   _SMB0CF         DATA 0xc1
0000            223   _SMB0CN0        DATA 0xc0
0000            224   _SMB0DAT        DATA 0xc2
0000            225   _SMB0FCN0       DATA 0xc3
0000            226   _SMB0FCN1       DATA 0xc4
0000            227   _SMB0FCT        DATA 0xef
0000            228   _SMB0RXLN       DATA 0xc5
0000            229   _SMB0TC         DATA 0xac
0000            230   _SMOD1          DATA 0x93
0000            231   _SP             DATA 0x81
0000            232   _SPI0CFG        DATA 0xa1
0000            233   _SPI0CKR        DATA 0xa2
0000            234   _SPI0CN0        DATA 0xf8
0000            235   _SPI0DAT        DATA 0xa3
0000            236   _SPI0FCN0       DATA 0x9a
0000            237   _SPI0FCN1       DATA 0x9b
0000            238   _SPI0FCT        DATA 0xf7
0000            239   _SPI0PCF        DATA 0xdf
0000            240   _TCON           DATA 0x88
0000            241   _TH0            DATA 0x8c
0000            242   _TH1            DATA 0x8d
0000            243   _TL0            DATA 0x8a
0000            244   _TL1            DATA 0x8b
0000            245   _TMOD           DATA 0x89
0000            246   _TMR2CN0        DATA 0xc8
0000            247   _TMR2CN1        DATA 0xfd
0000            248   _TMR2H          DATA 0xcf
0000            249   _TMR2L          DATA 0xce
0000            250   _TMR2RLH        DATA 0xcb
0000            251   _TMR2RLL        DATA 0xca
0000            252   _TMR3CN0        DATA 0x91
0000            253   _TMR3CN1        DATA 0xfe
0000            254   _TMR3H          DATA 0x95
0000            255   _TMR3L          DATA 0x94
0000            256   _TMR3RLH        DATA 0x93
0000            257   _TMR3RLL        DATA 0x92
0000            258   _TMR4CN0        DATA 0x98
0000            259   _TMR4CN1        DATA 0xff
0000            260   _TMR4H          DATA 0xa5
0000            261   _TMR4L          DATA 0xa4
0000            262   _TMR4RLH        DATA 0xa3
0000            263   _TMR4RLL        DATA 0xa2
0000            264   _TMR5CN0        DATA 0xc0
0000            265   _TMR5CN1        DATA 0xf1
0000            266   _TMR5H          DATA 0xd5
0000            267   _TMR5L          DATA 0xd4
0000            268   _TMR5RLH        DATA 0xd3
0000            269   _TMR5RLL        DATA 0xd2
0000            270   _UART0PCF       DATA 0xd9
0000            271   _UART1FCN0      DATA 0x9d
0000            272   _UART1FCN1      DATA 0xd8
0000            273   _UART1FCT       DATA 0xfa
0000            274   _UART1LIN       DATA 0x9e
0000            275   _UART1PCF       DATA 0xda
0000            276   _VDM0CN         DATA 0xff
0000            277   _WDTCN          DATA 0x97
0000            278   _XBR0           DATA 0xe1
0000            279   _XBR1           DATA 0xe2
0000            280   _XBR2           DATA 0xe3
0000            281   _XOSC0CN        DATA 0x86
0000            282   _DPTR           DATA 0x8382
0000            283   _TMR2RL         DATA 0xcbca
0000            284   _TMR3RL         DATA 0x9392
0000            285   _TMR4RL         DATA 0xa3a2
0000            286   _TMR5RL         DATA 0xd3d2
0000            287   _TMR0           DATA 0x8c8a
0000            288   _TMR1           DATA 0x8d8b
0000            289   _TMR2           DATA 0xcfce
0000            290   _TMR3           DATA 0x9594
0000            291   _TMR4           DATA 0xa5a4
0000            292   _TMR5           DATA 0xd5d4
0000            293   _SBRL1          DATA 0x9695
0000            294   _PCA0           DATA 0xfaf9
0000            295   _PCA0CP0        DATA 0xfcfb
0000            296   _PCA0CP1        DATA 0xeae9
0000            297   _PCA0CP2        DATA 0xeceb
0000            298   _PCA0CP3        DATA 0xf5f4
0000            299   _PCA0CP4        DATA 0x8584
0000            300   _PCA0CP5        DATA 0xdedd
0000            301   _ADC0ASA        DATA 0xb6b5
0000            302   _ADC0GT         DATA 0xc4c3
0000            303   _ADC0           DATA 0xbebd
0000            304   _ADC0LT         DATA 0xc6c5
0000            305   _DAC0           DATA 0x8584
0000            306   _DAC1           DATA 0x8a89
0000            307   _DAC2           DATA 0x8c8b
0000            308   _DAC3           DATA 0x8e8d
0000            309   ;--------------------------------------------------------
0000            310   ; special function bits
0000            311   ;--------------------------------------------------------
0000            312   _ACC_0          BIT 0xe0
0000            313   _ACC_1          BIT 0xe1
0000            314   _ACC_2          BIT 0xe2
0000            315   _ACC_3          BIT 0xe3
0000            316   _ACC_4          BIT 0xe4
0000            317   _ACC_5          BIT 0xe5
0000            318   _ACC_6          BIT 0xe6
0000            319   _ACC_7          BIT 0xe7
0000            320   _TEMPE          BIT 0xe8
0000            321   _ADGN0          BIT 0xe9
0000            322   _ADGN1          BIT 0xea
0000            323   _ADWINT         BIT 0xeb
0000            324   _ADBUSY         BIT 0xec
0000            325   _ADINT          BIT 0xed
0000            326   _IPOEN          BIT 0xee
0000            327   _ADEN           BIT 0xef
0000            328   _B_0            BIT 0xf0
0000            329   _B_1            BIT 0xf1
0000            330   _B_2            BIT 0xf2
0000            331   _B_3            BIT 0xf3
0000            332   _B_4            BIT 0xf4
0000            333   _B_5            BIT 0xf5
0000            334   _B_6            BIT 0xf6
0000            335   _B_7            BIT 0xf7
0000            336   _C0FIF          BIT 0xe8
0000            337   _C0RIF          BIT 0xe9
0000            338   _C1FIF          BIT 0xea
0000            339   _C1RIF          BIT 0xeb
0000            340   _C2FIF          BIT 0xec
0000            341   _C2RIF          BIT 0xed
0000            342   _C3FIF          BIT 0xee
0000            343   _C3RIF          BIT 0xef
0000            344   _D1SRC0         BIT 0x88
0000            345   _D1SRC1         BIT 0x89
0000            346   _D1AMEN         BIT 0x8a
0000            347   _D01REFSL       BIT 0x8b
0000            348   _D3SRC0         BIT 0x8c
0000            349   _D3SRC1         BIT 0x8d
0000            350   _D3AMEN         BIT 0x8e
0000            351   _D23REFSL       BIT 0x8f
0000            352   _D0UDIS         BIT 0x98
0000            353   _D1UDIS         BIT 0x99
0000            354   _D2UDIS         BIT 0x9a
0000            355   _D3UDIS         BIT 0x9b
0000            356   _EX0            BIT 0xa8
0000            357   _ET0            BIT 0xa9
0000            358   _EX1            BIT 0xaa
0000            359   _ET1            BIT 0xab
0000            360   _ES0            BIT 0xac
0000            361   _ET2            BIT 0xad
0000            362   _ESPI0          BIT 0xae
0000            363   _EA             BIT 0xaf
0000            364   _PX0            BIT 0xb8
0000            365   _PT0            BIT 0xb9
0000            366   _PX1            BIT 0xba
0000            367   _PT1            BIT 0xbb
0000            368   _PS0            BIT 0xbc
0000            369   _PT2            BIT 0xbd
0000            370   _PSPI0          BIT 0xbe
0000            371   _P0_0           BIT 0x80
0000            372   _P0_1           BIT 0x81
0000            373   _P0_2           BIT 0x82
0000            374   _P0_3           BIT 0x83
0000            375   _P0_4           BIT 0x84
0000            376   _P0_5           BIT 0x85
0000            377   _P0_6           BIT 0x86
0000            378   _P0_7           BIT 0x87
0000            379   _P1_0           BIT 0x90
0000            380   _P1_1           BIT 0x91
0000            381   _P1_2           BIT 0x92
0000            382   _P1_3           BIT 0x93
0000            383   _P1_4           BIT 0x94
0000            384   _P1_5           BIT 0x95
0000            385   _P1_6           BIT 0x96
0000            386   _P1_7           BIT 0x97
0000            387   _P2_0           BIT 0xa0
0000            388   _P2_1           BIT 0xa1
0000            389   _P2_2           BIT 0xa2
0000            390   _P2_3           BIT 0xa3
0000            391   _P2_4           BIT 0xa4
0000            392   _P2_5           BIT 0xa5
0000            393   _P2_6           BIT 0xa6
0000            394   _P3_0           BIT 0xb0
0000            395   _P3_1           BIT 0xb1
0000            396   _P3_2           BIT 0xb2
0000            397   _P3_3           BIT 0xb3
0000            398   _P3_4           BIT 0xb4
0000            399   _P3_7           BIT 0xb7
0000            400   _CCF0           BIT 0xd8
0000            401   _CCF1           BIT 0xd9
0000            402   _CCF2           BIT 0xda
0000            403   _CCF3           BIT 0xdb
0000            404   _CCF4           BIT 0xdc
0000            405   _CCF5           BIT 0xdd
0000            406   _CR             BIT 0xde
0000            407   _CF             BIT 0xdf
0000            408   _PARITY         BIT 0xd0
0000            409   _F1             BIT 0xd1
0000            410   _OV             BIT 0xd2
0000            411   _RS0            BIT 0xd3
0000            412   _RS1            BIT 0xd4
0000            413   _F0             BIT 0xd5
0000            414   _AC             BIT 0xd6
0000            415   _CY             BIT 0xd7
0000            416   _RI             BIT 0x98
0000            417   _TI             BIT 0x99
0000            418   _RB8            BIT 0x9a
0000            419   _TB8            BIT 0x9b
0000            420   _REN            BIT 0x9c
0000            421   _CE             BIT 0x9d
0000            422   _SMODE          BIT 0x9e
0000            423   _RI1            BIT 0xc8
0000            424   _TI1            BIT 0xc9
0000            425   _RBX1           BIT 0xca
0000            426   _TBX1           BIT 0xcb
0000            427   _REN1           BIT 0xcc
0000            428   _PERR1          BIT 0xcd
0000            429   _OVR1           BIT 0xce
0000            430   _SI             BIT 0xc0
0000            431   _ACK            BIT 0xc1
0000            432   _ARBLOST        BIT 0xc2
0000            433   _ACKRQ          BIT 0xc3
0000            434   _STO            BIT 0xc4
0000            435   _STA            BIT 0xc5
0000            436   _TXMODE         BIT 0xc6
0000            437   _MASTER         BIT 0xc7
0000            438   _SPIEN          BIT 0xf8
0000            439   _TXNF           BIT 0xf9
0000            440   _NSSMD0         BIT 0xfa
0000            441   _NSSMD1         BIT 0xfb
0000            442   _RXOVRN         BIT 0xfc
0000            443   _MODF           BIT 0xfd
0000            444   _WCOL           BIT 0xfe
0000            445   _SPIF           BIT 0xff
0000            446   _IT0            BIT 0x88
0000            447   _IE0            BIT 0x89
0000            448   _IT1            BIT 0x8a
0000            449   _IE1            BIT 0x8b
0000            450   _TR0            BIT 0x8c
0000            451   _TF0            BIT 0x8d
0000            452   _TR1            BIT 0x8e
0000            453   _TF1            BIT 0x8f
0000            454   _T2XCLK0        BIT 0xc8
0000            455   _T2XCLK1        BIT 0xc9
0000            456   _TR2            BIT 0xca
0000            457   _T2SPLIT        BIT 0xcb
0000            458   _TF2CEN         BIT 0xcc
0000            459   _TF2LEN         BIT 0xcd
0000            460   _TF2L           BIT 0xce
0000            461   _TF2H           BIT 0xcf
0000            462   _T4XCLK0        BIT 0x98
0000            463   _T4XCLK1        BIT 0x99
0000            464   _TR4            BIT 0x9a
0000            465   _T4SPLIT        BIT 0x9b
0000            466   _TF4CEN         BIT 0x9c
0000            467   _TF4LEN         BIT 0x9d
0000            468   _TF4L           BIT 0x9e
0000            469   _TF4H           BIT 0x9f
0000            470   _T5XCLK0        BIT 0xc0
0000            471   _T5XCLK1        BIT 0xc1
0000            472   _TR5            BIT 0xc2
0000            473   _T5SPLIT        BIT 0xc3
0000            474   _TF5CEN         BIT 0xc4
0000            475   _TF5LEN         BIT 0xc5
0000            476   _TF5L           BIT 0xc6
0000            477   _TF5H           BIT 0xc7
0000            478   _RIE            BIT 0xd8
0000            479   _RXTO0          BIT 0xd9
0000            480   _RXTO1          BIT 0xda
0000            481   _RFRQ           BIT 0xdb
0000            482   _TIE            BIT 0xdc
0000            483   _TXHOLD         BIT 0xdd
0000            484   _TXNF1          BIT 0xde
0000            485   _TFRQ           BIT 0xdf
0000            486   ;--------------------------------------------------------
0000            487   ; overlayable register banks
0000            488   ;--------------------------------------------------------
0000            489            rbank0 segment data overlay
0000            490   ;--------------------------------------------------------
0000            491   ; internal ram data
0000            492   ;--------------------------------------------------------
0000            493            rseg R_DSEG
0000            494   _overflow_count:
0000            495            ds 1
0001            496   _LCDprint_PARM_2:
0001            497            ds 1
0002            498   _getsn_PARM_2:
0002            499            ds 2
0004            500   _getsn_buff_1_43:
0004            501            ds 3
0007            502   _getsn_sloc0_1_0:
0007            503            ds 2
0009            504   _writeOutputBuffer_PARM_2:
0009            505            ds 4
000D            506   _main_mode_1_59:
000D            507            ds 2
000F            508   _main_output_buffer_1_59:
000F            509            ds 20
0023            510   ;--------------------------------------------------------
0023            511   ; overlayable items in internal ram 
0023            512   ;--------------------------------------------------------
0000            513            rseg    R_OSEG
0000            514   ;--------------------------------------------------------
0000            515   ; indirectly addressable internal ram data
0000            516   ;--------------------------------------------------------
0000            517            rseg R_ISEG
0000            518   ;--------------------------------------------------------
0000            519   ; absolute internal ram data
0000            520   ;--------------------------------------------------------
0000            521            DSEG
0000            522   ;--------------------------------------------------------
0000            523   ; bit data
0000            524   ;--------------------------------------------------------
0000            525            rseg R_BSEG
0000            526   _LCDprint_PARM_3:
0000            527            DBIT    1
0001            528   ;--------------------------------------------------------
0001            529   ; paged external ram data
0001            530   ;--------------------------------------------------------
0000            531            rseg R_PSEG
0000            532   ;--------------------------------------------------------
0000            533   ; external ram data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_XSEG
0000            536   ;--------------------------------------------------------
0000            537   ; absolute external ram data
0000            538   ;--------------------------------------------------------
0000            539            XSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external initialized ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_IXSEG
0000            544            rseg R_HOME
0000            545            rseg R_GSINIT
0000            546            rseg R_CSEG
0000            547   ;--------------------------------------------------------
0000            548   ; Reset entry point and interrupt vectors
0000            549   ;--------------------------------------------------------
0000            550            CSEG at 0x0000
0000 020000     551            ljmp    _crt0
0003            552   ;--------------------------------------------------------
0003            553   ; global & static initialisations
0003            554   ;--------------------------------------------------------
0000            555            rseg R_HOME
0000            556            rseg R_GSINIT
0000            557            rseg R_GSINIT
0000            558   ;--------------------------------------------------------
0000            559   ; data variables initialization
0000            560   ;--------------------------------------------------------
0000            561            rseg R_DINIT
0000            562            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            563   ;--------------------------------------------------------
0000            564   ; code
0000            565   ;--------------------------------------------------------
0000            566            rseg R_CSEG
0000            567   ;------------------------------------------------------------
0000            568   ;Allocation info for local variables in function '_c51_external_startup'
0000            569   ;------------------------------------------------------------
0000            570   ;------------------------------------------------------------
0000            571   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:25: char _c51_external_startup (void)
0000            572   ;        -----------------------------------------
0000            573   ;         function _c51_external_startup
0000            574   ;        -----------------------------------------
0000            575   __c51_external_startup:
0000            576            using   0
0000            577   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:28: SFRPAGE = 0x00;
0000 75A700     578            mov     _SFRPAGE,#0x00
0003            579   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:29: WDTCN = 0xDE; //First key
0003 7597DE     580            mov     _WDTCN,#0xDE
0006            581   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:30: WDTCN = 0xAD; //Second key
0006 7597AD     582            mov     _WDTCN,#0xAD
0009            583   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:32: VDM0CN |= 0x80;
0009 43FF80     584            orl     _VDM0CN,#0x80
000C            585   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:33: RSTSRC = 0x02;
000C 75EF02     586            mov     _RSTSRC,#0x02
000F            587   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:40: SFRPAGE = 0x10;
000F 75A710     588            mov     _SFRPAGE,#0x10
0012            589   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:41: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     590            mov     _PFE0CN,#0x20
0015            591   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:42: SFRPAGE = 0x00;
0015 75A700     592            mov     _SFRPAGE,#0x00
0018            593   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:63: CLKSEL = 0x00;
0018 75A900     594            mov     _CLKSEL,#0x00
001B            595   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:64: CLKSEL = 0x00;
001B 75A900     596            mov     _CLKSEL,#0x00
001E            597   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:65: while ((CLKSEL & 0x80) == 0);
001E            598   L002001?:
001E E5A9       599            mov     a,_CLKSEL
0020 30E770     600            jnb     acc.7,L002001?
0023            601   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:66: CLKSEL = 0x03;
0023 75A903     602            mov     _CLKSEL,#0x03
0026            603   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:67: CLKSEL = 0x03;
0026 75A903     604            mov     _CLKSEL,#0x03
0029            605   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:68: while ((CLKSEL & 0x80) == 0);
0029            606   L002004?:
0029 E5A9       607            mov     a,_CLKSEL
002B 30E7F0     608            jnb     acc.7,L002004?
002E            609   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:73: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     610            orl     _P0MDOUT,#0x10
0031            611   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:74: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     612            mov     _XBR0,#0x01
0034            613   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:75: XBR1     = 0X00;
0034 75E200     614            mov     _XBR1,#0x00
0037            615   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:76: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     616            mov     _XBR2,#0x40
003A            617   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:82: SCON0 = 0x10;
003A 759810     618            mov     _SCON0,#0x10
003D            619   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:83: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     620            mov     _CKCON0,_CKCON0
0040            621   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:84: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     622            mov     _TH1,#0xE6
0043            623   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:85: TL1 = TH1;      // Init Timer1
0043 858D8B     624            mov     _TL1,_TH1
0046            625   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:86: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     626            anl     _TMOD,#0x0F
0049            627   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:87: TMOD |=  0x20;                       
0049 438920     628            orl     _TMOD,#0x20
004C            629   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:88: TR1 = 1; // START Timer1
004C D28E       630            setb    _TR1
004E            631   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:89: TI = 1;  // Indicate TX0 ready
004E D299       632            setb    _TI
0050            633   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:91: return 0;
0050 758200     634            mov     dpl,#0x00
0053 22         635            ret
0054            636   ;------------------------------------------------------------
0054            637   ;Allocation info for local variables in function 'Timer3us'
0054            638   ;------------------------------------------------------------
0054            639   ;us                        Allocated to registers r2 
0054            640   ;i                         Allocated to registers r3 
0054            641   ;------------------------------------------------------------
0054            642   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:95: void Timer3us(unsigned char us)
0054            643   ;        -----------------------------------------
0054            644   ;         function Timer3us
0054            645   ;        -----------------------------------------
0054            646   _Timer3us:
0054 AA82       647            mov     r2,dpl
0056            648   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:100: CKCON0|=0b_0100_0000;
0056 438E40     649            orl     _CKCON0,#0x40
0059            650   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:102: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     651            mov     _TMR3RL,#0xB8
005C 7593FF     652            mov     (_TMR3RL >> 8),#0xFF
005F            653   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:103: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     654            mov     _TMR3,_TMR3RL
0062 859395     655            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            656   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:105: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     657            mov     _TMR3CN0,#0x04
0068            658   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       659            mov     r3,#0x00
006A            660   L003004?:
006A C3         661            clr     c
006B EB         662            mov     a,r3
006C 9A         663            subb    a,r2
006D 5000       664            jnc     L003007?
006F            665   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:108: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            666   L003001?:
006F E591       667            mov     a,_TMR3CN0
0071 30E7F0     668            jnb     acc.7,L003001?
0074            669   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:109: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     670            anl     _TMR3CN0,#0x7F
0077            671   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:106: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         672            inc     r3
0078 8000       673            sjmp    L003004?
007A            674   L003007?:
007A            675   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:111: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     676            mov     _TMR3CN0,#0x00
007D 22         677            ret
007E            678   ;------------------------------------------------------------
007E            679   ;Allocation info for local variables in function 'waitms'
007E            680   ;------------------------------------------------------------
007E            681   ;ms                        Allocated to registers r2 r3 
007E            682   ;j                         Allocated to registers r2 r3 
007E            683   ;------------------------------------------------------------
007E            684   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:114: void waitms (unsigned int ms)
007E            685   ;        -----------------------------------------
007E            686   ;         function waitms
007E            687   ;        -----------------------------------------
007E            688   _waitms:
007E AA82       689            mov     r2,dpl
0080 AB83       690            mov     r3,dph
0082            691   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:117: for(j=ms; j!=0; j--)
0082            692   L004001?:
0082 BA00B0     693            cjne    r2,#0x00,L004010?
0085 BB00B0     694            cjne    r3,#0x00,L004010?
0088 22         695            ret
0089            696   L004010?:
0089            697   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:119: Timer3us(249);
0089 7582F9     698            mov     dpl,#0xF9
008C C002       699            push    ar2
008E C003       700            push    ar3
0090 120000     701            lcall   _Timer3us
0093            702   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:120: Timer3us(249);
0093 7582F9     703            mov     dpl,#0xF9
0096 120000     704            lcall   _Timer3us
0099            705   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:121: Timer3us(249);
0099 7582F9     706            mov     dpl,#0xF9
009C 120000     707            lcall   _Timer3us
009F            708   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:122: Timer3us(250);
009F 7582FA     709            mov     dpl,#0xFA
00A2 120000     710            lcall   _Timer3us
00A5 D003       711            pop     ar3
00A7 D002       712            pop     ar2
00A9            713   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:117: for(j=ms; j!=0; j--)
00A9 1A         714            dec     r2
00AA BAFFF0     715            cjne    r2,#0xff,L004011?
00AD 1B         716            dec     r3
00AE            717   L004011?:
00AE 8000       718            sjmp    L004001?
00B0            719   ;------------------------------------------------------------
00B0            720   ;Allocation info for local variables in function 'LCD_pulse'
00B0            721   ;------------------------------------------------------------
00B0            722   ;------------------------------------------------------------
00B0            723   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:127: void LCD_pulse (void)
00B0            724   ;        -----------------------------------------
00B0            725   ;         function LCD_pulse
00B0            726   ;        -----------------------------------------
00B0            727   _LCD_pulse:
00B0            728   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:129: LCD_E=1;
00B0 D2A5       729            setb    _P2_5
00B2            730   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:130: Timer3us(40);
00B2 758228     731            mov     dpl,#0x28
00B5 120000     732            lcall   _Timer3us
00B8            733   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:131: LCD_E=0;
00B8 C2A5       734            clr     _P2_5
00BA 22         735            ret
00BB            736   ;------------------------------------------------------------
00BB            737   ;Allocation info for local variables in function 'LCD_byte'
00BB            738   ;------------------------------------------------------------
00BB            739   ;x                         Allocated to registers r2 
00BB            740   ;------------------------------------------------------------
00BB            741   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:134: void LCD_byte (unsigned char x)
00BB            742   ;        -----------------------------------------
00BB            743   ;         function LCD_byte
00BB            744   ;        -----------------------------------------
00BB            745   _LCD_byte:
00BB AA82       746            mov     r2,dpl
00BD            747   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:137: ACC=x; //Send high nible
00BD 8AE0       748            mov     _ACC,r2
00BF            749   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:138: LCD_D7=ACC_7;
00BF A2E7       750            mov     c,_ACC_7
00C1 92A1       751            mov     _P2_1,c
00C3            752   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:139: LCD_D6=ACC_6;
00C3 A2E6       753            mov     c,_ACC_6
00C5 92A2       754            mov     _P2_2,c
00C7            755   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:140: LCD_D5=ACC_5;
00C7 A2E5       756            mov     c,_ACC_5
00C9 92A3       757            mov     _P2_3,c
00CB            758   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:141: LCD_D4=ACC_4;
00CB A2E4       759            mov     c,_ACC_4
00CD 92A4       760            mov     _P2_4,c
00CF            761   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:142: LCD_pulse();
00CF C002       762            push    ar2
00D1 120000     763            lcall   _LCD_pulse
00D4            764   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:143: Timer3us(40);
00D4 758228     765            mov     dpl,#0x28
00D7 120000     766            lcall   _Timer3us
00DA D002       767            pop     ar2
00DC            768   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:144: ACC=x; //Send low nible
00DC 8AE0       769            mov     _ACC,r2
00DE            770   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:145: LCD_D7=ACC_3;
00DE A2E3       771            mov     c,_ACC_3
00E0 92A1       772            mov     _P2_1,c
00E2            773   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:146: LCD_D6=ACC_2;
00E2 A2E2       774            mov     c,_ACC_2
00E4 92A2       775            mov     _P2_2,c
00E6            776   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:147: LCD_D5=ACC_1;
00E6 A2E1       777            mov     c,_ACC_1
00E8 92A3       778            mov     _P2_3,c
00EA            779   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:148: LCD_D4=ACC_0;
00EA A2E0       780            mov     c,_ACC_0
00EC 92A4       781            mov     _P2_4,c
00EE            782   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:149: LCD_pulse();
00EE 020000     783            ljmp    _LCD_pulse
00F1            784   ;------------------------------------------------------------
00F1            785   ;Allocation info for local variables in function 'WriteData'
00F1            786   ;------------------------------------------------------------
00F1            787   ;x                         Allocated to registers r2 
00F1            788   ;------------------------------------------------------------
00F1            789   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:152: void WriteData (unsigned char x)
00F1            790   ;        -----------------------------------------
00F1            791   ;         function WriteData
00F1            792   ;        -----------------------------------------
00F1            793   _WriteData:
00F1 AA82       794            mov     r2,dpl
00F3            795   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:154: LCD_RS=1;
00F3 D2A6       796            setb    _P2_6
00F5            797   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:155: LCD_byte(x);
00F5 8A82       798            mov     dpl,r2
00F7 120000     799            lcall   _LCD_byte
00FA            800   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:156: waitms(2);
00FA 900002     801            mov     dptr,#0x0002
00FD 020000     802            ljmp    _waitms
0100            803   ;------------------------------------------------------------
0100            804   ;Allocation info for local variables in function 'WriteCommand'
0100            805   ;------------------------------------------------------------
0100            806   ;x                         Allocated to registers r2 
0100            807   ;------------------------------------------------------------
0100            808   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:159: void WriteCommand (unsigned char x)
0100            809   ;        -----------------------------------------
0100            810   ;         function WriteCommand
0100            811   ;        -----------------------------------------
0100            812   _WriteCommand:
0100 AA82       813            mov     r2,dpl
0102            814   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:161: LCD_RS=0;
0102 C2A6       815            clr     _P2_6
0104            816   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:162: LCD_byte(x);
0104 8A82       817            mov     dpl,r2
0106 120000     818            lcall   _LCD_byte
0109            819   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:163: waitms(5);
0109 900005     820            mov     dptr,#0x0005
010C 020000     821            ljmp    _waitms
010F            822   ;------------------------------------------------------------
010F            823   ;Allocation info for local variables in function 'LCD_4BIT'
010F            824   ;------------------------------------------------------------
010F            825   ;------------------------------------------------------------
010F            826   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:166: void LCD_4BIT (void)
010F            827   ;        -----------------------------------------
010F            828   ;         function LCD_4BIT
010F            829   ;        -----------------------------------------
010F            830   _LCD_4BIT:
010F            831   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:168: LCD_E=0; // Resting state of LCD's enable is zero
010F C2A5       832            clr     _P2_5
0111            833   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:170: waitms(20);
0111 900014     834            mov     dptr,#0x0014
0114 120000     835            lcall   _waitms
0117            836   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:172: WriteCommand(0x33);
0117 758233     837            mov     dpl,#0x33
011A 120000     838            lcall   _WriteCommand
011D            839   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:173: WriteCommand(0x33);
011D 758233     840            mov     dpl,#0x33
0120 120000     841            lcall   _WriteCommand
0123            842   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:174: WriteCommand(0x32); // Change to 4-bit mode
0123 758232     843            mov     dpl,#0x32
0126 120000     844            lcall   _WriteCommand
0129            845   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:177: WriteCommand(0x28);
0129 758228     846            mov     dpl,#0x28
012C 120000     847            lcall   _WriteCommand
012F            848   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:178: WriteCommand(0x0c);
012F 75820C     849            mov     dpl,#0x0C
0132 120000     850            lcall   _WriteCommand
0135            851   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:179: WriteCommand(0x01); // Clear screen command (takes some time)
0135 758201     852            mov     dpl,#0x01
0138 120000     853            lcall   _WriteCommand
013B            854   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:180: waitms(20); // Wait for clear screen command to finsih.
013B 900014     855            mov     dptr,#0x0014
013E 020000     856            ljmp    _waitms
0141            857   ;------------------------------------------------------------
0141            858   ;Allocation info for local variables in function 'LCDprint'
0141            859   ;------------------------------------------------------------
0141            860   ;line                      Allocated with name '_LCDprint_PARM_2'
0141            861   ;string                    Allocated to registers r2 r3 r4 
0141            862   ;j                         Allocated to registers r5 r6 
0141            863   ;------------------------------------------------------------
0141            864   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:183: void LCDprint(char * string, unsigned char line, bit clear)
0141            865   ;        -----------------------------------------
0141            866   ;         function LCDprint
0141            867   ;        -----------------------------------------
0141            868   _LCDprint:
0141 AA82       869            mov     r2,dpl
0143 AB83       870            mov     r3,dph
0145 ACF0       871            mov     r4,b
0147            872   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:187: WriteCommand(line==2?0xc0:0x80);
0147 7402       873            mov     a,#0x02
0149 B5C070     874            cjne    a,_LCDprint_PARM_2,L010013?
014C 7DC0       875            mov     r5,#0xC0
014E 8000       876            sjmp    L010014?
0150            877   L010013?:
0150 7D80       878            mov     r5,#0x80
0152            879   L010014?:
0152 8D82       880            mov     dpl,r5
0154 C002       881            push    ar2
0156 C003       882            push    ar3
0158 C004       883            push    ar4
015A 120000     884            lcall   _WriteCommand
015D            885   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:188: waitms(5);
015D 900005     886            mov     dptr,#0x0005
0160 120000     887            lcall   _waitms
0163 D004       888            pop     ar4
0165 D003       889            pop     ar3
0167 D002       890            pop     ar2
0169            891   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:189: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0169 7D00       892            mov     r5,#0x00
016B 7E00       893            mov     r6,#0x00
016D            894   L010003?:
016D ED         895            mov     a,r5
016E 2A         896            add     a,r2
016F FF         897            mov     r7,a
0170 EE         898            mov     a,r6
0171 3B         899            addc    a,r3
0172 F8         900            mov     r0,a
0173 8C01       901            mov     ar1,r4
0175 8F82       902            mov     dpl,r7
0177 8883       903            mov     dph,r0
0179 89F0       904            mov     b,r1
017B 120000     905            lcall   __gptrget
017E FF         906            mov     r7,a
017F 6000       907            jz      L010006?
0181 8F82       908            mov     dpl,r7
0183 C002       909            push    ar2
0185 C003       910            push    ar3
0187 C004       911            push    ar4
0189 C005       912            push    ar5
018B C006       913            push    ar6
018D 120000     914            lcall   _WriteData
0190 D006       915            pop     ar6
0192 D005       916            pop     ar5
0194 D004       917            pop     ar4
0196 D003       918            pop     ar3
0198 D002       919            pop     ar2
019A 0D         920            inc     r5
019B BD00F0     921            cjne    r5,#0x00,L010003?
019E 0E         922            inc     r6
019F 8000       923            sjmp    L010003?
01A1            924   L010006?:
01A1            925   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:190: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01A1 30E0B0     926            jnb     _LCDprint_PARM_3,L010011?
01A4 8D02       927            mov     ar2,r5
01A6 8E03       928            mov     ar3,r6
01A8            929   L010007?:
01A8 C3         930            clr     c
01A9 EA         931            mov     a,r2
01AA 9410       932            subb    a,#0x10
01AC EB         933            mov     a,r3
01AD 6480       934            xrl     a,#0x80
01AF 9480       935            subb    a,#0x80
01B1 5000       936            jnc     L010011?
01B3 758220     937            mov     dpl,#0x20
01B6 C002       938            push    ar2
01B8 C003       939            push    ar3
01BA 120000     940            lcall   _WriteData
01BD D003       941            pop     ar3
01BF D002       942            pop     ar2
01C1 0A         943            inc     r2
01C2 BA00F0     944            cjne    r2,#0x00,L010007?
01C5 0B         945            inc     r3
01C6 8000       946            sjmp    L010007?
01C8            947   L010011?:
01C8 22         948            ret
01C9            949   ;------------------------------------------------------------
01C9            950   ;Allocation info for local variables in function 'getsn'
01C9            951   ;------------------------------------------------------------
01C9            952   ;len                       Allocated with name '_getsn_PARM_2'
01C9            953   ;buff                      Allocated with name '_getsn_buff_1_43'
01C9            954   ;j                         Allocated with name '_getsn_sloc0_1_0'
01C9            955   ;c                         Allocated to registers r3 
01C9            956   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
01C9            957   ;------------------------------------------------------------
01C9            958   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:193: int getsn (char * buff, int len)
01C9            959   ;        -----------------------------------------
01C9            960   ;         function getsn
01C9            961   ;        -----------------------------------------
01C9            962   _getsn:
01C9 858210     963            mov     _getsn_buff_1_43,dpl
01CC 858311     964            mov     (_getsn_buff_1_43 + 1),dph
01CF 85F012     965            mov     (_getsn_buff_1_43 + 2),b
01D2            966   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:198: for(j=0; j<(len-1); j++)
01D2 E4         967            clr     a
01D3 F560       968            mov     _getsn_sloc0_1_0,a
01D5 F561       969            mov     (_getsn_sloc0_1_0 + 1),a
01D7 E570       970            mov     a,_getsn_PARM_2
01D9 24FF       971            add     a,#0xff
01DB FF         972            mov     r7,a
01DC E571       973            mov     a,(_getsn_PARM_2 + 1)
01DE 34FF       974            addc    a,#0xff
01E0 F8         975            mov     r0,a
01E1 7900       976            mov     r1,#0x00
01E3 7A00       977            mov     r2,#0x00
01E5            978   L011005?:
01E5 C3         979            clr     c
01E6 E9         980            mov     a,r1
01E7 9F         981            subb    a,r7
01E8 EA         982            mov     a,r2
01E9 6480       983            xrl     a,#0x80
01EB 88F0       984            mov     b,r0
01ED 63F080     985            xrl     b,#0x80
01F0 95F0       986            subb    a,b
01F2 5000       987            jnc     L011008?
01F4            988   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:200: c=getchar();
01F4 C002       989            push    ar2
01F6 C007       990            push    ar7
01F8 C000       991            push    ar0
01FA C001       992            push    ar1
01FC 120000     993            lcall   _getchar
01FF AB82       994            mov     r3,dpl
0201 D001       995            pop     ar1
0203 D000       996            pop     ar0
0205 D007       997            pop     ar7
0207 D002       998            pop     ar2
0209            999   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:201: if ( (c=='\n') || (c=='\r') )
0209 BB0AF0    1000            cjne    r3,#0x0A,L011015?
020C 8000      1001            sjmp    L011001?
020E           1002   L011015?:
020E BB0D70    1003            cjne    r3,#0x0D,L011002?
0211           1004   L011001?:
0211           1005   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:203: buff[j]=0;
0211 E560      1006            mov     a,_getsn_sloc0_1_0
0213 2510      1007            add     a,_getsn_buff_1_43
0215 FC        1008            mov     r4,a
0216 E561      1009            mov     a,(_getsn_sloc0_1_0 + 1)
0218 3511      1010            addc    a,(_getsn_buff_1_43 + 1)
021A FD        1011            mov     r5,a
021B AE12      1012            mov     r6,(_getsn_buff_1_43 + 2)
021D 8C82      1013            mov     dpl,r4
021F 8D83      1014            mov     dph,r5
0221 8EF0      1015            mov     b,r6
0223 E4        1016            clr     a
0224 120000    1017            lcall   __gptrput
0227           1018   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:204: return j;
0227 856082    1019            mov     dpl,_getsn_sloc0_1_0
022A 856183    1020            mov     dph,(_getsn_sloc0_1_0 + 1)
022D 22        1021            ret
022E           1022   L011002?:
022E           1023   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:208: buff[j]=c;
022E E9        1024            mov     a,r1
022F 2510      1025            add     a,_getsn_buff_1_43
0231 FC        1026            mov     r4,a
0232 EA        1027            mov     a,r2
0233 3511      1028            addc    a,(_getsn_buff_1_43 + 1)
0235 FD        1029            mov     r5,a
0236 AE12      1030            mov     r6,(_getsn_buff_1_43 + 2)
0238 8C82      1031            mov     dpl,r4
023A 8D83      1032            mov     dph,r5
023C 8EF0      1033            mov     b,r6
023E EB        1034            mov     a,r3
023F 120000    1035            lcall   __gptrput
0242           1036   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:198: for(j=0; j<(len-1); j++)
0242 09        1037            inc     r1
0243 B900F0    1038            cjne    r1,#0x00,L011018?
0246 0A        1039            inc     r2
0247           1040   L011018?:
0247 8960      1041            mov     _getsn_sloc0_1_0,r1
0249 8A61      1042            mov     (_getsn_sloc0_1_0 + 1),r2
024B 8000      1043            sjmp    L011005?
024D           1044   L011008?:
024D           1045   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:211: buff[j]=0;
024D E560      1046            mov     a,_getsn_sloc0_1_0
024F 2510      1047            add     a,_getsn_buff_1_43
0251 FA        1048            mov     r2,a
0252 E561      1049            mov     a,(_getsn_sloc0_1_0 + 1)
0254 3511      1050            addc    a,(_getsn_buff_1_43 + 1)
0256 FB        1051            mov     r3,a
0257 AC12      1052            mov     r4,(_getsn_buff_1_43 + 2)
0259 8A82      1053            mov     dpl,r2
025B 8B83      1054            mov     dph,r3
025D 8CF0      1055            mov     b,r4
025F E4        1056            clr     a
0260 120000    1057            lcall   __gptrput
0263           1058   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:212: return len;
0263 857082    1059            mov     dpl,_getsn_PARM_2
0266 857183    1060            mov     dph,(_getsn_PARM_2 + 1)
0269 22        1061            ret
026A           1062   ;------------------------------------------------------------
026A           1063   ;Allocation info for local variables in function 'TIMER0_Init'
026A           1064   ;------------------------------------------------------------
026A           1065   ;------------------------------------------------------------
026A           1066   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:215: void TIMER0_Init(void)
026A           1067   ;        -----------------------------------------
026A           1068   ;         function TIMER0_Init
026A           1069   ;        -----------------------------------------
026A           1070   _TIMER0_Init:
026A           1071   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:217: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
026A 5389F0    1072            anl     _TMOD,#0xF0
026D           1073   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:218: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
026D 438901    1074            orl     _TMOD,#0x01
0270           1075   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:219: TR0=0; // Stop Timer/Counter 0
0270 C28C      1076            clr     _TR0
0272 22        1077            ret
0273           1078   ;------------------------------------------------------------
0273           1079   ;Allocation info for local variables in function 'PtoC'
0273           1080   ;------------------------------------------------------------
0273           1081   ;period                    Allocated to registers r2 r3 r4 r5 
0273           1082   ;------------------------------------------------------------
0273           1083   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:222: double PtoC(double period){
0273           1084   ;        -----------------------------------------
0273           1085   ;         function PtoC
0273           1086   ;        -----------------------------------------
0273           1087   _PtoC:
0273 AA82      1088            mov     r2,dpl
0275 AB83      1089            mov     r3,dph
0277 ACF0      1090            mov     r4,b
0279 FD        1091            mov     r5,a
027A           1092   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:223: return ((period*1000000000.0)/(3465.7359028));
027A C002      1093            push    ar2
027C C003      1094            push    ar3
027E C004      1095            push    ar4
0280 C005      1096            push    ar5
0282 906B28    1097            mov     dptr,#0x6B28
0285 75F06E    1098            mov     b,#0x6E
0288 744E      1099            mov     a,#0x4E
028A 120000    1100            lcall   ___fsmul
028D AA82      1101            mov     r2,dpl
028F AB83      1102            mov     r3,dph
0291 ACF0      1103            mov     r4,b
0293 FD        1104            mov     r5,a
0294 E581      1105            mov     a,sp
0296 24FC      1106            add     a,#0xfc
0298 F581      1107            mov     sp,a
029A 74C6      1108            mov     a,#0xC6
029C C0E0      1109            push    acc
029E 749B      1110            mov     a,#0x9B
02A0 C0E0      1111            push    acc
02A2 7458      1112            mov     a,#0x58
02A4 C0E0      1113            push    acc
02A6 7445      1114            mov     a,#0x45
02A8 C0E0      1115            push    acc
02AA 8A82      1116            mov     dpl,r2
02AC 8B83      1117            mov     dph,r3
02AE 8CF0      1118            mov     b,r4
02B0 ED        1119            mov     a,r5
02B1 120000    1120            lcall   ___fsdiv
02B4 AA82      1121            mov     r2,dpl
02B6 AB83      1122            mov     r3,dph
02B8 ACF0      1123            mov     r4,b
02BA FD        1124            mov     r5,a
02BB E581      1125            mov     a,sp
02BD 24FC      1126            add     a,#0xfc
02BF F581      1127            mov     sp,a
02C1 8A82      1128            mov     dpl,r2
02C3 8B83      1129            mov     dph,r3
02C5 8CF0      1130            mov     b,r4
02C7 ED        1131            mov     a,r5
02C8 22        1132            ret
02C9           1133   ;------------------------------------------------------------
02C9           1134   ;Allocation info for local variables in function 'writeOutputBuffer'
02C9           1135   ;------------------------------------------------------------
02C9           1136   ;cap                       Allocated with name '_writeOutputBuffer_PARM_2'
02C9           1137   ;buffer                    Allocated to registers r2 r3 r4 
02C9           1138   ;suffix                    Allocated to registers r5 
02C9           1139   ;------------------------------------------------------------
02C9           1140   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:226: void writeOutputBuffer(char *buffer, double cap){
02C9           1141   ;        -----------------------------------------
02C9           1142   ;         function writeOutputBuffer
02C9           1143   ;        -----------------------------------------
02C9           1144   _writeOutputBuffer:
02C9 AA82      1145            mov     r2,dpl
02CB AB83      1146            mov     r3,dph
02CD ACF0      1147            mov     r4,b
02CF           1148   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:227: char suffix = 'n';
02CF 7D6E      1149            mov     r5,#0x6E
02D1           1150   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:228: if(cap < 1.5)
02D1 C002      1151            push    ar2
02D3 C003      1152            push    ar3
02D5 C004      1153            push    ar4
02D7 C005      1154            push    ar5
02D9 E4        1155            clr     a
02DA C0E0      1156            push    acc
02DC C0E0      1157            push    acc
02DE 74C0      1158            mov     a,#0xC0
02E0 C0E0      1159            push    acc
02E2 743F      1160            mov     a,#0x3F
02E4 C0E0      1161            push    acc
02E6 853082    1162            mov     dpl,_writeOutputBuffer_PARM_2
02E9 853183    1163            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
02EC 8532F0    1164            mov     b,(_writeOutputBuffer_PARM_2 + 2)
02EF E533      1165            mov     a,(_writeOutputBuffer_PARM_2 + 3)
02F1 120000    1166            lcall   ___fslt
02F4 AE82      1167            mov     r6,dpl
02F6 E581      1168            mov     a,sp
02F8 24FC      1169            add     a,#0xfc
02FA F581      1170            mov     sp,a
02FC D005      1171            pop     ar5
02FE D004      1172            pop     ar4
0300 D003      1173            pop     ar3
0302 D002      1174            pop     ar2
0304 EE        1175            mov     a,r6
0305 6000      1176            jz      L014002?
0307           1177   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:230: sprintf(buffer, "Insert Capacitor");
0307 7470      1178            mov     a,#__str_0
0309 C0E0      1179            push    acc
030B 74B9      1180            mov     a,#(__str_0 >> 8)
030D C0E0      1181            push    acc
030F 7480      1182            mov     a,#0x80
0311 C0E0      1183            push    acc
0313 C002      1184            push    ar2
0315 C003      1185            push    ar3
0317 C004      1186            push    ar4
0319 120000    1187            lcall   _sprintf
031C E581      1188            mov     a,sp
031E 24FA      1189            add     a,#0xfa
0320 F581      1190            mov     sp,a
0322           1191   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:231: return;
0322 22        1192            ret
0323           1193   L014002?:
0323           1194   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:233: if(cap > 100.0)
0323 C002      1195            push    ar2
0325 C003      1196            push    ar3
0327 C004      1197            push    ar4
0329 C005      1198            push    ar5
032B E4        1199            clr     a
032C C0E0      1200            push    acc
032E C0E0      1201            push    acc
0330 74C8      1202            mov     a,#0xC8
0332 C0E0      1203            push    acc
0334 7442      1204            mov     a,#0x42
0336 C0E0      1205            push    acc
0338 853082    1206            mov     dpl,_writeOutputBuffer_PARM_2
033B 853183    1207            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
033E 8532F0    1208            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0341 E533      1209            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0343 120000    1210            lcall   ___fsgt
0346 AE82      1211            mov     r6,dpl
0348 E581      1212            mov     a,sp
034A 24FC      1213            add     a,#0xfc
034C F581      1214            mov     sp,a
034E D005      1215            pop     ar5
0350 D004      1216            pop     ar4
0352 D003      1217            pop     ar3
0354 D002      1218            pop     ar2
0356 EE        1219            mov     a,r6
0357 6000      1220            jz      L014004?
0359           1221   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:235: suffix = 'u';
0359 7D75      1222            mov     r5,#0x75
035B           1223   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:236: cap = cap/1000.0;
035B C002      1224            push    ar2
035D C003      1225            push    ar3
035F C004      1226            push    ar4
0361 C005      1227            push    ar5
0363 E4        1228            clr     a
0364 C0E0      1229            push    acc
0366 C0E0      1230            push    acc
0368 747A      1231            mov     a,#0x7A
036A C0E0      1232            push    acc
036C 7444      1233            mov     a,#0x44
036E C0E0      1234            push    acc
0370 853082    1235            mov     dpl,_writeOutputBuffer_PARM_2
0373 853183    1236            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0376 8532F0    1237            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0379 E533      1238            mov     a,(_writeOutputBuffer_PARM_2 + 3)
037B 120000    1239            lcall   ___fsdiv
037E 858230    1240            mov     _writeOutputBuffer_PARM_2,dpl
0381 858331    1241            mov     (_writeOutputBuffer_PARM_2 + 1),dph
0384 85F032    1242            mov     (_writeOutputBuffer_PARM_2 + 2),b
0387 F533      1243            mov     (_writeOutputBuffer_PARM_2 + 3),a
0389 E581      1244            mov     a,sp
038B 24FC      1245            add     a,#0xfc
038D F581      1246            mov     sp,a
038F D005      1247            pop     ar5
0391 D004      1248            pop     ar4
0393 D003      1249            pop     ar3
0395 D002      1250            pop     ar2
0397           1251   L014004?:
0397           1252   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:238: if(cap > 100.0)
0397 C002      1253            push    ar2
0399 C003      1254            push    ar3
039B C004      1255            push    ar4
039D C005      1256            push    ar5
039F E4        1257            clr     a
03A0 C0E0      1258            push    acc
03A2 C0E0      1259            push    acc
03A4 74C8      1260            mov     a,#0xC8
03A6 C0E0      1261            push    acc
03A8 7442      1262            mov     a,#0x42
03AA C0E0      1263            push    acc
03AC 853082    1264            mov     dpl,_writeOutputBuffer_PARM_2
03AF 853183    1265            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
03B2 8532F0    1266            mov     b,(_writeOutputBuffer_PARM_2 + 2)
03B5 E533      1267            mov     a,(_writeOutputBuffer_PARM_2 + 3)
03B7 120000    1268            lcall   ___fsgt
03BA AE82      1269            mov     r6,dpl
03BC E581      1270            mov     a,sp
03BE 24FC      1271            add     a,#0xfc
03C0 F581      1272            mov     sp,a
03C2 D005      1273            pop     ar5
03C4 D004      1274            pop     ar4
03C6 D003      1275            pop     ar3
03C8 D002      1276            pop     ar2
03CA EE        1277            mov     a,r6
03CB 6000      1278            jz      L014006?
03CD           1279   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:240: suffix = 'm';
03CD 7D6D      1280            mov     r5,#0x6D
03CF           1281   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:241: cap = cap/1000.0;
03CF C002      1282            push    ar2
03D1 C003      1283            push    ar3
03D3 C004      1284            push    ar4
03D5 C005      1285            push    ar5
03D7 E4        1286            clr     a
03D8 C0E0      1287            push    acc
03DA C0E0      1288            push    acc
03DC 747A      1289            mov     a,#0x7A
03DE C0E0      1290            push    acc
03E0 7444      1291            mov     a,#0x44
03E2 C0E0      1292            push    acc
03E4 853082    1293            mov     dpl,_writeOutputBuffer_PARM_2
03E7 853183    1294            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
03EA 8532F0    1295            mov     b,(_writeOutputBuffer_PARM_2 + 2)
03ED E533      1296            mov     a,(_writeOutputBuffer_PARM_2 + 3)
03EF 120000    1297            lcall   ___fsdiv
03F2 858230    1298            mov     _writeOutputBuffer_PARM_2,dpl
03F5 858331    1299            mov     (_writeOutputBuffer_PARM_2 + 1),dph
03F8 85F032    1300            mov     (_writeOutputBuffer_PARM_2 + 2),b
03FB F533      1301            mov     (_writeOutputBuffer_PARM_2 + 3),a
03FD E581      1302            mov     a,sp
03FF 24FC      1303            add     a,#0xfc
0401 F581      1304            mov     sp,a
0403 D005      1305            pop     ar5
0405 D004      1306            pop     ar4
0407 D003      1307            pop     ar3
0409 D002      1308            pop     ar2
040B           1309   L014006?:
040B           1310   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:243: if(cap > 100.0)
040B C002      1311            push    ar2
040D C003      1312            push    ar3
040F C004      1313            push    ar4
0411 C005      1314            push    ar5
0413 E4        1315            clr     a
0414 C0E0      1316            push    acc
0416 C0E0      1317            push    acc
0418 74C8      1318            mov     a,#0xC8
041A C0E0      1319            push    acc
041C 7442      1320            mov     a,#0x42
041E C0E0      1321            push    acc
0420 853082    1322            mov     dpl,_writeOutputBuffer_PARM_2
0423 853183    1323            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
0426 8532F0    1324            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0429 E533      1325            mov     a,(_writeOutputBuffer_PARM_2 + 3)
042B 120000    1326            lcall   ___fsgt
042E AE82      1327            mov     r6,dpl
0430 E581      1328            mov     a,sp
0432 24FC      1329            add     a,#0xfc
0434 F581      1330            mov     sp,a
0436 D005      1331            pop     ar5
0438 D004      1332            pop     ar4
043A D003      1333            pop     ar3
043C D002      1334            pop     ar2
043E EE        1335            mov     a,r6
043F 6000      1336            jz      L014008?
0441           1337   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:245: suffix = ' ';
0441 7D20      1338            mov     r5,#0x20
0443           1339   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:246: cap = cap/1000.0;
0443 C002      1340            push    ar2
0445 C003      1341            push    ar3
0447 C004      1342            push    ar4
0449 C005      1343            push    ar5
044B E4        1344            clr     a
044C C0E0      1345            push    acc
044E C0E0      1346            push    acc
0450 747A      1347            mov     a,#0x7A
0452 C0E0      1348            push    acc
0454 7444      1349            mov     a,#0x44
0456 C0E0      1350            push    acc
0458 853082    1351            mov     dpl,_writeOutputBuffer_PARM_2
045B 853183    1352            mov     dph,(_writeOutputBuffer_PARM_2 + 1)
045E 8532F0    1353            mov     b,(_writeOutputBuffer_PARM_2 + 2)
0461 E533      1354            mov     a,(_writeOutputBuffer_PARM_2 + 3)
0463 120000    1355            lcall   ___fsdiv
0466 858230    1356            mov     _writeOutputBuffer_PARM_2,dpl
0469 858331    1357            mov     (_writeOutputBuffer_PARM_2 + 1),dph
046C 85F032    1358            mov     (_writeOutputBuffer_PARM_2 + 2),b
046F F533      1359            mov     (_writeOutputBuffer_PARM_2 + 3),a
0471 E581      1360            mov     a,sp
0473 24FC      1361            add     a,#0xfc
0475 F581      1362            mov     sp,a
0477 D005      1363            pop     ar5
0479 D004      1364            pop     ar4
047B D003      1365            pop     ar3
047D D002      1366            pop     ar2
047F           1367   L014008?:
047F           1368   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:248: sprintf(buffer, "C = %.4f%cF", cap, suffix);
047F ED        1369            mov     a,r5
0480 33        1370            rlc     a
0481 95E0      1371            subb    a,acc
0483 FE        1372            mov     r6,a
0484 C005      1373            push    ar5
0486 C006      1374            push    ar6
0488 C030      1375            push    _writeOutputBuffer_PARM_2
048A C031      1376            push    (_writeOutputBuffer_PARM_2 + 1)
048C C032      1377            push    (_writeOutputBuffer_PARM_2 + 2)
048E C033      1378            push    (_writeOutputBuffer_PARM_2 + 3)
0490 74F0      1379            mov     a,#__str_1
0492 C0E0      1380            push    acc
0494 74BA      1381            mov     a,#(__str_1 >> 8)
0496 C0E0      1382            push    acc
0498 7480      1383            mov     a,#0x80
049A C0E0      1384            push    acc
049C C002      1385            push    ar2
049E C003      1386            push    ar3
04A0 C004      1387            push    ar4
04A2 120000    1388            lcall   _sprintf
04A5 E581      1389            mov     a,sp
04A7 24F4      1390            add     a,#0xf4
04A9 F581      1391            mov     sp,a
04AB 22        1392            ret
04AC           1393   ;------------------------------------------------------------
04AC           1394   ;Allocation info for local variables in function 'main'
04AC           1395   ;------------------------------------------------------------
04AC           1396   ;period                    Allocated to registers r2 r3 r4 r5 
04AC           1397   ;mode                      Allocated with name '_main_mode_1_59'
04AC           1398   ;output_buffer             Allocated with name '_main_output_buffer_1_59'
04AC           1399   ;------------------------------------------------------------
04AC           1400   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:251: void main (void) 
04AC           1401   ;        -----------------------------------------
04AC           1402   ;         function main
04AC           1403   ;        -----------------------------------------
04AC           1404   _main:
04AC           1405   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:255: int mode = 0;
04AC E4        1406            clr     a
04AD F5A0      1407            mov     _main_mode_1_59,a
04AF F5A1      1408            mov     (_main_mode_1_59 + 1),a
04B1           1409   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:258: TIMER0_Init();
04B1 120000    1410            lcall   _TIMER0_Init
04B4           1411   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:260: LCD_4BIT();
04B4 120000    1412            lcall   _LCD_4BIT
04B7           1413   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:262: waitms(500); // Give PuTTY a chance to start.
04B7 9001F4    1414            mov     dptr,#0x01F4
04BA 120000    1415            lcall   _waitms
04BD           1416   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:263: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
04BD 7430      1417            mov     a,#__str_2
04BF C0E0      1418            push    acc
04C1 74BB      1419            mov     a,#(__str_2 >> 8)
04C3 C0E0      1420            push    acc
04C5 7480      1421            mov     a,#0x80
04C7 C0E0      1422            push    acc
04C9 120000    1423            lcall   _printf
04CC 1581      1424            dec     sp
04CE 1581      1425            dec     sp
04D0 1581      1426            dec     sp
04D2           1427   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:268: __FILE__, __DATE__, __TIME__);
04D2           1428   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:267: "Compiled: %s, %s\n\n",
04D2 74B0      1429            mov     a,#__str_6
04D4 C0E0      1430            push    acc
04D6 74BB      1431            mov     a,#(__str_6 >> 8)
04D8 C0E0      1432            push    acc
04DA 7480      1433            mov     a,#0x80
04DC C0E0      1434            push    acc
04DE 74F0      1435            mov     a,#__str_5
04E0 C0E0      1436            push    acc
04E2 74BB      1437            mov     a,#(__str_5 >> 8)
04E4 C0E0      1438            push    acc
04E6 7480      1439            mov     a,#0x80
04E8 C0E0      1440            push    acc
04EA 7430      1441            mov     a,#__str_4
04EC C0E0      1442            push    acc
04EE 74BC      1443            mov     a,#(__str_4 >> 8)
04F0 C0E0      1444            push    acc
04F2 7480      1445            mov     a,#0x80
04F4 C0E0      1446            push    acc
04F6 7470      1447            mov     a,#__str_3
04F8 C0E0      1448            push    acc
04FA 74BC      1449            mov     a,#(__str_3 >> 8)
04FC C0E0      1450            push    acc
04FE 7480      1451            mov     a,#0x80
0500 C0E0      1452            push    acc
0502 120000    1453            lcall   _printf
0505 E581      1454            mov     a,sp
0507 24F4      1455            add     a,#0xf4
0509 F581      1456            mov     sp,a
050B           1457   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:270: while (1)
050B           1458   L015034?:
050B           1459   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:273: TL0=0; 
050B 758A00    1460            mov     _TL0,#0x00
050E           1461   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:274: TH0=0;
050E 758C00    1462            mov     _TH0,#0x00
0511           1463   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:275: TF0=0;
0511 C28D      1464            clr     _TF0
0513           1465   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:276: overflow_count=0;
0513 750000    1466            mov     _overflow_count,#0x00
0516           1467   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:278: while(P0_1!=0); // Wait for the signal to be zero
0516           1468   L015001?:
0516 2081F0    1469            jb      _P0_1,L015001?
0519           1470   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:279: while(P0_1!=1); // Wait for the signal to be one
0519           1471   L015004?:
0519 308130    1472            jnb     _P0_1,L015004?
051C           1473   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:280: TR0=1; // Start the timer
051C D28C      1474            setb    _TR0
051E           1475   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:281: while(P0_1!=0) // Wait for the signal to be zero
051E           1476   L015009?:
051E 3081B0    1477            jnb     _P0_1,L015014?
0521           1478   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:283: if(TF0==1) // Did the 16-bit timer overflow?
0521           1479   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:285: TF0=0;
0521 108DF0    1480            jbc     _TF0,L015058?
0524 8000      1481            sjmp    L015009?
0526           1482   L015058?:
0526           1483   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:286: overflow_count++;
0526 0500      1484            inc     _overflow_count
0528           1485   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:289: while(P0_1!=1) // Wait for the signal to be one
0528 8000      1486            sjmp    L015009?
052A           1487   L015014?:
052A 208130    1488            jb      _P0_1,L015016?
052D           1489   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:291: if(TF0==1) // Did the 16-bit timer overflow?
052D           1490   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:293: TF0=0;
052D 108D70    1491            jbc     _TF0,L015060?
0530 8000      1492            sjmp    L015014?
0532           1493   L015060?:
0532           1494   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:294: overflow_count++;
0532 0500      1495            inc     _overflow_count
0534 8000      1496            sjmp    L015014?
0536           1497   L015016?:
0536           1498   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:297: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0536 C28C      1499            clr     _TR0
0538           1500   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:298: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0538 850082    1501            mov     dpl,_overflow_count
053B 120000    1502            lcall   ___uchar2fs
053E AC82      1503            mov     r4,dpl
0540 AD83      1504            mov     r5,dph
0542 AEF0      1505            mov     r6,b
0544 FF        1506            mov     r7,a
0545 C004      1507            push    ar4
0547 C005      1508            push    ar5
0549 C006      1509            push    ar6
054B C007      1510            push    ar7
054D 900000    1511            mov     dptr,#0x0000
0550 75F080    1512            mov     b,#0x80
0553 7447      1513            mov     a,#0x47
0555 120000    1514            lcall   ___fsmul
0558 AC82      1515            mov     r4,dpl
055A AD83      1516            mov     r5,dph
055C AEF0      1517            mov     r6,b
055E FF        1518            mov     r7,a
055F E581      1519            mov     a,sp
0561 24FC      1520            add     a,#0xfc
0563 F581      1521            mov     sp,a
0565 858C82    1522            mov     dpl,_TH0
0568 C004      1523            push    ar4
056A C005      1524            push    ar5
056C C006      1525            push    ar6
056E C007      1526            push    ar7
0570 120000    1527            lcall   ___uchar2fs
0573 A882      1528            mov     r0,dpl
0575 A983      1529            mov     r1,dph
0577 AAF0      1530            mov     r2,b
0579 FB        1531            mov     r3,a
057A C000      1532            push    ar0
057C C001      1533            push    ar1
057E C002      1534            push    ar2
0580 C003      1535            push    ar3
0582 900000    1536            mov     dptr,#0x0000
0585 75F080    1537            mov     b,#0x80
0588 7443      1538            mov     a,#0x43
058A 120000    1539            lcall   ___fsmul
058D AA82      1540            mov     r2,dpl
058F AB83      1541            mov     r3,dph
0591 A8F0      1542            mov     r0,b
0593 F9        1543            mov     r1,a
0594 E581      1544            mov     a,sp
0596 24FC      1545            add     a,#0xfc
0598 F581      1546            mov     sp,a
059A D007      1547            pop     ar7
059C D006      1548            pop     ar6
059E D005      1549            pop     ar5
05A0 D004      1550            pop     ar4
05A2 C002      1551            push    ar2
05A4 C003      1552            push    ar3
05A6 C000      1553            push    ar0
05A8 C001      1554            push    ar1
05AA 8C82      1555            mov     dpl,r4
05AC 8D83      1556            mov     dph,r5
05AE 8EF0      1557            mov     b,r6
05B0 EF        1558            mov     a,r7
05B1 120000    1559            lcall   ___fsadd
05B4 AA82      1560            mov     r2,dpl
05B6 AB83      1561            mov     r3,dph
05B8 ACF0      1562            mov     r4,b
05BA FD        1563            mov     r5,a
05BB E581      1564            mov     a,sp
05BD 24FC      1565            add     a,#0xfc
05BF F581      1566            mov     sp,a
05C1 AE8A      1567            mov     r6,_TL0
05C3 7F00      1568            mov     r7,#0x00
05C5 8E82      1569            mov     dpl,r6
05C7 8F83      1570            mov     dph,r7
05C9 C002      1571            push    ar2
05CB C003      1572            push    ar3
05CD C004      1573            push    ar4
05CF C005      1574            push    ar5
05D1 120000    1575            lcall   ___sint2fs
05D4 AE82      1576            mov     r6,dpl
05D6 AF83      1577            mov     r7,dph
05D8 A8F0      1578            mov     r0,b
05DA F9        1579            mov     r1,a
05DB D005      1580            pop     ar5
05DD D004      1581            pop     ar4
05DF D003      1582            pop     ar3
05E1 D002      1583            pop     ar2
05E3 C006      1584            push    ar6
05E5 C007      1585            push    ar7
05E7 C000      1586            push    ar0
05E9 C001      1587            push    ar1
05EB 8A82      1588            mov     dpl,r2
05ED 8B83      1589            mov     dph,r3
05EF 8CF0      1590            mov     b,r4
05F1 ED        1591            mov     a,r5
05F2 120000    1592            lcall   ___fsadd
05F5 AA82      1593            mov     r2,dpl
05F7 AB83      1594            mov     r3,dph
05F9 ACF0      1595            mov     r4,b
05FB FD        1596            mov     r5,a
05FC E581      1597            mov     a,sp
05FE 24FC      1598            add     a,#0xfc
0600 F581      1599            mov     sp,a
0602 C002      1600            push    ar2
0604 C003      1601            push    ar3
0606 C004      1602            push    ar4
0608 C005      1603            push    ar5
060A 90F4FC    1604            mov     dptr,#0xF4FC
060D 75F032    1605            mov     b,#0x32
0610 7434      1606            mov     a,#0x34
0612 120000    1607            lcall   ___fsmul
0615 AA82      1608            mov     r2,dpl
0617 AB83      1609            mov     r3,dph
0619 ACF0      1610            mov     r4,b
061B FD        1611            mov     r5,a
061C E581      1612            mov     a,sp
061E 24FC      1613            add     a,#0xfc
0620 F581      1614            mov     sp,a
0622           1615   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:301: if(P1_1 == 0)
0622 209170    1616            jb      _P1_1,L015023?
0625           1617   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:303: printf("button2 pressed\n");
0625 C002      1618            push    ar2
0627 C003      1619            push    ar3
0629 C004      1620            push    ar4
062B C005      1621            push    ar5
062D 74B0      1622            mov     a,#__str_7
062F C0E0      1623            push    acc
0631 74BF      1624            mov     a,#(__str_7 >> 8)
0633 C0E0      1625            push    acc
0635 7480      1626            mov     a,#0x80
0637 C0E0      1627            push    acc
0639 120000    1628            lcall   _printf
063C 1581      1629            dec     sp
063E 1581      1630            dec     sp
0640 1581      1631            dec     sp
0642 D005      1632            pop     ar5
0644 D004      1633            pop     ar4
0646 D003      1634            pop     ar3
0648 D002      1635            pop     ar2
064A           1636   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:304: mode++;
064A 05A0      1637            inc     _main_mode_1_59
064C E4        1638            clr     a
064D B5A0F0    1639            cjne    a,_main_mode_1_59,L015062?
0650 05A1      1640            inc     (_main_mode_1_59 + 1)
0652           1641   L015062?:
0652           1642   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:305: if(mode > 1)
0652 C3        1643            clr     c
0653 7401      1644            mov     a,#0x01
0655 95A0      1645            subb    a,_main_mode_1_59
0657 E4        1646            clr     a
0658 6480      1647            xrl     a,#0x80
065A 85A1F0    1648            mov     b,(_main_mode_1_59 + 1)
065D 63F080    1649            xrl     b,#0x80
0660 95F0      1650            subb    a,b
0662 5000      1651            jnc     L015019?
0664           1652   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:306: mode = 0;
0664 E4        1653            clr     a
0665 F5A0      1654            mov     _main_mode_1_59,a
0667 F5A1      1655            mov     (_main_mode_1_59 + 1),a
0669           1656   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:307: while(P1_1 == 0)
0669           1657   L015019?:
0669 309130    1658            jnb     _P1_1,L015019?
066C           1659   L015023?:
066C           1660   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:312: if(P1_3 == 0)
066C 209370    1661            jb      _P1_3,L015028?
066F           1662   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:314: writeOutputBuffer(output_buffer, PtoC(period));
066F 8A82      1663            mov     dpl,r2
0671 8B83      1664            mov     dph,r3
0673 8CF0      1665            mov     b,r4
0675 ED        1666            mov     a,r5
0676 C002      1667            push    ar2
0678 C003      1668            push    ar3
067A C004      1669            push    ar4
067C C005      1670            push    ar5
067E 120000    1671            lcall   _PtoC
0681 858230    1672            mov     _writeOutputBuffer_PARM_2,dpl
0684 858331    1673            mov     (_writeOutputBuffer_PARM_2 + 1),dph
0687 85F032    1674            mov     (_writeOutputBuffer_PARM_2 + 2),b
068A F533      1675            mov     (_writeOutputBuffer_PARM_2 + 3),a
068C 90B0F0    1676            mov     dptr,#_main_output_buffer_1_59
068F 75F040    1677            mov     b,#0x40
0692 120000    1678            lcall   _writeOutputBuffer
0695           1679   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:315: LCDprint(output_buffer, 2, 1);
0695 75C002    1680            mov     _LCDprint_PARM_2,#0x02
0698 D2E0      1681            setb    _LCDprint_PARM_3
069A 90B0F0    1682            mov     dptr,#_main_output_buffer_1_59
069D 75F040    1683            mov     b,#0x40
06A0 120000    1684            lcall   _LCDprint
06A3 D005      1685            pop     ar5
06A5 D004      1686            pop     ar4
06A7 D003      1687            pop     ar3
06A9 D002      1688            pop     ar2
06AB           1689   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:316: while(P1_3 == 0)
06AB           1690   L015024?:
06AB 3093B0    1691            jnb     _P1_3,L015024?
06AE           1692   L015028?:
06AE           1693   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:321: if(mode == 0)
06AE E5A0      1694            mov     a,_main_mode_1_59
06B0 45A1      1695            orl     a,(_main_mode_1_59 + 1)
06B2 7000      1696            jnz     L015030?
06B4           1697   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:323: writeOutputBuffer(output_buffer, PtoC(period));
06B4 8A82      1698            mov     dpl,r2
06B6 8B83      1699            mov     dph,r3
06B8 8CF0      1700            mov     b,r4
06BA ED        1701            mov     a,r5
06BB C002      1702            push    ar2
06BD C003      1703            push    ar3
06BF C004      1704            push    ar4
06C1 C005      1705            push    ar5
06C3 120000    1706            lcall   _PtoC
06C6 858230    1707            mov     _writeOutputBuffer_PARM_2,dpl
06C9 858331    1708            mov     (_writeOutputBuffer_PARM_2 + 1),dph
06CC 85F032    1709            mov     (_writeOutputBuffer_PARM_2 + 2),b
06CF F533      1710            mov     (_writeOutputBuffer_PARM_2 + 3),a
06D1 90B0F0    1711            mov     dptr,#_main_output_buffer_1_59
06D4 75F040    1712            mov     b,#0x40
06D7 120000    1713            lcall   _writeOutputBuffer
06DA           1714   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:324: printf("\r%s", output_buffer);
06DA 74F0      1715            mov     a,#_main_output_buffer_1_59
06DC C0E0      1716            push    acc
06DE 74B0      1717            mov     a,#(_main_output_buffer_1_59 >> 8)
06E0 C0E0      1718            push    acc
06E2 7440      1719            mov     a,#0x40
06E4 C0E0      1720            push    acc
06E6 7430      1721            mov     a,#__str_8
06E8 C0E0      1722            push    acc
06EA 74C1      1723            mov     a,#(__str_8 >> 8)
06EC C0E0      1724            push    acc
06EE 7480      1725            mov     a,#0x80
06F0 C0E0      1726            push    acc
06F2 120000    1727            lcall   _printf
06F5 E581      1728            mov     a,sp
06F7 24FA      1729            add     a,#0xfa
06F9 F581      1730            mov     sp,a
06FB           1731   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:325: LCDprint(output_buffer, 1, 1);   
06FB 75C001    1732            mov     _LCDprint_PARM_2,#0x01
06FE D2E0      1733            setb    _LCDprint_PARM_3
0700 90B0F0    1734            mov     dptr,#_main_output_buffer_1_59
0703 75F040    1735            mov     b,#0x40
0706 120000    1736            lcall   _LCDprint
0709 D005      1737            pop     ar5
070B D004      1738            pop     ar4
070D D003      1739            pop     ar3
070F D002      1740            pop     ar2
0711           1741   L015030?:
0711           1742   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:327: if(mode == 1)
0711 7401      1743            mov     a,#0x01
0713 B5A070    1744            cjne    a,_main_mode_1_59,L015068?
0716 E4        1745            clr     a
0717 B5A170    1746            cjne    a,(_main_mode_1_59 + 1),L015068?
071A 8000      1747            sjmp    L015069?
071C           1748   L015068?:
071C 020000    1749            ljmp    L015034?
071F           1750   L015069?:
071F           1751   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:329: sprintf(output_buffer, "T=%lfs", period);
071F C002      1752            push    ar2
0721 C003      1753            push    ar3
0723 C004      1754            push    ar4
0725 C005      1755            push    ar5
0727 74F0      1756            mov     a,#__str_9
0729 C0E0      1757            push    acc
072B 74C1      1758            mov     a,#(__str_9 >> 8)
072D C0E0      1759            push    acc
072F 7480      1760            mov     a,#0x80
0731 C0E0      1761            push    acc
0733 74F0      1762            mov     a,#_main_output_buffer_1_59
0735 C0E0      1763            push    acc
0737 74B0      1764            mov     a,#(_main_output_buffer_1_59 >> 8)
0739 C0E0      1765            push    acc
073B 7440      1766            mov     a,#0x40
073D C0E0      1767            push    acc
073F 120000    1768            lcall   _sprintf
0742 E581      1769            mov     a,sp
0744 24F6      1770            add     a,#0xf6
0746 F581      1771            mov     sp,a
0748           1772   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:330: printf("\r%s", output_buffer);
0748 74F0      1773            mov     a,#_main_output_buffer_1_59
074A C0E0      1774            push    acc
074C 74B0      1775            mov     a,#(_main_output_buffer_1_59 >> 8)
074E C0E0      1776            push    acc
0750 7440      1777            mov     a,#0x40
0752 C0E0      1778            push    acc
0754 7430      1779            mov     a,#__str_8
0756 C0E0      1780            push    acc
0758 74C1      1781            mov     a,#(__str_8 >> 8)
075A C0E0      1782            push    acc
075C 7480      1783            mov     a,#0x80
075E C0E0      1784            push    acc
0760 120000    1785            lcall   _printf
0763 E581      1786            mov     a,sp
0765 24FA      1787            add     a,#0xfa
0767 F581      1788            mov     sp,a
0769           1789   ;        C:\Users\kcgro\Documents\GitHub\ELEC291\LAB4\PeriodEFM8.c:331: LCDprint(output_buffer, 1, 1);   
0769 75C001    1790            mov     _LCDprint_PARM_2,#0x01
076C D2E0      1791            setb    _LCDprint_PARM_3
076E 90B0F0    1792            mov     dptr,#_main_output_buffer_1_59
0771 75F040    1793            mov     b,#0x40
0774 120000    1794            lcall   _LCDprint
0777 020000    1795            ljmp    L015034?
077A           1796            rseg R_CSEG
077A           1797   
0000           1798            rseg R_XINIT
0000           1799   
0000           1800            rseg R_CONST
0000           1801   __str_0:
0000 496E7365  1802            db 'Insert Capacitor'
     72742043
     61706163
     69746F72
0010 00        1803            db 0x00
0011           1804   __str_1:
0011 43203D20  1805            db 'C = %.4f%cF'
     252E3466
     256346
001C 00        1806            db 0x00
001D           1807   __str_2:
001D 1B        1808            db 0x1B
001E 5B324A    1809            db '[2J'
0021 00        1810            db 0x00
0022           1811   __str_3:
0022 45464D38  1812            db 'EFM8 Period measurement at pin P0.1 using Timer 0.'
     20506572
     696F6420
     6D656173
     7572656D
     656E7420
     61742070
     696E2050
     302E3120
     7573696E
     67205469
     6D657220
     302E
0054 0A        1813            db 0x0A
0055 46696C65  1814            db 'File: %s'
     3A202573
005D 0A        1815            db 0x0A
005E 436F6D70  1816            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
006E 0A        1817            db 0x0A
006F 0A        1818            db 0x0A
0070 00        1819            db 0x00
0071           1820   __str_4:
0071 433A      1821            db 'C:'
0073 5C        1822            db 0x5C
0074 55736572  1823            db 'Users'
     73
0079 5C        1824            db 0x5C
007A 6B636772  1825            db 'kcgro'
     6F
007F 5C        1826            db 0x5C
0080 446F6375  1827            db 'Documents'
     6D656E74
     73
0089 5C        1828            db 0x5C
008A 47697448  1829            db 'GitHub'
     7562
0090 5C        1830            db 0x5C
0091 454C4543  1831            db 'ELEC291'
     323931
0098 5C        1832            db 0x5C
0099 4C414234  1833            db 'LAB4'
009D 5C        1834            db 0x5C
009E 50657269  1835            db 'PeriodEFM8.c'
     6F644546
     4D382E63
00AA 00        1836            db 0x00
00AB           1837   __str_5:
00AB 4D617220  1838            db 'Mar  1 2023'
     20312032
     303233
00B6 00        1839            db 0x00
00B7           1840   __str_6:
00B7 31333A30  1841            db '13:06:00'
     363A3030
00BF 00        1842            db 0x00
00C0           1843   __str_7:
00C0 62757474  1844            db 'button2 pressed'
     6F6E3220
     70726573
     736564
00CF 0A        1845            db 0x0A
00D0 00        1846            db 0x00
00D1           1847   __str_8:
00D1 0D        1848            db 0x0D
00D2 2573      1849            db '%s'
00D4 00        1850            db 0x00
00D5           1851   __str_9:
00D5 543D256C  1852            db 'T=%lfs'
     6673
00DB 00        1853            db 0x00
00DC           1854   
0003           1855            CSEG
0003           1856   
0003           1857   end
